           default   rel
           global    umber_main#State
           global    umber_resume_wrapper:weak
           global    State.set
           global    State.fib
           global    State.get
           global    State.while
           global    State.#binding.4
           global    State.handle_state
           global    State.#fun.3
           global    State.#fun.8
           global    State.#fun.1
           global    State.handle_state.handle_effects.inner#3
           global    State.#fun.9
           global    State.#fun.5
           global    State.#fun.7
           global    State.#fun.8#closure:weak
           global    State.#fun.8#closure_wrapper_fun:weak
           global    int.1:weak
           global    int.6:weak
           global    int.0:weak
           extern    umber_fiber_destroy
           extern    umber_gc_alloc
           extern    umber_fiber_find_handler_and_detach
           extern    umber_fiber_create
           extern    Std.Prelude.Operators.__#1049114386
           extern    umber_fiber_reparent
           extern    Std.Prelude.Operators.__#506761450
           extern    Std.Prelude.Operators.__#100243373
           extern    Std.Prelude.print_int

           section   .text

umber_main#State:
           push      rbp
           mov       rbp, rsp
           mov       rax, int.6
           call      State.fib
           call      Std.Prelude.print_int wrt ..plt
           mov       r9, rax
           mov       qword [State.#binding.4], r9
           pop       rbp
           ret       

State.set:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           sub       rsp, 16
           mov       rdi, r14
           mov       rsi, 275351816
           mov       rdx, rsp
           call      umber_fiber_find_handler_and_detach wrt ..plt
           mov       r13, rax
           mov       r9, qword [rsp]
           mov       qword [rbp - 16], r9
           add       rsp, 16
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 32784
           mov       word [rax + 2], 3
           mov       qword [rax + 8], umber_resume_wrapper
           mov       qword [rax + 16], r14
           mov       qword [rax + 24], .perform_effect.resume_here#0
           mov       rbx, qword [rbp - 8]
           mov       qword [r14 + 8], rbp
           mov       qword [r14 + 16], rsp
           mov       r14, qword [rbp - 16]
           mov       rbp, qword [r14 + 8]
           mov       rsp, qword [r14 + 16]
           jmp       r13
.perform_effect.resume_here#0:
           add       rsp, 16
           pop       rbp
           ret       

State.fib:
           push      rbp
           mov       rbp, rsp
           mov       r13, rax
           mov       r9, qword [int.0 + 8]
           cmp       qword [r13 + 8], r9
           jnz       .cond_assign.cond1#1
.cond_assign.vars0#2:
           jmp       .cond_assign.body#4
.cond_assign.cond1#1:
           mov       r9, qword [int.1 + 8]
           cmp       qword [r13 + 8], r9
           jnz       .cond_assign.if_none_matched#5
.cond_assign.vars1#3:
           jmp       .cond_assign.body#4
.cond_assign.body#4:
           mov       rax, int.1
           jmp       .cond_assign.merge#6
.cond_assign.if_none_matched#5:
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       r12, rax
           mov       word [r12], 0
           mov       word [r12 + 2], 3
           mov       qword [r12 + 8], int.1
           mov       qword [r12 + 16], int.1
           mov       qword [r12 + 24], int.1
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 2
           mov       qword [rax + 8], State.#fun.9
           mov       qword [rax + 16], r13
           mov       rbx, rax
           mov       rax, r12
           call      State.handle_state
           mov       r9, qword [rax + 8]
           mov       rax, qword [r9 + 24]
           jmp       .cond_assign.merge#6
.cond_assign.merge#6:
           pop       rbp
           ret       

State.get:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           sub       rsp, 16
           mov       rdi, r14
           mov       rsi, 221380392
           mov       rdx, rsp
           call      umber_fiber_find_handler_and_detach wrt ..plt
           mov       r13, rax
           mov       r9, qword [rsp]
           mov       qword [rbp - 16], r9
           add       rsp, 16
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 32784
           mov       word [rax + 2], 3
           mov       qword [rax + 8], umber_resume_wrapper
           mov       qword [rax + 16], r14
           mov       qword [rax + 24], .perform_effect.resume_here#0
           mov       rbx, qword [rbp - 8]
           mov       qword [r14 + 8], rbp
           mov       qword [r14 + 16], rsp
           mov       r14, qword [rbp - 16]
           mov       rbp, qword [r14 + 8]
           mov       rsp, qword [r14 + 16]
           jmp       r13
.perform_effect.resume_here#0:
           add       rsp, 16
           pop       rbp
           ret       

State.while:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 32
           mov       qword [rbp - 16], rax
           mov       qword [rbp - 8], rbx
           mov       rax, qword [rbp - 16]
           mov       rbx, 1
           mov       r9, qword [rbp - 16]
           call      qword [r9 + 8]
           cmp       rax, 3
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           mov       rax, qword [rbp - 8]
           mov       rbx, 1
           mov       r9, qword [rbp - 8]
           call      qword [r9 + 8]
           mov       qword [rbp - 24], rax
           mov       rax, qword [rbp - 16]
           mov       rbx, qword [rbp - 8]
           call      State.while
           mov       rbx, rax
           mov       rax, qword [rbp - 24]
           call      Std.Prelude.Operators.__#506761450 wrt ..plt
           jmp       .cond_assign.merge#4
.cond_assign.if_none_matched#3:
           mov       rax, 1
           jmp       .cond_assign.merge#4
.cond_assign.merge#4:
           add       rsp, 32
           pop       rbp
           ret       

State.handle_state:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           mov       rdi, r14
           call      umber_fiber_create wrt ..plt
           mov       r9, rax
           push      .handle_effects.end#2
           mov       qword [r9 + 32], 2
           mov       qword [r9 + 40], 221380392
           mov       qword [r9 + 48], .handle_effects.handler0#0
           mov       qword [r9 + 56], 275351816
           mov       qword [r9 + 64], .handle_effects.handler1#1
           mov       rax, rbx
           mov       qword [r14 + 8], rbp
           mov       qword [r14 + 16], rsp
           mov       r14, r9
           mov       r9, qword [r14 + 24]
           lea       rsp, byte [r14 + r9]
           mov       rbp, rsp
           call      State.handle_state.handle_effects.inner#3
           mov       rdi, r14
           mov       r14, qword [r14]
           mov       rbp, qword [r14 + 8]
           mov       rsp, qword [r14 + 16]
           sub       rsp, 8
           mov       r13, rax
           call      umber_fiber_destroy wrt ..plt
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 2
           mov       qword [rax + 8], State.#fun.1
           mov       qword [rax + 16], r13
           add       rsp, 8
           ret       
.handle_effects.handler0#0:
           sub       rsp, 8
           mov       qword [rbp - 16], rax
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 2
           mov       qword [rax + 8], State.#fun.3
           mov       r9, qword [rbp - 16]
           mov       qword [rax + 16], r9
           add       rsp, 8
           ret       
.handle_effects.handler1#1:
           sub       rsp, 8
           mov       qword [rbp - 16], rax
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 3
           mov       qword [rax + 8], State.#fun.5
           mov       qword [rax + 16], rbx
           mov       r9, qword [rbp - 16]
           mov       qword [rax + 24], r9
           add       rsp, 8
           ret       
.handle_effects.end#2:
           mov       r9, rax
           mov       rax, r9
           mov       rbx, qword [rbp - 8]
           call      qword [r9 + 8]
           add       rsp, 16
           pop       rbp
           ret       

State.#fun.3:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rbx
           mov       r9, qword [rax + 16]
           mov       rax, qword [rax + 16]
           mov       rbx, qword [rbp - 8]
           call      qword [r9 + 8]
           mov       r9, rax
           mov       rax, r9
           mov       rbx, qword [rbp - 8]
           call      qword [r9 + 8]
           add       rsp, 16
           pop       rbp
           ret       

State.#fun.8:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       rax, 1
           call      State.get
           mov       qword [rbp - 16], rax
           mov       r9, qword [rbp - 16]
           mov       rax, qword [r9 + 16]
           mov       r9, qword [rbp - 16]
           mov       rbx, qword [r9 + 24]
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           mov       qword [rbp - 8], rax
           mov       r9, qword [rbp - 16]
           mov       rax, qword [r9 + 8]
           mov       rbx, int.1
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           mov       r13, rax
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 0
           mov       word [rax + 2], 3
           mov       qword [rax + 8], r13
           mov       r9, qword [rbp - 16]
           mov       r9, qword [r9 + 24]
           mov       qword [rax + 16], r9
           mov       r9, qword [rbp - 8]
           mov       qword [rax + 24], r9
           call      State.set
           add       rsp, 16
           pop       rbp
           ret       

State.#fun.1:
           push      rbp
           mov       rbp, rsp
           mov       r12, rax
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 0
           mov       word [rax + 2], 2
           mov       qword [rax + 8], rbx
           mov       r9, qword [r12 + 16]
           mov       qword [rax + 16], r9
           pop       rbp
           ret       

State.handle_state.handle_effects.inner#3:
           push      rbp
           mov       rbp, rsp
           mov       r9, rax
           mov       rax, r9
           mov       rbx, 1
           call      qword [r9 + 8]
           pop       rbp
           ret       

State.#fun.9:
           push      rbp
           mov       rbp, rsp
           mov       r13, rax
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 2
           mov       qword [rax + 8], State.#fun.7
           mov       r9, qword [r13 + 16]
           mov       qword [rax + 16], r9
           mov       rbx, State.#fun.8#closure
           call      State.while
           pop       rbp
           ret       

State.#fun.5:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           mov       r9, qword [rbp - 8]
           mov       r10, qword [r9 + 24]
           mov       r9, qword [rbp - 8]
           mov       rax, qword [r9 + 24]
           mov       rbx, 1
           call      qword [r10 + 8]
           mov       r10, rax
           mov       rax, r10
           mov       r9, qword [rbp - 8]
           mov       rbx, qword [r9 + 16]
           call      qword [r10 + 8]
           add       rsp, 16
           pop       rbp
           ret       

State.#fun.7:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           mov       rax, 1
           call      State.get
           mov       rax, qword [rax + 8]
           mov       r9, qword [rbp - 8]
           mov       rbx, qword [r9 + 16]
           call      Std.Prelude.Operators.__#100243373 wrt ..plt
           add       rsp, 16
           pop       rbp
           ret       

State.#fun.8#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           call      State.#fun.8
           pop       rbp
           ret       

umber_resume_wrapper:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           mov       r9, qword [rbp - 8]
           mov       rdi, qword [r9 + 16]
           mov       rsi, r14
           call      umber_fiber_reparent wrt ..plt
           push      .end#0
           mov       qword [r14 + 8], rbp
           mov       qword [r14 + 16], rsp
           mov       r9, qword [rbp - 8]
           mov       r14, qword [r9 + 16]
           mov       rbp, qword [r14 + 8]
           mov       rsp, qword [r14 + 16]
           mov       rax, rbx
           jmp       qword [r9 + 24]
.end#0:
           add       rsp, 16
           pop       rbp
           ret       

           section   .rodata
           sectalign 8
int.1:
           dw        32769
           dw        1
           dd        0
           dq        1
int.6:
           dw        32769
           dw        1
           dd        0
           dq        6
int.0:
           dw        32769
           dw        1
           dd        0
           dq        0
State.#fun.8#closure:
           dw        12289
           dw        1
           dd        0
           dq        State.#fun.8#closure_wrapper_fun

           section   .bss
           sectalign 8
State.#binding.4:
           resq      1

