           default   rel
           global    umber_main#MutualRecursion
           global    MutualRecursion.number
           global    MutualRecursion.Leaf
           global    MutualRecursion.f
           global    MutualRecursion.Node
           global    MutualRecursion.even
           global    MutualRecursion.loop.1
           global    MutualRecursion.odd
           global    MutualRecursion.#binding.1
           global    MutualRecursion.sum_tree
           global    MutualRecursion.sum_forest
           global    int.5:weak
           global    int.1:weak
           global    int.17:weak
           global    int.0:weak
           extern    Std.Prelude.Operators.__#72260286
           extern    umber_gc_alloc
           extern    Std.Prelude.Operators.__#664800900
           extern    Std.Prelude.List.Nil
           extern    Std.Prelude.print_int
           extern    Std.Prelude.Operators.__#1049114386

           section   .text

umber_main#MutualRecursion:
           sub       rsp, 8
           mov       qword [MutualRecursion.Leaf], 1
           mov       rax, int.5
           mov       rbx, int.5
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           mov       r9, rax
           mov       qword [MutualRecursion.number], r9
           mov       r9, qword [Std.Prelude.List.Nil]
           mov       qword [MutualRecursion.f], r9
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       r14, rax
           mov       word [r14], 0
           mov       word [r14 + 2], 2
           mov       qword [r14 + 8], int.17
           mov       r9, qword [Std.Prelude.List.Nil]
           mov       qword [r14 + 16], r9
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       r13, rax
           mov       word [r13], 0
           mov       word [r13 + 2], 2
           mov       qword [r13 + 8], r14
           mov       r9, qword [Std.Prelude.List.Nil]
           mov       qword [r13 + 16], r9
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       r14, rax
           mov       word [r14], 0
           mov       word [r14 + 2], 2
           mov       r9, qword [MutualRecursion.Leaf]
           mov       qword [r14 + 8], r9
           mov       qword [r14 + 16], r13
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 0
           mov       word [rax + 2], 2
           mov       qword [rax + 8], int.1
           mov       qword [rax + 16], r14
           call      MutualRecursion.sum_tree
           call      Std.Prelude.print_int wrt ..plt
           mov       r9, rax
           mov       qword [MutualRecursion.#binding.1], r9
           add       rsp, 8
           ret       

MutualRecursion.Node:
           sub       rsp, 8
           mov       r13, rax
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 0
           mov       word [rax + 2], 2
           mov       qword [rax + 8], r13
           mov       qword [rax + 16], rbx
           add       rsp, 8
           ret       

MutualRecursion.even:
           sub       rsp, 8
           mov       qword [rsp], rax
           mov       rax, qword [rsp]
           mov       rbx, int.0
           call      Std.Prelude.Operators.__#664800900 wrt ..plt
           cmp       rax, 3
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           mov       rax, 3
           jmp       .cond_assign.merge#4
.cond_assign.if_none_matched#3:
           mov       rbx, int.1
           mov       rax, qword [rsp]
           call      Std.Prelude.Operators.__#72260286 wrt ..plt
           call      MutualRecursion.odd
           jmp       .cond_assign.merge#4
.cond_assign.merge#4:
           add       rsp, 8
           ret       

MutualRecursion.loop.1:
           sub       rsp, 24
           mov       qword [rsp], rax
           mov       qword [rsp + 8], rbx
           mov       r9, qword [rsp + 8]
           cmp       r9, 1
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           jmp       .cond_assign.merge#4
.cond_assign.if_none_matched#3:
           mov       r9, qword [rsp + 8]
           mov       rax, qword [r9 + 8]
           call      MutualRecursion.sum_tree
           mov       rbx, rax
           mov       rax, qword [rsp]
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           mov       r9, qword [rsp + 8]
           mov       rbx, qword [r9 + 16]
           call      MutualRecursion.loop.1
           mov       qword [rsp], rax
           jmp       .cond_assign.merge#4
.cond_assign.merge#4:
           mov       rax, qword [rsp]
           add       rsp, 24
           ret       

MutualRecursion.odd:
           sub       rsp, 8
           mov       qword [rsp], rax
           mov       rax, qword [rsp]
           mov       rbx, int.0
           call      Std.Prelude.Operators.__#664800900 wrt ..plt
           cmp       rax, 3
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           mov       rax, 1
           jmp       .cond_assign.merge#4
.cond_assign.if_none_matched#3:
           mov       rbx, int.1
           mov       rax, qword [rsp]
           call      Std.Prelude.Operators.__#72260286 wrt ..plt
           call      MutualRecursion.even
           jmp       .cond_assign.merge#4
.cond_assign.merge#4:
           add       rsp, 8
           ret       

MutualRecursion.sum_tree:
           sub       rsp, 8
           mov       qword [rsp], rax
           mov       r9, qword [rsp]
           cmp       r9, 1
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           mov       rax, int.0
           jmp       .cond_assign.merge#4
.cond_assign.if_none_matched#3:
           mov       r9, qword [rsp]
           mov       rax, qword [r9 + 16]
           call      MutualRecursion.sum_forest
           mov       r9, qword [rsp]
           mov       r9, qword [r9 + 8]
           mov       rbx, rax
           mov       rax, r9
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           jmp       .cond_assign.merge#4
.cond_assign.merge#4:
           add       rsp, 8
           ret       

MutualRecursion.sum_forest:
           sub       rsp, 8
           mov       r9, int.0
           mov       rbx, rax
           mov       rax, r9
           call      MutualRecursion.loop.1
           add       rsp, 8
           ret       

           section   .rodata
           sectalign 8
int.5:
           dw        32769
           dw        1
           dd        0
           dq        5
int.1:
           dw        32769
           dw        1
           dd        0
           dq        1
int.17:
           dw        32769
           dw        1
           dd        0
           dq        17
int.0:
           dw        32769
           dw        1
           dd        0
           dq        0

           section   .bss
           sectalign 8
MutualRecursion.number:
           resq      1
MutualRecursion.Leaf:
           resq      1
MutualRecursion.f:
           resq      1
MutualRecursion.#binding.1:
           resq      1

