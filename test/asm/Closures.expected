           default   rel
           global    umber_main#Closures
           global    Closures.#fun.1
           global    Closures.count_up
           global    Closures.#binding.1
           global    int.5:weak
           global    int.2:weak
           global    int.0:weak
           extern    Std.Prelude.print_int
           extern    Std.Prelude.Operators.__#100243373
           extern    Std.Prelude.Operators.__#1049114386
           extern    umber_gc_alloc

           section   .text

umber_main#Closures:
           sub       rsp, 8
           mov       rax, int.0
           mov       rbx, int.2
           mov       rdi, int.5
           call      Closures.count_up
           call      Std.Prelude.print_int wrt ..plt
           mov       r9, rax
           mov       qword [Closures.#binding.1], r9
           add       rsp, 8
           ret       

Closures.#fun.1:
           sub       rsp, 24
           mov       qword [rsp], rax
           mov       qword [rsp + 8], rbx
           mov       rax, qword [rsp + 8]
           mov       r9, qword [rsp]
           mov       rbx, qword [r9 + 24]
           call      Std.Prelude.Operators.__#100243373 wrt ..plt
           cmp       rax, 3
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           mov       r9, qword [rsp]
           mov       rbx, qword [r9 + 16]
           mov       rax, qword [rsp + 8]
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rsp]
           call      Closures.#fun.1
           jmp       .cond_assign.merge#4
.cond_assign.if_none_matched#3:
           mov       rax, qword [rsp + 8]
           jmp       .cond_assign.merge#4
.cond_assign.merge#4:
           add       rsp, 24
           ret       

Closures.count_up:
           sub       rsp, 8
           mov       r12, rax
           mov       r13, rdi
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       r9, rax
           mov       word [r9], 12289
           mov       word [r9 + 2], 3
           mov       qword [r9 + 8], Closures.#fun.1
           mov       qword [r9 + 16], rbx
           mov       qword [r9 + 24], r13
           mov       rax, r9
           mov       rbx, r12
           call      qword [r9 + 8]
           add       rsp, 8
           ret       

           section   .rodata
           sectalign 8
int.5:
           dw        32769
           dw        1
           dd        0
           dq        5
int.2:
           dw        32769
           dw        1
           dd        0
           dq        2
int.0:
           dw        32769
           dw        1
           dd        0
           dq        0

           section   .bss
           sectalign 8
Closures.#binding.1:
           resq      1

