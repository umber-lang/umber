           default   rel
           global    umber_main#RecursiveEffectDecl
           global    umber_resume_wrapper:weak
           global    RecursiveEffectDecl.go
           extern    umber_find_handler
           extern    umber_fiber_reparent
           extern    umber_gc_alloc

           section   .text

umber_main#RecursiveEffectDecl:
           push      rbp
           mov       rbp, rsp
           pop       rbp
           ret       

RecursiveEffectDecl.go:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           sub       rsp, 16
           mov       rdi, r14
           mov       rsi, 984085721
           mov       rdx, rsp
           call      umber_find_handler wrt ..plt
           mov       r13, rax
           mov       r9, qword [rsp]
           mov       qword [rbp - 16], r9
           add       rsp, 16
           mov       rdi, 32
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 32784
           mov       word [rax + 2], 3
           mov       qword [rax + 8], umber_resume_wrapper
           mov       qword [rax + 16], r14
           mov       qword [rax + 24], .perform_effect.resume_here#0
           mov       rbx, qword [rbp - 8]
           mov       qword [r14 + 8], rbp
           mov       qword [r14 + 16], rsp
           mov       r14, qword [rbp - 16]
           mov       rbp, qword [r14 + 8]
           mov       rsp, qword [r14 + 16]
           jmp       r13
.perform_effect.resume_here#0:
           add       rsp, 16
           pop       rbp
           ret       

umber_resume_wrapper:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 8], rax
           mov       r9, qword [rbp - 8]
           mov       rdi, qword [r9 + 16]
           mov       rsi, r14
           call      umber_fiber_reparent wrt ..plt
           push      .end#0
           mov       qword [r14 + 8], rbp
           mov       qword [r14 + 16], rsp
           mov       r9, qword [rbp - 8]
           mov       r14, qword [r9 + 16]
           mov       rbp, qword [r14 + 8]
           mov       rsp, qword [r14 + 16]
           mov       rax, rbx
           jmp       qword [r9 + 24]
.end#0:
           add       rsp, 16
           pop       rbp
           ret       

