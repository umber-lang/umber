           default   rel
           global    umber_main#AdventOfCode2024_1
           global    AdventOfCode2024_1.sum
           global    AdventOfCode2024_1.#fun.6
           global    AdventOfCode2024_1.#fun.3
           global    AdventOfCode2024_1.input
           global    AdventOfCode2024_1.#binding.3
           global    AdventOfCode2024_1.solve_part_2
           global    AdventOfCode2024_1.#fun.5
           global    AdventOfCode2024_1.#fun.4
           global    AdventOfCode2024_1.loop.1
           global    AdventOfCode2024_1.solve_part_1
           global    Std.Prelude.Operators..#closure:weak
           global    Std.Prelude.Operators..#closure_wrapper_fun:weak
           global    AdventOfCode2024_1.#fun.4#closure:weak
           global    AdventOfCode2024_1.#fun.4#closure_wrapper_fun:weak
           global    Std.Prelude.Operators.not#closure:weak
           global    Std.Prelude.Operators.not#closure_wrapper_fun:weak
           global    Std.Prelude.Operators.__#1049114386#closure:weak
           global    Std.Prelude.Operators.__#1049114386#closure_wrapper_fun:weak
           global    Std.Prelude.Int.of_string#closure:weak
           global    Std.Prelude.Int.of_string#closure_wrapper_fun:weak
           global    Std.Prelude.String.is_empty#closure:weak
           global    Std.Prelude.String.is_empty#closure_wrapper_fun:weak
           global    string.615481279:weak
           global    int.0:weak
           global    string.0:weak
           global    string.307328105:weak
           global    char.32:weak
           extern    Std.Prelude.List.unzip
           extern    Std.Prelude.List.Nil
           extern    Std.Prelude.Int.of_string
           extern    Std.Prelude.Operators.__#1049114386
           extern    Std.Prelude.List.map
           extern    Std.Prelude.read_line
           extern    Std.Prelude.Operators.__#72260286
           extern    Std.Prelude.List.sort
           extern    Std.Prelude.Operators.__#294461388
           extern    Std.Prelude.List.reverse
           extern    Std.Prelude.Operators.__#358075620
           extern    Std.Prelude.Operators.not
           extern    Std.Prelude.List.fold
           extern    umber_gc_alloc
           extern    Std.Prelude.print_string
           extern    Std.Prelude.print
           extern    Std.Prelude.List.filter
           extern    Std.Prelude.String.split
           extern    Std.Prelude.Operators.__#506761450
           extern    Std.Prelude.Operators.__#664800900
           extern    Std.Prelude.Operators..
           extern    Std.Prelude.Int.abs
           extern    Std.Prelude.List.count
           extern    Std.Prelude.String.is_empty
           extern    Std.Prelude.print_int
           extern    Std.Prelude.List.zip_shortest

           section   .text

umber_main#AdventOfCode2024_1:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 32
           mov       rax, qword [Std.Prelude.List.Nil]
           call      AdventOfCode2024_1.loop.1
           mov       qword [AdventOfCode2024_1.input], rax
           mov       rax, string.615481279
           call      Std.Prelude.print_string wrt ..plt
           mov       qword [rbp - 24], rax
           mov       rax, qword [AdventOfCode2024_1.input]
           call      AdventOfCode2024_1.solve_part_1
           call      Std.Prelude.print_int wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 24]
           call      Std.Prelude.Operators.__#506761450 wrt ..plt
           mov       qword [rbp - 32], rax
           mov       rax, string.307328105
           call      Std.Prelude.print_string wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 32]
           call      Std.Prelude.Operators.__#506761450 wrt ..plt
           mov       qword [rbp - 16], rax
           mov       rax, qword [AdventOfCode2024_1.input]
           call      AdventOfCode2024_1.solve_part_2
           call      Std.Prelude.print_int wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 16]
           call      Std.Prelude.Operators.__#506761450 wrt ..plt
           mov       qword [rbp - 8], rax
           mov       rax, string.0
           call      Std.Prelude.print wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 8]
           call      Std.Prelude.Operators.__#506761450 wrt ..plt
           mov       r9, rax
           mov       qword [AdventOfCode2024_1.#binding.3], r9
           add       rsp, 32
           pop       rbp
           ret       

AdventOfCode2024_1.sum:
           push      rbp
           mov       rbp, rsp
           mov       rbx, int.0
           mov       rdi, Std.Prelude.Operators.__#1049114386#closure
           call      Std.Prelude.List.fold wrt ..plt
           pop       rbp
           ret       

AdventOfCode2024_1.#fun.6:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       r12, rax
           mov       qword [rbp - 16], rbx
           mov       qword [rbp - 8], rdi
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 2
           mov       qword [rax + 8], AdventOfCode2024_1.#fun.5
           mov       r9, qword [rbp - 8]
           mov       qword [rax + 16], r9
           mov       r9, qword [r12 + 16]
           mov       rbx, rax
           mov       rax, r9
           call      Std.Prelude.List.count wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 8]
           call      Std.Prelude.Operators.__#294461388 wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 16]
           call      Std.Prelude.Operators.__#1049114386 wrt ..plt
           add       rsp, 16
           pop       rbp
           ret       

AdventOfCode2024_1.#fun.3:
           push      rbp
           mov       rbp, rsp
           mov       r10, qword [rax + 16]
           mov       r11, qword [rax + 16]
           mov       r9, qword [rax + 24]
           mov       rdi, qword [rax + 32]
           mov       rsi, rbx
           mov       rax, r11
           mov       rbx, r9
           call      qword [r10 + 8]
           pop       rbp
           ret       

AdventOfCode2024_1.solve_part_2:
           push      rbp
           mov       rbp, rsp
           call      Std.Prelude.List.unzip wrt ..plt
           mov       r13, rax
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 2
           mov       qword [rax + 8], AdventOfCode2024_1.#fun.6
           mov       r9, qword [r13 + 16]
           mov       qword [rax + 16], r9
           mov       r9, qword [r13 + 8]
           mov       rbx, int.0
           mov       rdi, rax
           mov       rax, r9
           call      Std.Prelude.List.fold wrt ..plt
           pop       rbp
           ret       

AdventOfCode2024_1.#fun.5:
           push      rbp
           mov       rbp, rsp
           mov       r9, rbx
           mov       rbx, qword [rax + 16]
           mov       rax, r9
           call      Std.Prelude.Operators.__#664800900 wrt ..plt
           pop       rbp
           ret       

AdventOfCode2024_1.#fun.4:
           push      rbp
           mov       rbp, rsp
           mov       r9, qword [rax + 8]
           mov       rbx, qword [rax + 16]
           mov       rax, r9
           call      Std.Prelude.Operators.__#72260286 wrt ..plt
           call      Std.Prelude.Int.abs wrt ..plt
           pop       rbp
           ret       

AdventOfCode2024_1.loop.1:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           mov       qword [rbp - 16], rax
           mov       rax, 1
           call      Std.Prelude.read_line wrt ..plt
           cmp       rax, 1
           jnz       .cond_assign.if_none_matched#3
.cond_assign.vars0#1:
           jmp       .cond_assign.body#2
.cond_assign.body#2:
           mov       rax, qword [rbp - 16]
           call      Std.Prelude.List.reverse wrt ..plt
           jmp       .cond_assign.merge#21
.cond_assign.if_none_matched#3:
           mov       rax, qword [rax + 8]
           mov       rbx, char.32
           call      Std.Prelude.String.split wrt ..plt
           mov       r12, rax
           mov       rdi, 40
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 12289
           mov       word [rax + 2], 4
           mov       qword [rax + 8], AdventOfCode2024_1.#fun.3
           mov       qword [rax + 16], Std.Prelude.Operators..#closure
           mov       qword [rax + 24], Std.Prelude.Operators.not#closure
           mov       qword [rax + 32], Std.Prelude.String.is_empty#closure
           mov       rbx, rax
           mov       rax, r12
           call      Std.Prelude.List.filter wrt ..plt
           mov       rbx, Std.Prelude.Int.of_string#closure
           call      Std.Prelude.List.map wrt ..plt
           mov       qword [rbp - 8], rax
           mov       r9, qword [rbp - 8]
           test      r9, 1
           jz        .non_constant_tag_equals.is_block#11
.codegen_and.mid#12:
           jmp       .non_constant_tag_equals.end#10
.non_constant_tag_equals.is_block#11:
           mov       r9, qword [rbp - 8]
           cmp       word [r9], 0
           jmp       .non_constant_tag_equals.end#10
.non_constant_tag_equals.end#10:
           jz        .and.cond2#9
.codegen_and.mid#13:
           jmp       .and.end#8
.and.cond2#9:
           mov       r9, qword [rbp - 8]
           test      qword [r9 + 16], 1
           jz        .non_constant_tag_equals.is_block#17
.codegen_and.mid#18:
           jmp       .non_constant_tag_equals.end#16
.non_constant_tag_equals.is_block#17:
           mov       r9, qword [rbp - 8]
           mov       r9, qword [r9 + 16]
           cmp       word [r9], 0
           jmp       .non_constant_tag_equals.end#16
.non_constant_tag_equals.end#16:
           jz        .and.cond2#15
.codegen_and.mid#19:
           jmp       .and.end#14
.and.cond2#15:
           mov       r9, qword [rbp - 8]
           mov       r9, qword [r9 + 16]
           cmp       qword [r9 + 16], 1
           jmp       .and.end#14
.and.end#14:
           jmp       .and.end#8
.and.end#8:
           jnz       .cond_assign.if_none_matched#7
.cond_assign.vars0#5:
           mov       r9, qword [rbp - 8]
           mov       r13, qword [r9 + 8]
           mov       r9, qword [rbp - 8]
           mov       r9, qword [r9 + 16]
           mov       r12, qword [r9 + 8]
           jmp       .cond_assign.body#6
.cond_assign.body#6:
           mov       rdi, 24
           call      umber_gc_alloc wrt ..plt
           mov       word [rax], 0
           mov       word [rax + 2], 2
           mov       qword [rax + 8], r13
           mov       qword [rax + 16], r12
           mov       rbx, qword [rbp - 16]
           call      Std.Prelude.Operators.__#358075620 wrt ..plt
           call      AdventOfCode2024_1.loop.1
           jmp       .cond_assign.merge#20
.cond_assign.if_none_matched#7:
           mov       rax, qword [Std.Prelude.List.Nil]
           jmp       .cond_assign.merge#20
.cond_assign.merge#20:
           jmp       .cond_assign.merge#21
.cond_assign.merge#21:
           add       rsp, 16
           pop       rbp
           ret       

AdventOfCode2024_1.solve_part_1:
           push      rbp
           mov       rbp, rsp
           sub       rsp, 16
           call      Std.Prelude.List.unzip wrt ..plt
           mov       qword [rbp - 16], rax
           mov       r9, qword [rbp - 16]
           mov       rax, qword [r9 + 8]
           call      Std.Prelude.List.sort wrt ..plt
           mov       qword [rbp - 8], rax
           mov       r9, qword [rbp - 16]
           mov       rax, qword [r9 + 16]
           call      Std.Prelude.List.sort wrt ..plt
           mov       rbx, rax
           mov       rax, qword [rbp - 8]
           call      Std.Prelude.List.zip_shortest wrt ..plt
           mov       rbx, AdventOfCode2024_1.#fun.4#closure
           call      Std.Prelude.List.map wrt ..plt
           call      AdventOfCode2024_1.sum
           add       rsp, 16
           pop       rbp
           ret       

Std.Prelude.Operators..#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           mov       rbx, rdi
           mov       rdi, rsi
           call      Std.Prelude.Operators..
           pop       rbp
           ret       

AdventOfCode2024_1.#fun.4#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           call      AdventOfCode2024_1.#fun.4
           pop       rbp
           ret       

Std.Prelude.Operators.not#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           call      Std.Prelude.Operators.not
           pop       rbp
           ret       

Std.Prelude.Operators.__#1049114386#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           mov       rbx, rdi
           call      Std.Prelude.Operators.__#1049114386
           pop       rbp
           ret       

Std.Prelude.Int.of_string#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           call      Std.Prelude.Int.of_string
           pop       rbp
           ret       

Std.Prelude.String.is_empty#closure_wrapper_fun:
           push      rbp
           mov       rbp, rsp
           mov       rax, rbx
           call      Std.Prelude.String.is_empty
           pop       rbp
           ret       

           section   .rodata
           sectalign 8
string.615481279:
           dw        32772
           dw        2
           dd        0
           db        `Part 1: \x0\x0\x0\x0\x0\x0\x0\x7`
int.0:
           dw        32769
           dw        1
           dd        0
           dq        0
string.0:
           dw        32772
           dw        1
           dd        0
           db        `\x0\x0\x0\x0\x0\x0\x0\x7`
string.307328105:
           dw        32772
           dw        2
           dd        0
           db        `\xaPart 2: \x0\x0\x0\x0\x0\x0\x6`
char.32:
           dw        32770
           dw        1
           dd        0
           dq        32
Std.Prelude.Operators..#closure:
           dw        12289
           dw        1
           dd        0
           dq        Std.Prelude.Operators..#closure_wrapper_fun
AdventOfCode2024_1.#fun.4#closure:
           dw        12289
           dw        1
           dd        0
           dq        AdventOfCode2024_1.#fun.4#closure_wrapper_fun
Std.Prelude.Operators.not#closure:
           dw        12289
           dw        1
           dd        0
           dq        Std.Prelude.Operators.not#closure_wrapper_fun
Std.Prelude.Operators.__#1049114386#closure:
           dw        12289
           dw        1
           dd        0
           dq        Std.Prelude.Operators.__#1049114386#closure_wrapper_fun
Std.Prelude.Int.of_string#closure:
           dw        12289
           dw        1
           dd        0
           dq        Std.Prelude.Int.of_string#closure_wrapper_fun
Std.Prelude.String.is_empty#closure:
           dw        12289
           dw        1
           dd        0
           dq        Std.Prelude.String.is_empty#closure_wrapper_fun

           section   .bss
           sectalign 8
AdventOfCode2024_1.input:
           resq      1
AdventOfCode2024_1.#binding.3:
           resq      1

