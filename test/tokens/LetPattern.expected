LET
(LOWER_NAME catch_all)
EQUALS
L_PAREN
(UPPER_NAME False)
COMMA
R_PAREN
LINE_SEP
TYPE
(UPPER_NAME Thing)
EQUALS
(UPPER_NAME Thing1)
(UPPER_NAME Int)
PIPE
(UPPER_NAME Thing2)
(UPPER_NAME Int)
LINE_SEP
LET
L_PAREN
(UPPER_NAME Thing1)
(LOWER_NAME one)
PIPE
(UPPER_NAME Thing2)
(LOWER_NAME one)
R_PAREN
EQUALS
(UPPER_NAME Thing1)
(INT 1)
LINE_SEP
LET
(LOWER_NAME make_thing)
EQUALS
MATCH
INDENT
PIPE
(INT 1)
ARROW
(UPPER_NAME Thing1)
(INT 1)
LINE_SEP
PIPE
(INT 2)
ARROW
(UPPER_NAME Thing2)
(INT 2)
LINE_SEP
PIPE
(LOWER_NAME n)
ARROW
(UPPER_NAME Thing1)
(LOWER_NAME n)
DEDENT
LET
L_PAREN
(UPPER_NAME Thing1)
(LOWER_NAME n)
PIPE
(UPPER_NAME Thing2)
(LOWER_NAME n)
R_PAREN
EQUALS
(LOWER_NAME make_thing)
(INT 7)
LINE_SEP
TYPE
(UPPER_NAME Triple)
(LOWER_NAME a)
(LOWER_NAME b)
(LOWER_NAME c)
EQUALS
(UPPER_NAME Triple)
(LOWER_NAME a)
(LOWER_NAME b)
(LOWER_NAME c)
LINE_SEP
LET
UNDERSCORE
EQUALS
(UPPER_NAME Triple)
(STRING s)
(INT 1)
(INT 2)
LINE_SEP
LET
UNDERSCORE
EQUALS
L_PAREN
(STRING s')
COMMA
(INT -1)
COMMA
(INT -2)
R_PAREN
LINE_SEP
LET
L_PAREN
L_PAREN
(UPPER_NAME Triple)
(LOWER_NAME x)
(INT 5)
(LOWER_NAME y)
R_PAREN
PIPE
L_PAREN
(UPPER_NAME Triple)
(LOWER_NAME x)
(LOWER_NAME y)
(INT 5)
R_PAREN
R_PAREN
EQUALS
(UPPER_NAME Triple)
(STRING "Weird stuff")
(INT 5)
(INT 7)
LINE_SEP
LET
L_PAREN
L_PAREN
(LOWER_NAME u)
COMMA
(INT -5)
COMMA
(LOWER_NAME v)
R_PAREN
PIPE
L_PAREN
(LOWER_NAME u)
COMMA
(LOWER_NAME v)
COMMA
(INT -20)
R_PAREN
R_PAREN
EQUALS
L_PAREN
(STRING "Weird tuples")
COMMA
(INT 0)
COMMA
(INT 1)
R_PAREN
LINE_SEP
LET
(LOWER_NAME a)
EQUALS
(UPPER_NAME ANewThing)
LINE_SEP
VAL
(LOWER_NAME a)
COLON_SPACED
(UPPER_NAME NewThing)
LINE_SEP
TYPE
(UPPER_NAME NewThing)
EQUALS
(UPPER_NAME ANewThing)
EOF
