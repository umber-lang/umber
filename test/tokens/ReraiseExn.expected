TYPE
(UPPER_NAME Result)
(LOWER_NAME a)
(LOWER_NAME e)
EQUALS
PIPE
(UPPER_NAME Ok)
(LOWER_NAME a)
PIPE
(UPPER_NAME Error)
(LOWER_NAME e)
TYPE
(UPPER_NAME Exn)
EQUALS
(UPPER_NAME String)
EFFECT
(UPPER_NAME Exn)
EQUALS
L_BRACE
VAL
(LOWER_NAME raise)
COLON_SPACED
(UPPER_NAME Exn)
ARROW
(UPPER_NAME Never)
R_BRACE
LET
UNDERSCORE
EQUALS
HANDLE
IF
(UPPER_NAME True)
THEN
(INT 1)
ELSE
(LOWER_NAME raise)
(STRING exn)
PIPE
LESS_THAN
(LOWER_NAME raise)
UNDERSCORE
GREATER_THAN
ARROW
(INT 2)
LET
(LOWER_NAME reraise)
(LOWER_NAME msg)
(LOWER_NAME f)
EQUALS
LET
(LOWER_NAME result)
EQUALS
HANDLE
(LOWER_NAME f)
L_PAREN
R_PAREN
PIPE
(LOWER_NAME value)
ARROW
(UPPER_NAME Ok)
(LOWER_NAME value)
PIPE
LESS_THAN
(LOWER_NAME raise)
(LOWER_NAME exn)
GREATER_THAN
ARROW
(UPPER_NAME Error)
(LOWER_NAME exn)
IN
MATCH
(LOWER_NAME result)
PIPE
(UPPER_NAME Ok)
(LOWER_NAME value)
ARROW
(LOWER_NAME value)
PIPE
(UPPER_NAME Error)
(LOWER_NAME exn)
ARROW
(LOWER_NAME raise)
L_PAREN
(LOWER_NAME msg)
(OPERATOR ++)
(STRING ": ")
(OPERATOR ++)
(LOWER_NAME exn)
R_PAREN
LET
UNDERSCORE
EQUALS
HANDLE
(LOWER_NAME reraise)
(STRING Reraised)
L_PAREN
BACKSLASH
L_PAREN
R_PAREN
ARROW
IF
(UPPER_NAME True)
THEN
(LOWER_NAME raise)
(STRING "My exception")
ELSE
(INT 42)
R_PAREN
PIPE
(LOWER_NAME value)
ARROW
(LOWER_NAME print_int)
(LOWER_NAME value)
PIPE
LESS_THAN
(LOWER_NAME raise)
(LOWER_NAME exn)
GREATER_THAN
ARROW
(LOWER_NAME print)
L_PAREN
(STRING "Unhandled exception: ")
(OPERATOR ++)
(LOWER_NAME exn)
R_PAREN
EOF
