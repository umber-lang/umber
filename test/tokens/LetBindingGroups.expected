LET
(LOWER_NAME a)
EQUALS
(INT 1)
AND
(LOWER_NAME fun)
(LOWER_NAME n)
EQUALS
(LOWER_NAME n)
(OPERATOR ^)
(INT 2)
(OPERATOR -)
(INT 2)
(OPERATOR +)
(LOWER_NAME n)
(OPERATOR +)
(LOWER_NAME n)
(OPERATOR *)
L_PAREN
(LOWER_NAME n)
(OPERATOR -)
(INT 8)
R_PAREN
(OPERATOR *)
(INT 5)
AND
(LOWER_NAME b)
EQUALS
(LOWER_NAME a)
(OPERATOR +)
(INT 6)
LET
UNDERSCORE
EQUALS
LET
L_PAREN
R_PAREN
EQUALS
L_PAREN
R_PAREN
AND
UNDERSCORE
EQUALS
(LOWER_NAME fun)
AND
(LOWER_NAME list)
EQUALS
(STRING a)
(OPERATOR ::)
(STRING list)
(OPERATOR ::)
(STRING of)
(OPERATOR ::)
(STRING words)
(OPERATOR ::)
(UPPER_NAME Nil)
IN
(INT 1)
(OPERATOR ==)
(INT 2)
(OPERATOR ||)
(INT 3)
(OPERATOR ==)
(INT 4)
LET
(LOWER_NAME bottom)
EQUALS
LET
(LOWER_NAME bottom_again)
UNDERSCORE
EQUALS
LET
(LOWER_NAME go_left)
(LOWER_NAME x)
EQUALS
(LOWER_NAME go_right)
(LOWER_NAME x)
AND
(LOWER_NAME go_right)
(LOWER_NAME x)
EQUALS
(LOWER_NAME go_left)
(LOWER_NAME x)
IN
(LOWER_NAME go_left)
(INT 17)
IN
(LOWER_NAME bottom_again)
LET
UNDERSCORE
EQUALS
LET
(LOWER_NAME foo)
EQUALS
(INT 5)
IN
LET_NONREC
(LOWER_NAME foo)
EQUALS
(LOWER_NAME foo)
(OPERATOR *)
(INT 2)
AND
(LOWER_NAME bar)
EQUALS
(LOWER_NAME foo)
(OPERATOR *)
(INT 3)
IN
(LOWER_NAME print_int)
(LOWER_NAME foo)
(OPERATOR ";")
(LOWER_NAME print)
(STRING "")
(OPERATOR ";")
(LOWER_NAME print_int)
(LOWER_NAME bar)
EOF
