MODULE
(UPPER_NAME Report)
EQUALS
L_BRACE
TYPE
(UPPER_NAME Report)
EQUALS
(UPPER_NAME List)
(UPPER_NAME Int)
TYPE
(UPPER_NAME Dir)
EQUALS
PIPE
(UPPER_NAME Increasing)
PIPE
(UPPER_NAME Decreasing)
LET
(LOWER_NAME is_safe)
(LOWER_NAME reports)
EQUALS
MATCH
(LOWER_NAME pairs)
(LOWER_NAME reports)
PIPE
(UPPER_NAME Nil)
ARROW
(UPPER_NAME True)
PIPE
(UPPER_NAME Cons)
L_PAREN
(LOWER_NAME a)
COMMA
(LOWER_NAME b)
R_PAREN
UNDERSCORE
AS
(LOWER_NAME report_pairs)
ARROW
LET
(LOWER_NAME check)
(LOWER_NAME dir)
EQUALS
(UPPER_NAME List)
PERIOD
(LOWER_NAME for_all)
(LOWER_NAME report_pairs)
L_PAREN
BACKSLASH
L_PAREN
(LOWER_NAME a)
COMMA
(LOWER_NAME b)
R_PAREN
ARROW
LET
(LOWER_NAME positive_diff)
EQUALS
MATCH
(LOWER_NAME dir)
PIPE
(UPPER_NAME Increasing)
ARROW
(LOWER_NAME b)
(OPERATOR -)
(LOWER_NAME a)
PIPE
(UPPER_NAME Decreasing)
ARROW
(LOWER_NAME a)
(OPERATOR -)
(LOWER_NAME b)
IN
(LOWER_NAME positive_diff)
(OPERATOR >=)
(INT 1)
(OPERATOR &&)
(LOWER_NAME positive_diff)
(OPERATOR <=)
(INT 3)
R_PAREN
IN
MATCH
(LOWER_NAME compare)
(LOWER_NAME a)
(LOWER_NAME b)
PIPE
(UPPER_NAME Ordering)
PERIOD
(UPPER_NAME Equal)
ARROW
(UPPER_NAME False)
PIPE
(UPPER_NAME Ordering)
PERIOD
(UPPER_NAME Less)
ARROW
(LOWER_NAME check)
(UPPER_NAME Increasing)
PIPE
(UPPER_NAME Ordering)
PERIOD
(UPPER_NAME Greater)
ARROW
(LOWER_NAME check)
(UPPER_NAME Decreasing)
LET
(LOWER_NAME pairs)
(LOWER_NAME xs)
EQUALS
MATCH
(LOWER_NAME xs)
PIPE
(UPPER_NAME Nil)
PIPE
(UPPER_NAME Cons)
UNDERSCORE
(UPPER_NAME Nil)
ARROW
L_BRACKET
R_BRACKET
PIPE
(UPPER_NAME Cons)
(LOWER_NAME a)
L_PAREN
(UPPER_NAME Cons)
(LOWER_NAME b)
UNDERSCORE
AS
(LOWER_NAME rest)
R_PAREN
ARROW
L_PAREN
(LOWER_NAME a)
COMMA
(LOWER_NAME b)
R_PAREN
(OPERATOR ::)
(LOWER_NAME pairs)
(LOWER_NAME rest)
LET
(LOWER_NAME parse)
(LOWER_NAME str)
EQUALS
(UPPER_NAME List)
PERIOD
(LOWER_NAME map)
L_PAREN
(UPPER_NAME String)
PERIOD
(LOWER_NAME split)
(LOWER_NAME str)
(CHAR " ")
R_PAREN
(UPPER_NAME Int)
PERIOD
(LOWER_NAME of_string)
R_BRACE
LET
L_PAREN
R_PAREN
EQUALS
LET
(LOWER_NAME loop)
(LOWER_NAME count)
EQUALS
MATCH
(LOWER_NAME read_line)
L_PAREN
R_PAREN
PIPE
(UPPER_NAME None)
ARROW
(LOWER_NAME count)
PIPE
(UPPER_NAME Some)
(LOWER_NAME line)
ARROW
IF
(UPPER_NAME Report)
PERIOD
(LOWER_NAME is_safe)
L_PAREN
(UPPER_NAME Report)
PERIOD
(LOWER_NAME parse)
(LOWER_NAME line)
R_PAREN
THEN
(LOWER_NAME loop)
L_PAREN
(LOWER_NAME count)
(OPERATOR +)
(INT 1)
R_PAREN
ELSE
(LOWER_NAME loop)
(LOWER_NAME count)
IN
LET
(LOWER_NAME count)
EQUALS
(LOWER_NAME loop)
(INT 0)
IN
(LOWER_NAME print_int)
(LOWER_NAME count)
(OPERATOR ";")
(LOWER_NAME print)
(STRING "")
EOF
