MODULE
(UPPER_NAME Report)
COLON_SPACED
L_BRACE
TYPE
(UPPER_NAME Report)
TYPE
(UPPER_NAME Tolerance)
EQUALS
PIPE
(UPPER_NAME MustBeAllSafe)
PIPE
(UPPER_NAME AllowOneUnsafe)
VAL
(LOWER_NAME parse)
COLON_SPACED
(UPPER_NAME String)
ARROW
(UPPER_NAME Report)
VAL
(LOWER_NAME is_safe)
COLON_SPACED
(UPPER_NAME Report)
COMMA
(UPPER_NAME Tolerance)
ARROW
(UPPER_NAME Bool)
R_BRACE
EQUALS
L_BRACE
TYPE
(UPPER_NAME Report)
EQUALS
(UPPER_NAME List)
(UPPER_NAME Int)
TYPE
(UPPER_NAME Dir)
EQUALS
PIPE
(UPPER_NAME Increasing)
PIPE
(UPPER_NAME Decreasing)
LET
(LOWER_NAME level_pair_is_safe)
L_PAREN
(LOWER_NAME a)
COMMA
(LOWER_NAME b)
R_PAREN
(LOWER_NAME dir)
EQUALS
LET
(LOWER_NAME positive_diff)
EQUALS
MATCH
(LOWER_NAME dir)
PIPE
(UPPER_NAME Increasing)
ARROW
(LOWER_NAME b)
(OPERATOR -)
(LOWER_NAME a)
PIPE
(UPPER_NAME Decreasing)
ARROW
(LOWER_NAME a)
(OPERATOR -)
(LOWER_NAME b)
IN
(LOWER_NAME positive_diff)
(OPERATOR >=)
(INT 1)
(OPERATOR &&)
(LOWER_NAME positive_diff)
(OPERATOR <=)
(INT 3)
LET
(LOWER_NAME is_safe)
EQUALS
LET
(LOWER_NAME check_loop)
(LOWER_NAME dir)
(LOWER_NAME tolerance)
(LOWER_NAME prev)
(LOWER_NAME a)
(LOWER_NAME b)
(LOWER_NAME rest)
EQUALS
IF
(LOWER_NAME level_pair_is_safe)
L_PAREN
(LOWER_NAME a)
COMMA
(LOWER_NAME b)
R_PAREN
(LOWER_NAME dir)
THEN
MATCH
(LOWER_NAME rest)
PIPE
(UPPER_NAME Nil)
ARROW
(UPPER_NAME True)
PIPE
(UPPER_NAME Cons)
(LOWER_NAME next)
(LOWER_NAME rest)
ARROW
(LOWER_NAME check_loop)
(LOWER_NAME dir)
(LOWER_NAME tolerance)
L_PAREN
(UPPER_NAME Some)
(LOWER_NAME a)
R_PAREN
(LOWER_NAME b)
(LOWER_NAME next)
(LOWER_NAME rest)
ELSE
MATCH
(LOWER_NAME tolerance)
PIPE
(UPPER_NAME MustBeAllSafe)
ARROW
(UPPER_NAME False)
PIPE
(UPPER_NAME AllowOneUnsafe)
ARROW
MATCH
(LOWER_NAME rest)
PIPE
(UPPER_NAME Nil)
ARROW
(UPPER_NAME True)
PIPE
(UPPER_NAME Cons)
(LOWER_NAME next)
(LOWER_NAME rest')
ARROW
(LOWER_NAME check_loop)
(LOWER_NAME dir)
(UPPER_NAME MustBeAllSafe)
(LOWER_NAME prev)
(LOWER_NAME a)
(LOWER_NAME next)
(LOWER_NAME rest')
(OPERATOR ||)
L_PAREN
MATCH
(LOWER_NAME prev)
PIPE
(UPPER_NAME Some)
(LOWER_NAME prev)
ARROW
(LOWER_NAME check_loop)
(LOWER_NAME dir)
(UPPER_NAME MustBeAllSafe)
(UPPER_NAME None)
(LOWER_NAME prev)
(LOWER_NAME b)
(LOWER_NAME rest)
PIPE
(UPPER_NAME None)
ARROW
(LOWER_NAME check_loop)
(LOWER_NAME dir)
(UPPER_NAME MustBeAllSafe)
(UPPER_NAME None)
(LOWER_NAME b)
(LOWER_NAME next)
(LOWER_NAME rest')
R_PAREN
IN
BACKSLASH
(LOWER_NAME reports)
(LOWER_NAME tolerance)
ARROW
MATCH
(LOWER_NAME reports)
PIPE
(UPPER_NAME Nil)
PIPE
(UPPER_NAME Cons)
UNDERSCORE
(UPPER_NAME Nil)
ARROW
(UPPER_NAME True)
PIPE
(UPPER_NAME Cons)
(LOWER_NAME a)
L_PAREN
(UPPER_NAME Cons)
(LOWER_NAME b)
(LOWER_NAME rest)
R_PAREN
ARROW
(LOWER_NAME check_loop)
(UPPER_NAME Increasing)
(LOWER_NAME tolerance)
(UPPER_NAME None)
(LOWER_NAME a)
(LOWER_NAME b)
(LOWER_NAME rest)
(OPERATOR ||)
(LOWER_NAME check_loop)
(UPPER_NAME Decreasing)
(LOWER_NAME tolerance)
(UPPER_NAME None)
(LOWER_NAME a)
(LOWER_NAME b)
(LOWER_NAME rest)
LET
(LOWER_NAME pairs)
(LOWER_NAME xs)
EQUALS
MATCH
(LOWER_NAME xs)
PIPE
(UPPER_NAME Nil)
PIPE
(UPPER_NAME Cons)
UNDERSCORE
(UPPER_NAME Nil)
ARROW
L_BRACKET
R_BRACKET
PIPE
(UPPER_NAME Cons)
(LOWER_NAME a)
L_PAREN
(UPPER_NAME Cons)
(LOWER_NAME b)
UNDERSCORE
AS
(LOWER_NAME rest)
R_PAREN
ARROW
L_PAREN
(LOWER_NAME a)
COMMA
(LOWER_NAME b)
R_PAREN
(OPERATOR ::)
(LOWER_NAME pairs)
(LOWER_NAME rest)
LET
(LOWER_NAME parse)
(LOWER_NAME str)
EQUALS
(UPPER_NAME List)
PERIOD
(LOWER_NAME map)
L_PAREN
(UPPER_NAME String)
PERIOD
(LOWER_NAME split)
(LOWER_NAME str)
(CHAR " ")
R_PAREN
(UPPER_NAME Int)
PERIOD
(LOWER_NAME of_string)
R_BRACE
LET
L_PAREN
R_PAREN
EQUALS
LET
(LOWER_NAME loop)
(LOWER_NAME count1)
(LOWER_NAME count2)
EQUALS
MATCH
(LOWER_NAME read_line)
L_PAREN
R_PAREN
PIPE
(UPPER_NAME None)
ARROW
L_PAREN
(LOWER_NAME count1)
COMMA
(LOWER_NAME count2)
R_PAREN
PIPE
(UPPER_NAME Some)
(LOWER_NAME line)
ARROW
LET
(LOWER_NAME report)
EQUALS
(UPPER_NAME Report)
PERIOD
(LOWER_NAME parse)
(LOWER_NAME line)
IN
LET_NONREC
(LOWER_NAME count1)
EQUALS
IF
(UPPER_NAME Report)
PERIOD
(LOWER_NAME is_safe)
(LOWER_NAME report)
(UPPER_NAME Report)
PERIOD
(UPPER_NAME MustBeAllSafe)
THEN
(LOWER_NAME count1)
(OPERATOR +)
(INT 1)
ELSE
(LOWER_NAME count1)
AND
(LOWER_NAME count2)
EQUALS
IF
(UPPER_NAME Report)
PERIOD
(LOWER_NAME is_safe)
(LOWER_NAME report)
(UPPER_NAME Report)
PERIOD
(UPPER_NAME AllowOneUnsafe)
THEN
(LOWER_NAME count2)
(OPERATOR +)
(INT 1)
ELSE
(LOWER_NAME count2)
IN
(LOWER_NAME loop)
(LOWER_NAME count1)
(LOWER_NAME count2)
IN
LET
L_PAREN
(LOWER_NAME count1)
COMMA
(LOWER_NAME count2)
R_PAREN
EQUALS
(LOWER_NAME loop)
(INT 0)
(INT 0)
IN
(LOWER_NAME print_string)
(STRING "Part 1: ")
(OPERATOR ";")
(LOWER_NAME print_int)
(LOWER_NAME count1)
(OPERATOR ";")
(LOWER_NAME print)
(STRING "")
(OPERATOR ";")
(LOWER_NAME print_string)
(STRING "Part 2: ")
(OPERATOR ";")
(LOWER_NAME print_int)
(LOWER_NAME count2)
(OPERATOR ";")
(LOWER_NAME print)
(STRING "")
EOF
