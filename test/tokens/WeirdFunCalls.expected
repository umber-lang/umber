LET
L_PAREN
R_PAREN
EQUALS
(LOWER_NAME print)
(STRING plain)
LET
(LOWER_NAME fun_call)
L_PAREN
R_PAREN
EQUALS
BACKSLASH
L_PAREN
R_PAREN
ARROW
(LOWER_NAME print)
(STRING "fun call")
LET
L_PAREN
R_PAREN
EQUALS
L_PAREN
(LOWER_NAME fun_call)
L_PAREN
R_PAREN
R_PAREN
L_PAREN
R_PAREN
LET
(LOWER_NAME print_twice)
(LOWER_NAME msg)
EQUALS
(LOWER_NAME print)
(LOWER_NAME msg)
(OPERATOR ";")
(LOWER_NAME print)
(LOWER_NAME msg)
LET
(LOWER_NAME if_)
EQUALS
L_PAREN
IF
(UPPER_NAME True)
THEN
(LOWER_NAME print_twice)
ELSE
(LOWER_NAME print)
R_PAREN
(STRING if)
LET
L_PAREN
R_PAREN
EQUALS
L_PAREN
LET
L_PAREN
R_PAREN
EQUALS
L_PAREN
R_PAREN
IN
(LOWER_NAME print)
R_PAREN
(STRING let)
EOF
