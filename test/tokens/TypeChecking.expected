IMPORT
(UPPER_NAME Std)
PERIOD
(UPPER_NAME Prelude)
PERIOD
L_PAREN
L_PAREN
(OPERATOR |>)
R_PAREN
AS
UNDERSCORE
COMMA
UNDERSCORE
R_PAREN
LET
L_PAREN
R_PAREN
EQUALS
L_PAREN
R_PAREN
LET
(LOWER_NAME id)
(LOWER_NAME x)
EQUALS
(LOWER_NAME x)
LET
(LOWER_NAME id_for_ints)
L_PAREN
(LOWER_NAME x)
COLON_SPACED
(UPPER_NAME Int)
R_PAREN
EQUALS
(LOWER_NAME x)
LET
(LOWER_NAME id_for_floats)
COLON_SPACED
(UPPER_NAME Float)
ARROW
(UPPER_NAME Float)
EQUALS
BACKSLASH
(LOWER_NAME x)
ARROW
(LOWER_NAME x)
LET
(LOWER_NAME id_for_chars)
COLON_SPACED
(UPPER_NAME Char)
ARROW
(UPPER_NAME Char)
EQUALS
(LOWER_NAME id)
LET
(LOWER_NAME id_for_bools)
(LOWER_NAME x)
EQUALS
(LOWER_NAME id)
(LOWER_NAME x)
COLON_SPACED
(UPPER_NAME Bool)
LET
L_PAREN
(LOWER_NAME id_alias)
COMMA
(LOWER_NAME five)
R_PAREN
EQUALS
L_PAREN
(LOWER_NAME id)
COMMA
(INT 5)
R_PAREN
LET
L_PAREN
(OPERATOR |>)
R_PAREN
(LOWER_NAME x)
(LOWER_NAME f)
EQUALS
(LOWER_NAME f)
(LOWER_NAME x)
LET
(LOWER_NAME if_)
(LOWER_NAME then_)
(LOWER_NAME else_)
EQUALS
MATCH
PIPE
(UPPER_NAME True)
ARROW
(LOWER_NAME then_)
L_PAREN
R_PAREN
PIPE
(UPPER_NAME False)
ARROW
(LOWER_NAME else_)
L_PAREN
R_PAREN
LET
(LOWER_NAME if')
(LOWER_NAME then_)
(LOWER_NAME else_)
(LOWER_NAME cond)
EQUALS
MATCH
(LOWER_NAME cond)
PIPE
(UPPER_NAME True)
ARROW
(LOWER_NAME then_)
L_PAREN
R_PAREN
PIPE
(UPPER_NAME False)
ARROW
(LOWER_NAME else_)
L_PAREN
R_PAREN
EOF
