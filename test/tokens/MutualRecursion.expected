VAL
(LOWER_NAME f)
COLON_SPACED
(UPPER_NAME Forest)
(LOWER_NAME a)
LET
(LOWER_NAME f)
EQUALS
(UPPER_NAME Nil)
LET
(LOWER_NAME sum_forest)
EQUALS
LET
(LOWER_NAME loop)
(LOWER_NAME acc)
(LOWER_NAME forest)
EQUALS
MATCH
(LOWER_NAME forest)
PIPE
(UPPER_NAME Nil)
ARROW
(LOWER_NAME acc)
PIPE
(UPPER_NAME Cons)
(LOWER_NAME tree)
(LOWER_NAME trees)
ARROW
(LOWER_NAME loop)
L_PAREN
(LOWER_NAME acc)
(OPERATOR +)
(LOWER_NAME sum_tree)
(LOWER_NAME tree)
R_PAREN
(LOWER_NAME trees)
IN
BACKSLASH
(LOWER_NAME forest)
ARROW
(LOWER_NAME loop)
(INT 0)
(LOWER_NAME forest)
LET
(LOWER_NAME sum_tree)
EQUALS
MATCH
PIPE
(UPPER_NAME Leaf)
ARROW
(INT 0)
PIPE
(UPPER_NAME Node)
(LOWER_NAME x)
(LOWER_NAME forest)
ARROW
(LOWER_NAME x)
(OPERATOR +)
(LOWER_NAME sum_forest)
(LOWER_NAME forest)
TYPE
(UPPER_NAME Forest)
(LOWER_NAME a)
EQUALS
(UPPER_NAME List)
L_PAREN
(UPPER_NAME Tree)
(LOWER_NAME a)
R_PAREN
TYPE
(UPPER_NAME Tree)
(LOWER_NAME a)
EQUALS
PIPE
(UPPER_NAME Leaf)
PIPE
(UPPER_NAME Node)
(LOWER_NAME a)
L_PAREN
(UPPER_NAME Forest)
(LOWER_NAME a)
R_PAREN
LET
L_PAREN
R_PAREN
EQUALS
LET
(LOWER_NAME tree)
EQUALS
(UPPER_NAME Node)
(INT 1)
L_PAREN
(UPPER_NAME Cons)
(UPPER_NAME Leaf)
L_PAREN
(UPPER_NAME Cons)
L_PAREN
(UPPER_NAME Node)
(INT 17)
(UPPER_NAME Nil)
R_PAREN
(UPPER_NAME Nil)
R_PAREN
R_PAREN
IN
(LOWER_NAME print_int)
L_PAREN
(LOWER_NAME sum_tree)
(LOWER_NAME tree)
R_PAREN
LET
(LOWER_NAME even)
(LOWER_NAME x)
EQUALS
IF
(LOWER_NAME x)
(OPERATOR ==)
(INT 0)
THEN
(UPPER_NAME True)
ELSE
(LOWER_NAME odd)
L_PAREN
(LOWER_NAME x)
(OPERATOR -)
(INT 1)
R_PAREN
LET
(LOWER_NAME odd)
(LOWER_NAME x)
EQUALS
IF
(LOWER_NAME x)
(OPERATOR ==)
(INT 0)
THEN
(UPPER_NAME False)
ELSE
(LOWER_NAME even)
L_PAREN
(LOWER_NAME x)
(OPERATOR -)
(INT 1)
R_PAREN
LET
(LOWER_NAME number)
EQUALS
LET
(LOWER_NAME number)
EQUALS
(INT 5)
IN
LET_NONREC
(LOWER_NAME number)
EQUALS
(LOWER_NAME number)
(OPERATOR +)
(LOWER_NAME number)
IN
(LOWER_NAME number)
EOF
