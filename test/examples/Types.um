# Type annotations
let n = 1 : Int

# Simple variant types and pattern matching
type Direction = | North | South | East | West

let north_is_north = match North | North -> True | _ -> False

let first_letter : Direction -> Char = match
  | North -> 'N'
  | South -> 'S'
  | East -> 'E'
  | West -> 'W'

# Tuples
let magnitude (x, y) = sqrt (x^2 + y^2)

# Record types
type Rectangle = { length : Int, width : Int }

let area rect = rect.length * rect.width
let double_length { length, width } = { length = length * 2, width }
let double_width rect = { rect with width = rect.width * 2 }
let double_dimensions = double_length . double_width

type Option a =
  | Some a
  | None

# TODO: labelled arguments
# TODO: Should be able to write a type annotation on a let binding for the function return
# type
let value opt default = match opt
  | Some x -> x
  | None -> default

# Type aliases
type MyInt = Int
type Pair x y = (x, y)

# TODO: Subtyping on variants/row polymorphism for record types