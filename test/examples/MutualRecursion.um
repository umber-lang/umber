# Mutual recursion within a module is allowed for both types and let-bindings

# Types can be used before being defined
let f : Forest a = Nil

let sum_forest =
  let loop acc forest = match forest
    # TODO: syntactic sugar for lists and other sequences
    | Nil -> acc
    | Cons tree trees -> loop (acc + sum_tree tree) trees
  in
  \forest -> loop 0 forest

let sum_tree = match
  | Leaf -> 0
  | Node x forest -> x + sum_forest forest

type Forest a = List (Tree a)
type Tree a =
  | Leaf
  | Node a (Forest a)

let () = 
  let tree = Node 1 (Cons Leaf (Cons (Node 17 Nil) Nil)) in
  print_int (sum_tree tree)

let even x = if x == 0 then True else odd (x - 1)
let odd x = if x == 0 then False else even (x - 1)

# Test non-recursive let statements as well
let number =
  let number = 5 in  # This shadows the outer `number`, which is fine
  let' number = number + number in
  number