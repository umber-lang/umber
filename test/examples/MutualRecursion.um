# Mutual recursion within a module is allowed for both types and let-bindings

# Types can be used before being defined
val f : Forest a
let f = Nil

# TODO: see if we can remove the explicit `forest` args again 
# NOTE: this is not allowed in OCaml with the error:
  > This kind of expression is not allowed as right-hand side of `let rec'
  It works if the `forest` argument to `sum_forest` is written explicitly.
  (`let rec` can only be followed by a function definition, a constructor, or the `lazy` keyword.)
let sum_forest =
  let loop acc = match
    # TODO: syntactic sugar for lists and other sequences
    | Nil -> acc
    | Cons tree trees -> loop (acc + sum_tree tree) trees
  loop 0

let sum_tree = match
  | Leaf -> 0
  | Node x forest -> x + sum_forest forest

type alias Forest a = List (Tree a)
type Tree a =
  | Leaf
  | Node a (Forest a)

let even x = if x == 0 then True else odd (x - 1)
let odd x = if x == 0 then False else even (x - 1)

# Test non-recursive let statements as well
let number =
  let number = 5  # This shadows the outer `number`, which is fine
  let' number = number + number
  number

# TODO: add tests for use between submodules
  e.g. imports to/from, usage between the parent and child
  ^ make the above module `Tree` and have mutual usage with the parent