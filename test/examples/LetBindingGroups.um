# Let bindings can be given as a group
let a = 1
and fun n = n ^ 2 - 2 + n + n * (n - 8) * 5
and b = a + 6

# This works in expressions as well
let _ =
	let () = ()
	and _ = fun
	and list = "a" :: "list" :: "of" :: "words" :: Nil
	in
	1 == 2 || 3 == 4 

# This allows for mutual recursion between local let bindings in expressions
let bottom =
	let bottom_again _ =
		let go_left x = go_right x
		and go_right x = go_left x in
		go_left 17
	in
	bottom_again

# Nonrecursive let binding groups don't see each other's bindings
let _ =
	let foo = 5 in
	let' foo = foo * 2
	and bar = foo * 3
	in
	print_int foo;
	print "";
	print_int bar