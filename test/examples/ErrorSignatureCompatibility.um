module : {
  val id : b -> b

  type Foo a b = | Bar a | Baz b
  type Tuple a b = (a, b)

  val plus_one : a -> a
  val plus_one' : Int -> Int
  val double : String -> String
  val double' : String -> String
}

val id : a -> a
let id x = x

type Foo b a = | Bar b | Baz a

type Tuple a a = (a, a)

let plus_one x = x + 1

module A : {
  type Int
  type Float = String

  val plus_one : Int -> Int
  val double : Float -> Float
  val double_int : Int -> Int
} = {
  type Int = Float  # NOTE: This is actually `String` due to the type above

  let plus_one x = x
  let double s = s ++ s
  let double_int = double
}

let plus_one' = A.plus_one
let double = A.double
let double' = A.double_int