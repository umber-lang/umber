module A = {
  type Foo = | Foo
}

module B = {
  type Foo = | Foo

  # TODO: Implement type-directed constructor disambiguation
  let of_a = match
    | A.Foo -> Foo
}

module Wrap = {
  type Wrap a = | Wrap a

  let my_id x =
    let' (Wrap x) = x in
    Wrap x
}