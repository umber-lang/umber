module A = {
  type Foo = | Foo
}

module B = {
  type Foo = | Foo

  # TODO: Implement type-directed constructor disambiguation
  let of_a = match
    | A.Foo -> Foo
}

module Wrap = {
  type Wrap a = | Wrap a

  let my_id x =
    # FIXME: This doesn't work if you use `x` instead of `y`, even though it should
    let' (Wrap y) = x in
    Wrap y
}