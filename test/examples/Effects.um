effect Read = {
  val ask : () -> Int
}

val read : () -> <Read> Int
let read = ask

let read_and_add () = ask () + ask ()

let run_both f g x = (f x, g x)

let foo () = run_both (\x -> x + read_and_add ()) print_int 5

# TODO: Add warning for unreachable handler branches
let _ =
  handle 5
  | <ask ()> -> 6

let _ =
  handle read_and_add ()
  | <ask ()> -> resume 1

let _value_branch =
  handle foo ()
  | (x, ()) -> x
  | <ask ()> -> resume 0

let _nested_handler =
  handle
    (handle ask ()
     | x -> x + 1
     | <ask ()> -> resume 5)
  | <ask ()> -> resume 7

let higher_order_handler f =
  handle f ()
  | <ask ()> -> ()

let _ =
  higher_order_handler (\() -> ignore (ask ()))

# FIXME: Move these to separate tests
# let reraise f =
#   let result =
#     handle f ()
#     | value -> Ok value
#     | <raise exn> -> Error exn
#   in
#   match result
#   | Ok value -> value
#   | Error exn -> raise exn

# val handle_state : a, (() -> <State a> b) -> (a, b)
# let handle_state init f =
#  (handle f ()
#  | x -> (\s -> (s, x))
#  | <get ()> -> (\s -> (resume s) s)
#  | <set s> -> (\_ -> (resume ()) s))
#  init