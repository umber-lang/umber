effect Read = {
  # TODO: Remove this hack by either rethinking the trait bound syntax or fixing the parser
  val ask : () => () -> Int
}

val read : () => () -> <Read> Int
let read = ask

let read_and_add () = ask () + ask ()

let run_both f g x = (f x, g x)

let foo () = run_both (\x -> x + read_and_add ()) print_int 5


# FIXME: Move these to separate tests
# let reraise f =
#   let result =
#     handle f ()
#     | value -> Ok value
#     | <raise exn> -> Error exn
#   in
#   match result
#   | Ok value -> value
#   | Error exn -> raise exn

# val handle_state : a, (() -> <State a> b) -> (a, b)
# let handle_state init f =
#  (handle f ()
#  | x -> (\s -> (s, x))
#  | <get ()> -> (\s -> (resume s) s)
#  | <set s> -> (\_ -> (resume ()) s))
#  init