import Std.Prelude.((|>) as _, _)

let () = ()
let id x = x
let id_for_ints (x : Int) = x

val id_for_floats : Float -> Float
let id_for_floats = \x -> x

let id_for_chars = id
val id_for_chars : Char -> Char

let id_for_bools x = id x : Bool

let (id_alias, five) = (id, 5)

# `a, (a -> b) -> b`
let (|>) x f = f x

# Now that we took out auto-currying, this no longer has a nice type. You probably just
# shouldn't write this kind of thing, and be forced to list out the arguments explicitly.
# `(() -> a), (() -> a) -> Bool -> a`
let if_ then_ else_ = match
  | True -> then_ ()
  | False -> else_ ()

# `(() -> a), (() -> a), Bool -> a`
let if' then_ else_ cond = match cond
  | True -> then_ ()
  | False -> else_ ()