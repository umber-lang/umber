import Std.Prelude.((|>) as _, _)

let () = ()
let id x = x
let id_for_ints (x : Int) = x

let id_for_floats : Float -> Float = \x -> x

let id_for_chars : Char -> Char = id

let id_for_bools x = id x : Bool

let (id_alias, five) = (id, 5)

let (|>) x f = f x

# Now that we took out auto-currying, this no longer has a nice type. You probably just
# shouldn't write this kind of thing, and be forced to list out the arguments explicitly.
let if_ then_ else_ = match
  | True -> then_ ()
  | False -> else_ ()

# `(() -> a), (() -> a), Bool -> a`
# TODO: Show get this type instead: `(() -> <e1> a), (() -> <e2> a), Bool -> <e1, e2> a`
let if' then_ else_ cond = match cond
  | True -> then_ ()
  | False -> else_ ()