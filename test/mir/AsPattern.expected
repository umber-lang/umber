((Value_def AsPattern.pair
  (Make_block (tag 0) (fields ((Primitive (Int 1)) (Primitive (Int 2))))))
 (Value_def AsPattern.one (Get_block_field 0 (Name AsPattern.pair)))
 (Value_def AsPattern.two (Get_block_field 1 (Name AsPattern.pair)))
 (Fun_decl ((name "Std.Prelude.Operators.;") (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.::) (arity 2)))
 (Fun_def
  ((fun_name AsPattern.iter_pairs) (args (AsPattern.f.1 AsPattern.lst.1))
   (body
    (Cond_assign
     (conds
      (((Constant_tag_equals (Name AsPattern.lst.1) 0) ())
       ((And (Non_constant_tag_equals (Name AsPattern.lst.1) 0)
         (Constant_tag_equals (Get_block_field 1 (Name AsPattern.lst.1)) 0))
        ())))
     (body (Make_block (tag 0)))
     (if_none_matched
      (Otherwise
       (Let AsPattern.rest.1
        (Get_block_field 1 (Get_block_field 1 (Name AsPattern.lst.1)))
        (Let AsPattern.b.1
         (Get_block_field 0 (Get_block_field 1 (Name AsPattern.lst.1)))
         (Let AsPattern.a.1 (Get_block_field 0 (Name AsPattern.lst.1))
          (Fun_call "Std.Prelude.Operators.;"
           ((Fun_call AsPattern.f.1
             ((Name AsPattern.a.1) (Name AsPattern.b.1)))
            (Fun_call AsPattern.iter_pairs
             ((Name AsPattern.f.1)
              (Fun_call Std.Prelude.Operators.::
               ((Name AsPattern.b.1) (Name AsPattern.rest.1))))))))))))))))
 (Fun_decl ((name Std.Prelude.print) (arity 1)))
 (Fun_decl ((name Std.Prelude.Operators.++) (arity 2)))
 (Fun_def
  ((fun_name AsPattern.*fun.1) (args (AsPattern.a.2 AsPattern.b.2))
   (body
    (Fun_call Std.Prelude.print
     ((Fun_call Std.Prelude.Operators.++
       ((Name AsPattern.a.2) (Name AsPattern.b.2))))))))
 (Fun_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Value_def AsPattern.*binding.1
  (Fun_call AsPattern.iter_pairs
   ((Name AsPattern.*fun.1)
    (Make_block (tag 0)
     (fields
      ((Primitive (String foo))
       (Make_block (tag 0)
        (fields
         ((Primitive (String bar))
          (Make_block (tag 0)
           (fields ((Primitive (String baz)) (Name Std.Prelude.List.Nil))))))))))))))
