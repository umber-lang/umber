((Fun_def
  ((fun_name TypeChecking.id) (args (TypeChecking.x))
   (body (Name TypeChecking.x))))
 (Fun_def
  ((fun_name TypeChecking.id_for_ints) (args (TypeChecking.x.1))
   (body (Name TypeChecking.x.1))))
 (Fun_def
  ((fun_name TypeChecking.id_for_floats) (args (TypeChecking.x.2))
   (body (Name TypeChecking.x.2))))
 (Value_def TypeChecking.id_for_chars (Name TypeChecking.id))
 (Fun_def
  ((fun_name TypeChecking.id_for_bools) (args (TypeChecking.x.3))
   (body (Fun_call TypeChecking.id ((Name TypeChecking.x.3))))))
 (Value_def *binding
  (Make_block (tag 0) (fields ((Name TypeChecking.id) (Primitive (Int 5))))))
 (Value_def TypeChecking.id_alias (Get_block_field 0 (Name *binding)))
 (Value_def TypeChecking.five (Get_block_field 1 (Name *binding)))
 (Fun_def
  ((fun_name TypeChecking.|>) (args (TypeChecking.x.4 TypeChecking.f))
   (body (Fun_call TypeChecking.f ((Name TypeChecking.x.4))))))
 (Fun_def
  ((fun_name *fun) (args (*closure_env TypeChecking.))
   (body
    (Let TypeChecking.then_.1 (Get_block_field 2 (Name *closure_env))
     (Let TypeChecking.else_.1 (Get_block_field 1 (Name *closure_env))
      (Cond_assign
       (conds (((Constant_tag_equals (Name TypeChecking.) 1) ())))
       (body (Fun_call TypeChecking.then_.1 ((Make_block (tag 0)))))
       (if_none_matched
        (Otherwise (Fun_call TypeChecking.else_.1 ((Make_block (tag 0))))))))))))
 (Fun_def
  ((fun_name TypeChecking.if_) (args (TypeChecking.then_ TypeChecking.else_))
   (body
    (Make_block (tag 12289)
     (fields
      ((Name *fun) (Name TypeChecking.else_) (Name TypeChecking.then_)))))))
 (Fun_def
  ((fun_name TypeChecking.if')
   (args (TypeChecking.then_.2 TypeChecking.else_.2 TypeChecking.cond))
   (body
    (Cond_assign
     (conds (((Constant_tag_equals (Name TypeChecking.cond) 1) ())))
     (body (Fun_call TypeChecking.then_.2 ((Make_block (tag 0)))))
     (if_none_matched
      (Otherwise (Fun_call TypeChecking.else_.2 ((Make_block (tag 0)))))))))))
