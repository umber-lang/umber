((Fun_decl ((name Std.Prelude.Operators.==) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.mod) (arity 2)))
 (Value_def Operators.true
  (Fun_call Std.Prelude.Operators.==
   ((Fun_call Std.Prelude.Operators.+
     ((Primitive (Int 2))
      (Fun_call Std.Prelude.Operators.mod
       ((Primitive (Int 11)) (Primitive (Int 3))))))
    (Primitive (Int 4)))))
 (Value_def Operators.four
  (Fun_call Std.Prelude.Operators.+
   ((Primitive (Int 2)) (Primitive (Int 2)))))
 (Value_def Operators.one
  (Fun_call Std.Prelude.Operators.mod
   ((Primitive (Int 5)) (Primitive (Int 2)))))
 (Fun_def
  ((fun_name Operators.*fun.3)
   (args (Operators.*closure_env.1 Operators.*arg1.1))
   (body
    (Let Operators.*arg0.2
     (Get_block_field 2 (Name Operators.*closure_env.1))
     (Let Operators.*fun.2
      (Get_block_field 1 (Name Operators.*closure_env.1))
      (Fun_call Operators.*fun.2
       ((Name Operators.*arg0.2) (Name Operators.*arg1.1))))))))
 (Value_def Operators.left_section.1
  (Let Operators.*fun.1 (Name Std.Prelude.Operators.+)
   (Let Operators.*arg0.1 (Primitive (Int 2))
    (Make_block (tag 12289)
     (fields
      ((Name Operators.*fun.3) (Name Operators.*fun.1)
       (Name Operators.*arg0.1)))))))
 (Fun_def
  ((fun_name Operators.left_section) (args (Operators.*arg0.3))
   (body (Fun_call Operators.left_section.1 ((Name Operators.*arg0.3))))))
 (Fun_decl ((name Std.Prelude.Operators.*) (arity 2)))
 (Fun_def
  ((fun_name Operators.*fun.4)
   (args (Operators.*closure_env.2 Operators.*arg0.4))
   (body
    (Let Operators.*arg1.3
     (Get_block_field 1 (Name Operators.*closure_env.2))
     (Fun_call Std.Prelude.Operators.*
      ((Name Operators.*arg0.4) (Name Operators.*arg1.3)))))))
 (Value_def Operators.right_section.1
  (Let Operators.*arg1.2 (Primitive (Int 5))
   (Make_block (tag 12289)
    (fields ((Name Operators.*fun.4) (Name Operators.*arg1.2))))))
 (Fun_def
  ((fun_name Operators.right_section) (args (Operators.*arg0.5))
   (body (Fun_call Operators.right_section.1 ((Name Operators.*arg0.5))))))
 (Fun_decl ((name Std.Prelude.Operators.::) (arity 2)))
 (Fun_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Value_def Operators.unicode_my_dudes
  (Fun_call "Operators.\195\151"
   ((Fun_call Std.Prelude.Operators.::
     ((Primitive (String damn))
      (Fun_call Std.Prelude.Operators.::
       ((Primitive (String ok)) (Name Std.Prelude.List.Nil)))))
    (Fun_call Std.Prelude.Operators.::
     ((Primitive (String cartesian))
      (Fun_call Std.Prelude.Operators.::
       ((Primitive (String product))
        (Fun_call Std.Prelude.Operators.::
         ((Primitive (String maybe?)) (Name Std.Prelude.List.Nil))))))))))
 (Fun_decl ((name Std.Prelude.List.concat_map) (arity 2)))
 (Fun_decl ((name Std.Prelude.List.map) (arity 2)))
 (Fun_def
  ((fun_name Operators.*fun.5)
   (args (Operators.*closure_env.3 Operators.y.1))
   (body
    (Let Operators.x.2 (Get_block_field 1 (Name Operators.*closure_env.3))
     (Make_block (tag 0)
      (fields ((Name Operators.x.2) (Name Operators.y.1))))))))
 (Fun_def
  ((fun_name Operators.*fun.6)
   (args (Operators.*closure_env.4 Operators.x.1))
   (body
    (Let Operators.ys.2 (Get_block_field 1 (Name Operators.*closure_env.4))
     (Fun_call Std.Prelude.List.map
      ((Name Operators.ys.2)
       (Make_block (tag 12289)
        (fields ((Name Operators.*fun.5) (Name Operators.x.1))))))))))
 (Fun_def
  ((fun_name "Operators.\195\151") (args (Operators.xs.1 Operators.ys.1))
   (body
    (Fun_call Std.Prelude.List.concat_map
     ((Name Operators.xs.1)
      (Make_block (tag 12289)
       (fields ((Name Operators.*fun.6) (Name Operators.ys.1)))))))))
 (Fun_decl ((name "Std.Prelude.Operators.;") (arity 2)))
 (Fun_decl ((name Std.Prelude.print) (arity 1)))
 (Fun_def
  ((fun_name Operators.*fun.7) (args (Operators.*lambda_arg.1))
   (body
    (Let Operators.x.3 (Get_block_field 0 (Name Operators.*lambda_arg.1))
     (Let Operators.y.2 (Get_block_field 1 (Name Operators.*lambda_arg.1))
      (Fun_call "Std.Prelude.Operators.;"
       ((Fun_call Std.Prelude.print ((Name Operators.x.3)))
        (Fun_call Std.Prelude.print ((Name Operators.y.2))))))))))
 (Value_def Operators._.1
  (Fun_call Std.Prelude.List.map
   ((Name Operators.unicode_my_dudes) (Name Operators.*fun.7))))
 (Fun_decl ((name Std.Prelude.Operators.++) (arity 2)))
 (Fun_decl ((name Std.Prelude.Bool.to_string) (arity 1)))
 (Value_def Operators.*binding.1
  (Fun_call Std.Prelude.print
   ((Fun_call Std.Prelude.Operators.++
     ((Primitive (String "true = "))
      (Fun_call Std.Prelude.Bool.to_string ((Name Operators.true))))))))
 (Fun_decl ((name Std.Prelude.Int.to_string) (arity 1)))
 (Value_def Operators.*binding.2
  (Fun_call Std.Prelude.print
   ((Fun_call Std.Prelude.Operators.++
     ((Primitive (String "four = "))
      (Fun_call Std.Prelude.Int.to_string ((Name Operators.four)))))))))
