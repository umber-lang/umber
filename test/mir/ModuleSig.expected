((Fun_def
  ((fun_name ModuleSig.Range.between)
   (args (ModuleSig.Range.lo.1 ModuleSig.Range.hi.1))
   (body
    (Make_block (tag 0)
     (fields ((Name ModuleSig.Range.lo.1) (Name ModuleSig.Range.hi.1)))))))
 (Value_def ModuleSig.my_range
  (Fun_call ModuleSig.Range.between
   ((Primitive (Int 1)) (Primitive (Int 10)))))
 (Fun_decl ((name Std.Prelude.Operators.&&) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.<=) (arity 2)))
 (Fun_def
  ((fun_name ModuleSig.Range.elem)
   (args (ModuleSig.Range.x.1 ModuleSig.Range.#lambda_arg.1))
   (body
    (Let ModuleSig.Range.lo.2
     (Get_block_field 0 (Name ModuleSig.Range.#lambda_arg.1))
     (Let ModuleSig.Range.hi.2
      (Get_block_field 1 (Name ModuleSig.Range.#lambda_arg.1))
      (Fun_call Std.Prelude.Operators.&&
       ((Fun_call Std.Prelude.Operators.<=
         ((Name ModuleSig.Range.lo.2) (Name ModuleSig.Range.x.1)))
        (Fun_call Std.Prelude.Operators.<=
         ((Name ModuleSig.Range.x.1) (Name ModuleSig.Range.hi.2))))))))))
 (Value_def ModuleSig.is_10_in_range
  (Fun_call ModuleSig.Range.elem
   ((Primitive (Int 10)) (Name ModuleSig.my_range))))
 (Fun_decl ((name "Std.Prelude.Operators.;") (arity 2)))
 (Fun_decl ((name Std.Prelude.print_bool) (arity 1)))
 (Fun_decl ((name Std.Prelude.print) (arity 1)))
 (Value_def ModuleSig.#binding.1
  (Fun_call "Std.Prelude.Operators.;"
   ((Fun_call Std.Prelude.print_bool ((Name ModuleSig.is_10_in_range)))
    (Fun_call Std.Prelude.print ((Primitive (String "")))))))
 (Fun_def
  ((fun_name ModuleSig.Range...=)
   (args (ModuleSig.Range.#arg0.1 ModuleSig.Range.#arg1.1))
   (body
    (Fun_call ModuleSig.Range.between
     ((Name ModuleSig.Range.#arg0.1) (Name ModuleSig.Range.#arg1.1)))))))
