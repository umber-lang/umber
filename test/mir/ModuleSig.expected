((Value_def ModuleSig.Range.between/0
  (Closure
   ((args ((ModuleSig.Range.lo/1 Block) (ModuleSig.Range.hi/2 Block)))
    (returns Block)
    (body
     (Make_block 0 ((Name ModuleSig.Range.lo/1) (Name ModuleSig.Range.hi/2)))))))
 (Value_def ModuleSig.Range.in/3
  (Closure
   ((args ((ModuleSig.Range.x/4 Block) (*lambda_arg/5 Block)))
    (returns Block)
    (body
     (Let ModuleSig.Range.lo/6 (Get_block_field 0 (Name *lambda_arg/5))
      (Let ModuleSig.Range.hi/7 (Get_block_field 1 (Name *lambda_arg/5))
       (Fun_call (Name Std.Prelude.Operators.&&/8)
        ((Fun_call (Name Std.Prelude.Operators.<=/9)
          ((Name ModuleSig.Range.lo/6) (Name ModuleSig.Range.x/4)))
         (Fun_call (Name Std.Prelude.Operators.<=/9)
          ((Name ModuleSig.Range.x/4) (Name ModuleSig.Range.hi/7)))))))))))
 (Value_def ModuleSig.my_range/10
  (Fun_call (Name ModuleSig.Range.between/0)
   ((Primitive (Int 1)) (Primitive (Int 10)))))
 (Value_def ModuleSig.is_10_in_range/11
  (Fun_call (Name ModuleSig.Range.in/3)
   ((Primitive (Int 10)) (Name ModuleSig.my_range/10)))))
