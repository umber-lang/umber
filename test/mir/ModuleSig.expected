((Fun_def
  ((fun_name ModuleSig.Range.between/0) (closed_over ())
   (args ((ModuleSig.Range.lo/1 Block) (ModuleSig.Range.hi/2 Block)))
   (returns Block)
   (body
    (Make_block 0 ((Name ModuleSig.Range.lo/1) (Name ModuleSig.Range.hi/2))))))
 (Fun_def
  ((fun_name ModuleSig.Range.in/3)
   (closed_over (Std.Prelude.Operators.&&/4 Std.Prelude.Operators.<=/5))
   (args ((ModuleSig.Range.x/6 Block) (*lambda_arg/7 Block))) (returns Block)
   (body
    (Let ModuleSig.Range.lo/8 (Get_block_field 0 (Name *lambda_arg/7))
     (Let ModuleSig.Range.hi/9 (Get_block_field 1 (Name *lambda_arg/7))
      (Fun_call (Name Std.Prelude.Operators.&&/4)
       ((Fun_call (Name Std.Prelude.Operators.<=/5)
         ((Name ModuleSig.Range.lo/8) (Name ModuleSig.Range.x/6)))
        (Fun_call (Name Std.Prelude.Operators.<=/5)
         ((Name ModuleSig.Range.x/6) (Name ModuleSig.Range.hi/9))))))))))
 (Value_def ModuleSig.my_range/10
  (Fun_call (Name ModuleSig.Range.between/0)
   ((Primitive (Int 1)) (Primitive (Int 10)))))
 (Value_def ModuleSig.is_10_in_range/11
  (Fun_call (Name ModuleSig.Range.in/3)
   ((Primitive (Int 10)) (Name ModuleSig.my_range/10)))))
