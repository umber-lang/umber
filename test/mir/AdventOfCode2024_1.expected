((Fun_decl ((name Std.Prelude.read_line) (arity 1)))
 (Fun_decl ((name Std.Prelude.List.reverse) (arity 1)))
 (Fun_decl ((name Std.Prelude.List.map) (arity 2)))
 (Fun_decl ((name Std.Prelude.List.filter) (arity 2)))
 (Fun_decl ((name Std.Prelude.String.split) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators..) (arity 3)))
 (Fun_decl ((name Std.Prelude.Operators.not) (arity 1)))
 (Fun_decl ((name Std.Prelude.String.is_empty) (arity 1)))
 (Fun_def
  ((fun_name AdventOfCode2024_1.#fun.3)
   (args (AdventOfCode2024_1.#closure_env.1 AdventOfCode2024_1.#arg2.1))
   (body
    (Let AdventOfCode2024_1.#arg1.2
     (Get_block_field 3 (Name AdventOfCode2024_1.#closure_env.1))
     (Let AdventOfCode2024_1.#arg0.2
      (Get_block_field 2 (Name AdventOfCode2024_1.#closure_env.1))
      (Let AdventOfCode2024_1.#fun.2
       (Get_block_field 1 (Name AdventOfCode2024_1.#closure_env.1))
       (Fun_call AdventOfCode2024_1.#fun.2
        ((Name AdventOfCode2024_1.#arg0.2) (Name AdventOfCode2024_1.#arg1.2)
         (Name AdventOfCode2024_1.#arg2.1)))))))))
 (Fun_decl ((name Std.Prelude.Int.of_string) (arity 1)))
 (Fun_decl ((name Std.Prelude.Operators.::) (arity 2)))
 (Fun_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Fun_def
  ((fun_name AdventOfCode2024_1.loop.1) (args (AdventOfCode2024_1.acc.1))
   (body
    (Let AdventOfCode2024_1.match.1
     (Fun_call Std.Prelude.read_line ((Make_block (tag 0))))
     (Cond_assign
      (conds
       (((Constant_tag_equals (Name AdventOfCode2024_1.match.1) 0) ())))
      (body
       (Fun_call Std.Prelude.List.reverse ((Name AdventOfCode2024_1.acc.1))))
      (if_none_matched
       (Otherwise
        (Let AdventOfCode2024_1.line.1
         (Get_block_field 0 (Name AdventOfCode2024_1.match.1))
         (Let AdventOfCode2024_1.nums.1
          (Fun_call Std.Prelude.List.map
           ((Fun_call Std.Prelude.List.filter
             ((Fun_call Std.Prelude.String.split
               ((Name AdventOfCode2024_1.line.1) (Primitive (Char " "))))
              (Let AdventOfCode2024_1.#fun.1 (Name Std.Prelude.Operators..)
               (Let AdventOfCode2024_1.#arg0.1
                (Name Std.Prelude.Operators.not)
                (Let AdventOfCode2024_1.#arg1.1
                 (Name Std.Prelude.String.is_empty)
                 (Make_block (tag 12289)
                  (fields
                   ((Name AdventOfCode2024_1.#fun.3)
                    (Name AdventOfCode2024_1.#fun.1)
                    (Name AdventOfCode2024_1.#arg0.1)
                    (Name AdventOfCode2024_1.#arg1.1)))))))))
            (Name Std.Prelude.Int.of_string)))
          (Cond_assign (vars (AdventOfCode2024_1.x.1 AdventOfCode2024_1.y.1))
           (conds
            (((And
               (Non_constant_tag_equals (Name AdventOfCode2024_1.nums.1) 0)
               (And
                (Non_constant_tag_equals
                 (Get_block_field 1 (Name AdventOfCode2024_1.nums.1)) 0)
                (Constant_tag_equals
                 (Get_block_field 1
                  (Get_block_field 1 (Name AdventOfCode2024_1.nums.1)))
                 0)))
              ((Get_block_field 0 (Name AdventOfCode2024_1.nums.1))
               (Get_block_field 0
                (Get_block_field 1 (Name AdventOfCode2024_1.nums.1)))))))
           (body
            (Fun_call AdventOfCode2024_1.loop.1
             ((Fun_call Std.Prelude.Operators.::
               ((Make_block (tag 0)
                 (fields
                  ((Name AdventOfCode2024_1.x.1)
                   (Name AdventOfCode2024_1.y.1))))
                (Name AdventOfCode2024_1.acc.1))))))
           (if_none_matched (Otherwise (Name Std.Prelude.List.Nil)))))))))))))
 (Value_def AdventOfCode2024_1.input
  (Fun_call AdventOfCode2024_1.loop.1 ((Name Std.Prelude.List.Nil))))
 (Fun_decl ((name Std.Prelude.List.fold) (arity 3)))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_def
  ((fun_name AdventOfCode2024_1.sum) (args (AdventOfCode2024_1.xs.1))
   (body
    (Fun_call Std.Prelude.List.fold
     ((Name AdventOfCode2024_1.xs.1) (Primitive (Int 0))
      (Name Std.Prelude.Operators.+))))))
 (Fun_decl ((name Std.Prelude.List.unzip) (arity 1)))
 (Fun_decl ((name Std.Prelude.List.sort) (arity 1)))
 (Fun_decl ((name Std.Prelude.List.zip_shortest) (arity 2)))
 (Fun_decl ((name Std.Prelude.Int.abs) (arity 1)))
 (Fun_decl ((name Std.Prelude.Operators.-) (arity 2)))
 (Fun_def
  ((fun_name AdventOfCode2024_1.#fun.4)
   (args (AdventOfCode2024_1.#lambda_arg.1))
   (body
    (Let AdventOfCode2024_1.x.2
     (Get_block_field 0 (Name AdventOfCode2024_1.#lambda_arg.1))
     (Let AdventOfCode2024_1.y.2
      (Get_block_field 1 (Name AdventOfCode2024_1.#lambda_arg.1))
      (Fun_call Std.Prelude.Int.abs
       ((Fun_call Std.Prelude.Operators.-
         ((Name AdventOfCode2024_1.x.2) (Name AdventOfCode2024_1.y.2))))))))))
 (Fun_def
  ((fun_name AdventOfCode2024_1.solve_part_1)
   (args (AdventOfCode2024_1.input.1))
   (body
    (Let AdventOfCode2024_1.#binding.1
     (Fun_call Std.Prelude.List.unzip ((Name AdventOfCode2024_1.input.1)))
     (Let AdventOfCode2024_1.nums1.1
      (Get_block_field 0 (Name AdventOfCode2024_1.#binding.1))
      (Let AdventOfCode2024_1.nums2.1
       (Get_block_field 1 (Name AdventOfCode2024_1.#binding.1))
       (Let AdventOfCode2024_1.nums1.2
        (Fun_call Std.Prelude.List.sort ((Name AdventOfCode2024_1.nums1.1)))
        (Let AdventOfCode2024_1.nums2.2
         (Fun_call Std.Prelude.List.sort ((Name AdventOfCode2024_1.nums2.1)))
         (Let AdventOfCode2024_1.distances.1
          (Fun_call Std.Prelude.List.map
           ((Fun_call Std.Prelude.List.zip_shortest
             ((Name AdventOfCode2024_1.nums1.2)
              (Name AdventOfCode2024_1.nums2.2)))
            (Name AdventOfCode2024_1.#fun.4)))
          (Fun_call AdventOfCode2024_1.sum
           ((Name AdventOfCode2024_1.distances.1))))))))))))
 (Fun_decl ((name Std.Prelude.Operators.*) (arity 2)))
 (Fun_decl ((name Std.Prelude.List.count) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.==) (arity 2)))
 (Fun_def
  ((fun_name AdventOfCode2024_1.#fun.5)
   (args (AdventOfCode2024_1.#closure_env.2 AdventOfCode2024_1.#arg0.3))
   (body
    (Let AdventOfCode2024_1.#arg1.4
     (Get_block_field 1 (Name AdventOfCode2024_1.#closure_env.2))
     (Fun_call Std.Prelude.Operators.==
      ((Name AdventOfCode2024_1.#arg0.3) (Name AdventOfCode2024_1.#arg1.4)))))))
 (Fun_def
  ((fun_name AdventOfCode2024_1.#fun.6)
   (args
    (AdventOfCode2024_1.#closure_env.3 AdventOfCode2024_1.acc.2
     AdventOfCode2024_1.x.3))
   (body
    (Let AdventOfCode2024_1.right_nums.2
     (Get_block_field 1 (Name AdventOfCode2024_1.#closure_env.3))
     (Fun_call Std.Prelude.Operators.+
      ((Name AdventOfCode2024_1.acc.2)
       (Fun_call Std.Prelude.Operators.*
        ((Name AdventOfCode2024_1.x.3)
         (Fun_call Std.Prelude.List.count
          ((Name AdventOfCode2024_1.right_nums.2)
           (Let AdventOfCode2024_1.#arg1.3 (Name AdventOfCode2024_1.x.3)
            (Make_block (tag 12289)
             (fields
              ((Name AdventOfCode2024_1.#fun.5)
               (Name AdventOfCode2024_1.#arg1.3)))))))))))))))
 (Fun_def
  ((fun_name AdventOfCode2024_1.solve_part_2)
   (args (AdventOfCode2024_1.input.2))
   (body
    (Let AdventOfCode2024_1.#binding.2
     (Fun_call Std.Prelude.List.unzip ((Name AdventOfCode2024_1.input.2)))
     (Let AdventOfCode2024_1.left_nums.1
      (Get_block_field 0 (Name AdventOfCode2024_1.#binding.2))
      (Let AdventOfCode2024_1.right_nums.1
       (Get_block_field 1 (Name AdventOfCode2024_1.#binding.2))
       (Fun_call Std.Prelude.List.fold
        ((Name AdventOfCode2024_1.left_nums.1) (Primitive (Int 0))
         (Make_block (tag 12289)
          (fields
           ((Name AdventOfCode2024_1.#fun.6)
            (Name AdventOfCode2024_1.right_nums.1))))))))))))
 (Fun_decl ((name "Std.Prelude.Operators.;") (arity 2)))
 (Fun_decl ((name Std.Prelude.print_string) (arity 1)))
 (Fun_decl ((name Std.Prelude.print_int) (arity 1)))
 (Fun_decl ((name Std.Prelude.print) (arity 1)))
 (Value_def AdventOfCode2024_1.#binding.3
  (Fun_call "Std.Prelude.Operators.;"
   ((Fun_call "Std.Prelude.Operators.;"
     ((Fun_call "Std.Prelude.Operators.;"
       ((Fun_call "Std.Prelude.Operators.;"
         ((Fun_call Std.Prelude.print_string
           ((Primitive (String "Part 1: "))))
          (Fun_call Std.Prelude.print_int
           ((Fun_call AdventOfCode2024_1.solve_part_1
             ((Name AdventOfCode2024_1.input)))))))
        (Fun_call Std.Prelude.print_string
         ((Primitive (String  "\
                             \nPart 2: "))))))
      (Fun_call Std.Prelude.print_int
       ((Fun_call AdventOfCode2024_1.solve_part_2
         ((Name AdventOfCode2024_1.input)))))))
    (Fun_call Std.Prelude.print ((Primitive (String ""))))))))
