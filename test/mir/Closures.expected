((Fun_decl ((name Std.Prelude.Operators.<) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_def
  ((fun_name Closures.*fun) (args (Closures.*closure_env Closures.current))
   (body
    (Let Closures.end_after.1
     (Get_block_field 2 (Name Closures.*closure_env))
     (Let Closures.count_by.1
      (Get_block_field 1 (Name Closures.*closure_env))
      (Let Closures.match
       (Fun_call Std.Prelude.Operators.<
        ((Name Closures.current) (Name Closures.end_after.1)))
       (Cond_assign
        (conds (((Constant_tag_equals (Name Closures.match) 1) ())))
        (body
         (Fun_call Closures.*fun
          ((Name Closures.*closure_env)
           (Fun_call Std.Prelude.Operators.+
            ((Name Closures.current) (Name Closures.count_by.1))))))
        (if_none_matched (Otherwise (Name Closures.current))))))))))
 (Fun_def
  ((fun_name Closures.count_up)
   (args (Closures.start_at Closures.count_by Closures.end_after))
   (body
    (Let Closures.loop
     (Make_block (tag 12289)
      (fields
       ((Name Closures.*fun) (Name Closures.count_by)
        (Name Closures.end_after))))
     (Fun_call Closures.loop ((Name Closures.start_at))))))))
