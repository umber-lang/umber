((Fun_decl ((name Std.Prelude.Operators.<) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_def
  ((fun_name Closures.*fun.1)
   (args (Closures.*closure_env.1 Closures.current.1))
   (body
    (Let Closures.end_after.2
     (Get_block_field 2 (Name Closures.*closure_env.1))
     (Let Closures.count_by.2
      (Get_block_field 1 (Name Closures.*closure_env.1))
      (Let Closures.match.1
       (Fun_call Std.Prelude.Operators.<
        ((Name Closures.current.1) (Name Closures.end_after.2)))
       (Cond_assign
        (conds (((Constant_tag_equals (Name Closures.match.1) 1) ())))
        (body
         (Fun_call Closures.*fun.1
          ((Name Closures.*closure_env.1)
           (Fun_call Std.Prelude.Operators.+
            ((Name Closures.current.1) (Name Closures.count_by.2))))))
        (if_none_matched (Otherwise (Name Closures.current.1))))))))))
 (Fun_def
  ((fun_name Closures.count_up)
   (args (Closures.start_at.1 Closures.count_by.1 Closures.end_after.1))
   (body
    (Let Closures.loop.1
     (Make_block (tag 12289)
      (fields
       ((Name Closures.*fun.1) (Name Closures.count_by.1)
        (Name Closures.end_after.1))))
     (Fun_call Closures.loop.1 ((Name Closures.start_at.1)))))))
 (Fun_decl ((name Std.Prelude.print_int) (arity 1)))
 (Value_def Closures.*binding.1
  (Fun_call Std.Prelude.print_int
   ((Fun_call Closures.count_up
     ((Primitive (Int 0)) (Primitive (Int 2)) (Primitive (Int 5))))))))
