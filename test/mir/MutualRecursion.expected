((Fun_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Value_def MutualRecursion.f (Name Std.Prelude.List.Nil))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_def
  ((fun_name MutualRecursion.loop)
   (args (MutualRecursion.acc MutualRecursion.forest))
   (body
    (Cond_assign
     (conds (((Constant_tag_equals (Name MutualRecursion.forest) 0) ())))
     (body (Name MutualRecursion.acc))
     (if_none_matched
      (Otherwise
       (Let MutualRecursion.trees
        (Get_block_field 1 (Name MutualRecursion.forest))
        (Let MutualRecursion.tree
         (Get_block_field 0 (Name MutualRecursion.forest))
         (Fun_call MutualRecursion.loop
          ((Fun_call Std.Prelude.Operators.+
            ((Name MutualRecursion.acc)
             (Fun_call MutualRecursion.sum_tree
              ((Name MutualRecursion.tree)))))
           (Name MutualRecursion.trees)))))))))))
 (Fun_def
  ((fun_name MutualRecursion.sum_forest) (args (MutualRecursion.forest.1))
   (body
    (Fun_call MutualRecursion.loop
     ((Primitive (Int 0)) (Name MutualRecursion.forest.1))))))
 (Fun_def
  ((fun_name MutualRecursion.sum_tree) (args (MutualRecursion.))
   (body
    (Cond_assign
     (conds (((Constant_tag_equals (Name MutualRecursion.) 0) ())))
     (body (Primitive (Int 0)))
     (if_none_matched
      (Otherwise
       (Let MutualRecursion.forest.2
        (Get_block_field 1 (Name MutualRecursion.))
        (Let MutualRecursion.x (Get_block_field 0 (Name MutualRecursion.))
         (Fun_call Std.Prelude.Operators.+
          ((Name MutualRecursion.x)
           (Fun_call MutualRecursion.sum_forest
            ((Name MutualRecursion.forest.2)))))))))))))
 (Value_def MutualRecursion.Leaf (Make_block (tag 0)))
 (Fun_def
  ((fun_name MutualRecursion.Node)
   (args (MutualRecursion.arg0 MutualRecursion.arg1))
   (body
    (Make_block (tag 0)
     (fields ((Name MutualRecursion.arg0) (Name MutualRecursion.arg1)))))))
 (Fun_decl ((name Std.Prelude.print_int) (arity 1)))
 (Value_def MutualRecursion.*binding
  (Let MutualRecursion.tree.1
   (Make_block (tag 0)
    (fields
     ((Primitive (Int 1))
      (Make_block (tag 0)
       (fields
        ((Name MutualRecursion.Leaf)
         (Make_block (tag 0)
          (fields
           ((Make_block (tag 0)
             (fields ((Primitive (Int 17)) (Name Std.Prelude.List.Nil))))
            (Name Std.Prelude.List.Nil))))))))))
   (Fun_call Std.Prelude.print_int
    ((Fun_call MutualRecursion.sum_tree ((Name MutualRecursion.tree.1)))))))
 (Fun_decl ((name Std.Prelude.Operators.==) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.-) (arity 2)))
 (Fun_def
  ((fun_name MutualRecursion.even) (args (MutualRecursion.x.1))
   (body
    (Let MutualRecursion.match
     (Fun_call Std.Prelude.Operators.==
      ((Name MutualRecursion.x.1) (Primitive (Int 0))))
     (Cond_assign
      (conds (((Constant_tag_equals (Name MutualRecursion.match) 1) ())))
      (body (Make_block (tag 1)))
      (if_none_matched
       (Otherwise
        (Fun_call MutualRecursion.odd
         ((Fun_call Std.Prelude.Operators.-
           ((Name MutualRecursion.x.1) (Primitive (Int 1)))))))))))))
 (Fun_def
  ((fun_name MutualRecursion.odd) (args (MutualRecursion.x.2))
   (body
    (Let MutualRecursion.match.1
     (Fun_call Std.Prelude.Operators.==
      ((Name MutualRecursion.x.2) (Primitive (Int 0))))
     (Cond_assign
      (conds (((Constant_tag_equals (Name MutualRecursion.match.1) 1) ())))
      (body (Make_block (tag 0)))
      (if_none_matched
       (Otherwise
        (Fun_call MutualRecursion.even
         ((Fun_call Std.Prelude.Operators.-
           ((Name MutualRecursion.x.2) (Primitive (Int 1)))))))))))))
 (Value_def MutualRecursion.number
  (Let MutualRecursion.number.1 (Primitive (Int 5))
   (Let MutualRecursion.number.2
    (Fun_call Std.Prelude.Operators.+
     ((Name MutualRecursion.number.1) (Name MutualRecursion.number.1)))
    (Name MutualRecursion.number.2)))))
