((Fun_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Value_def MutualRecursion.f (Name Std.Prelude.List.Nil))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_def
  ((fun_name MutualRecursion.loop)
   (args (MutualRecursion.acc MutualRecursion.forest))
   (body
    (Cond_assign
     (conds (((Constant_tag_equals (Name MutualRecursion.forest) 0) ())))
     (body (Name MutualRecursion.acc))
     (if_none_matched
      (Otherwise
       (Let MutualRecursion.trees
        (Get_block_field 1 (Name MutualRecursion.forest))
        (Let MutualRecursion.tree
         (Get_block_field 0 (Name MutualRecursion.forest))
         (Fun_call MutualRecursion.loop
          ((Fun_call Std.Prelude.Operators.+
            ((Name MutualRecursion.acc)
             (Fun_call MutualRecursion.sum_tree
              ((Name MutualRecursion.tree)))))
           (Name MutualRecursion.trees)))))))))))
 (Fun_def
  ((fun_name *fun) (args (*closure_env MutualRecursion.forest.1))
   (body
    (Let MutualRecursion.loop.1 (Get_block_field 1 (Name *closure_env))
     (Fun_call MutualRecursion.loop.1
      ((Primitive (Int 0)) (Name MutualRecursion.forest.1)))))))
 (Value_def MutualRecursion.sum_forest.1
  (Make_block (tag 12289) (fields ((Name *fun) (Name MutualRecursion.loop)))))
 (Fun_def
  ((fun_name MutualRecursion.sum_forest) (args (arg0))
   (body (Fun_call MutualRecursion.sum_forest.1 ((Name arg0))))))
 (Fun_def
  ((fun_name MutualRecursion.sum_tree) (args (MutualRecursion.))
   (body
    (Cond_assign
     (conds (((Constant_tag_equals (Name MutualRecursion.) 0) ())))
     (body (Primitive (Int 0)))
     (if_none_matched
      (Otherwise
       (Let MutualRecursion.forest.2
        (Get_block_field 1 (Name MutualRecursion.))
        (Let MutualRecursion.x (Get_block_field 0 (Name MutualRecursion.))
         (Fun_call Std.Prelude.Operators.+
          ((Name MutualRecursion.x)
           (Fun_call MutualRecursion.sum_forest
            ((Name MutualRecursion.forest.2)))))))))))))
 (Value_def MutualRecursion.Nil (Make_block (tag 0)))
 (Fun_def
  ((fun_name MutualRecursion.Cons) (args (arg0.1 arg1))
   (body (Make_block (tag 0) (fields ((Name arg0.1) (Name arg1)))))))
 (Value_def MutualRecursion.Leaf (Make_block (tag 0)))
 (Fun_def
  ((fun_name MutualRecursion.Node) (args (arg0.2 arg1.1))
   (body (Make_block (tag 0) (fields ((Name arg0.2) (Name arg1.1)))))))
 (Fun_decl ((name Std.Prelude.print_int) (arity 1)))
 (Value_def *binding
  (Let MutualRecursion.tree.1
   (Make_block (tag 0)
    (fields
     ((Primitive (Int 1))
      (Make_block (tag 0)
       (fields
        ((Name MutualRecursion.Leaf)
         (Make_block (tag 0)
          (fields
           ((Make_block (tag 0)
             (fields ((Primitive (Int 17)) (Name Std.Prelude.List.Nil))))
            (Name Std.Prelude.List.Nil))))))))))
   (Fun_call Std.Prelude.print_int
    ((Fun_call MutualRecursion.sum_tree ((Name MutualRecursion.tree.1)))))))
 (Fun_decl ((name Std.Prelude.Operators.==) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.-) (arity 2)))
 (Fun_def
  ((fun_name MutualRecursion.even) (args (MutualRecursion.x.1))
   (body
    (Let match
     (Fun_call Std.Prelude.Operators.==
      ((Name MutualRecursion.x.1) (Primitive (Int 0))))
     (Cond_assign (conds (((Constant_tag_equals (Name match) 1) ())))
      (body (Make_block (tag 1)))
      (if_none_matched
       (Otherwise
        (Fun_call MutualRecursion.odd
         ((Fun_call Std.Prelude.Operators.-
           ((Name MutualRecursion.x.1) (Primitive (Int 1)))))))))))))
 (Fun_def
  ((fun_name MutualRecursion.odd) (args (MutualRecursion.x.2))
   (body
    (Let match.1
     (Fun_call Std.Prelude.Operators.==
      ((Name MutualRecursion.x.2) (Primitive (Int 0))))
     (Cond_assign (conds (((Constant_tag_equals (Name match.1) 1) ())))
      (body (Make_block (tag 0)))
      (if_none_matched
       (Otherwise
        (Fun_call MutualRecursion.even
         ((Fun_call Std.Prelude.Operators.-
           ((Name MutualRecursion.x.2) (Primitive (Int 1)))))))))))))
 (Value_def MutualRecursion.number
  (Let MutualRecursion.number.1 (Primitive (Int 5))
   (Let MutualRecursion.number.2
    (Fun_call Std.Prelude.Operators.+
     ((Name MutualRecursion.number.1) (Name MutualRecursion.number.1)))
    (Name MutualRecursion.number.2)))))
