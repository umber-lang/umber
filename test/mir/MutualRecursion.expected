((Value_def MutualRecursion.f.0 (Name Std.Prelude.List.Nil.0))
 (Fun_def
  ((fun_name MutualRecursion.loop.0) (closed_over ())
   (args (MutualRecursion.acc.0 MutualRecursion.forest.0))
   (body
    (Catch (label 0)
     (body
      (If (cond (Constant_tag_equals (Name MutualRecursion.forest.0) 0))
       (then_ (Break 0))
       (else_
        (Catch (label 1)
         (body
          (Let MutualRecursion.tree.0
           (Get_block_field 0 (Name MutualRecursion.forest.0))
           (Let MutualRecursion.trees.0
            (Get_block_field 1 (Name MutualRecursion.forest.0)) (Break 1))))
         (with_
          (Fun_call MutualRecursion.loop.0
           ((Fun_call Std.Prelude.Operators.+.0
             ((Name MutualRecursion.acc.0)
              (Fun_call MutualRecursion.sum_tree.0
               ((Name MutualRecursion.tree.0)))))
            (Name MutualRecursion.trees.0))))))))
     (with_ (Name MutualRecursion.acc.0))))))
 (Fun_def
  ((fun_name *fun.0) (closed_over (MutualRecursion.loop.0))
   (args (MutualRecursion.forest.1))
   (body
    (Fun_call MutualRecursion.loop.0
     ((Primitive (Int 0)) (Name MutualRecursion.forest.1))))))
 (Value_def MutualRecursion.sum_forest.0 (Name *fun.0))
 (Fun_def
  ((fun_name MutualRecursion.sum_tree.0) (closed_over ()) (args (.0))
   (body
    (Catch (label 0)
     (body
      (If (cond (Constant_tag_equals (Name .0) 0)) (then_ (Break 0))
       (else_
        (Catch (label 1)
         (body
          (Let MutualRecursion.x.0 (Get_block_field 0 (Name .0))
           (Let MutualRecursion.forest.2 (Get_block_field 1 (Name .0))
            (Break 1))))
         (with_
          (Fun_call Std.Prelude.Operators.+.0
           ((Name MutualRecursion.x.0)
            (Fun_call MutualRecursion.sum_forest.0
             ((Name MutualRecursion.forest.2))))))))))
     (with_ (Primitive (Int 0)))))))
 (Value_def MutualRecursion.Nil.0 (Make_block (tag 0)))
 (Fun_def
  ((fun_name MutualRecursion.Cons.0) (closed_over ()) (args (arg0.0 arg1.0))
   (body (Make_block (tag 0) (fields ((Name arg0.0) (Name arg1.0)))))))
 (Value_def MutualRecursion.Leaf.0 (Make_block (tag 0)))
 (Fun_def
  ((fun_name MutualRecursion.Node.0) (closed_over ()) (args (arg0.1 arg1.1))
   (body (Make_block (tag 0) (fields ((Name arg0.1) (Name arg1.1)))))))
 (Fun_def
  ((fun_name MutualRecursion.even.0) (closed_over ())
   (args (MutualRecursion.x.1))
   (body
    (Let match.0
     (Fun_call Std.Prelude.Operators.==.0
      ((Name MutualRecursion.x.1) (Primitive (Int 0))))
     (Catch (label 0)
      (body
       (If (cond (Constant_tag_equals (Name match.0) 1)) (then_ (Break 0))
        (else_
         (Catch (label 1) (body (Break 1))
          (with_
           (Fun_call MutualRecursion.odd.0
            ((Fun_call Std.Prelude.Operators.-.0
              ((Name MutualRecursion.x.1) (Primitive (Int 1)))))))))))
      (with_ (Name True.0)))))))
 (Fun_def
  ((fun_name MutualRecursion.odd.0) (closed_over ())
   (args (MutualRecursion.x.2))
   (body
    (Let match.1
     (Fun_call Std.Prelude.Operators.==.0
      ((Name MutualRecursion.x.2) (Primitive (Int 0))))
     (Catch (label 0)
      (body
       (If (cond (Constant_tag_equals (Name match.1) 1)) (then_ (Break 0))
        (else_
         (Catch (label 1) (body (Break 1))
          (with_
           (Fun_call MutualRecursion.even.0
            ((Fun_call Std.Prelude.Operators.-.0
              ((Name MutualRecursion.x.2) (Primitive (Int 1)))))))))))
      (with_ (Name False.0)))))))
 (Value_def MutualRecursion.number.0
  (Let MutualRecursion.number.1 (Primitive (Int 5))
   (Let MutualRecursion.number.2
    (Fun_call Std.Prelude.Operators.+.0
     ((Name MutualRecursion.number.1) (Name MutualRecursion.number.1)))
    (Name MutualRecursion.number.2)))))
