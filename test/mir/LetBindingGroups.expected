((Value_def LetBindingGroups.a (Primitive (Int 1)))
 (Extern_decl ((name umber_int_add) (arity 2)))
 (Extern_decl ((name umber_int_sub) (arity 2)))
 (Extern_decl ((name umber_int_pow) (arity 2)))
 (Extern_decl ((name umber_int_mul) (arity 2)))
 (Fun_def
  ((fun_name LetBindingGroups.fun) (args (LetBindingGroups.n))
   (body
    (Fun_call umber_int_add
     ((Fun_call umber_int_add
       ((Fun_call umber_int_sub
         ((Fun_call umber_int_pow
           ((Name LetBindingGroups.n) (Primitive (Int 2))))
          (Primitive (Int 2))))
        (Name LetBindingGroups.n)))
      (Fun_call umber_int_mul
       ((Fun_call umber_int_mul
         ((Name LetBindingGroups.n)
          (Fun_call umber_int_sub
           ((Name LetBindingGroups.n) (Primitive (Int 8))))))
        (Primitive (Int 5)))))))))
 (Value_def LetBindingGroups.b
  (Fun_call umber_int_add ((Name LetBindingGroups.a) (Primitive (Int 6)))))
 (Extern_decl ((name Std.Prelude.Operators.::) (arity 2)))
 (Extern_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Extern_decl ((name Std.Prelude.Operators.||) (arity 2)))
 (Extern_decl ((name umber_eq) (arity 2)))
 (Value_def _
  (Let LetBindingGroups.list
   (Fun_call Std.Prelude.Operators.::
    ((Primitive (String a))
     (Fun_call Std.Prelude.Operators.::
      ((Primitive (String list))
       (Fun_call Std.Prelude.Operators.::
        ((Primitive (String of))
         (Fun_call Std.Prelude.Operators.::
          ((Primitive (String words)) (Name Std.Prelude.List.Nil)))))))))
   (Fun_call Std.Prelude.Operators.||
    ((Fun_call umber_eq ((Primitive (Int 1)) (Primitive (Int 2))))
     (Fun_call umber_eq ((Primitive (Int 3)) (Primitive (Int 4))))))))
 (Fun_def
  ((fun_name *fun) (args (*closure_env LetBindingGroups.x))
   (body
    (Let LetBindingGroups.go_right.1 (Get_block_field 1 (Name *closure_env))
     (Fun_call LetBindingGroups.go_right.1 ((Name LetBindingGroups.x)))))))
 (Fun_def
  ((fun_name *fun.1) (args (*closure_env.1 LetBindingGroups.x.1))
   (body
    (Let LetBindingGroups.go_left.1 (Get_block_field 1 (Name *closure_env.1))
     (Fun_call LetBindingGroups.go_left.1 ((Name LetBindingGroups.x.1)))))))
 (Value_def LetBindingGroups.bottom
  (Let LetBindingGroups.bottom_again
   (Let LetBindingGroups.go_left
    (Make_block (tag 12289)
     (fields ((Name *fun) (Name LetBindingGroups.go_right))))
    (Let LetBindingGroups.go_right
     (Make_block (tag 12289)
      (fields ((Name *fun.1) (Name LetBindingGroups.go_left))))
     (Fun_call LetBindingGroups.go_left ((Primitive (Int 17))))))
   (Name LetBindingGroups.bottom_again))))
