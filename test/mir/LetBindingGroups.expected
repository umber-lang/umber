((Value_def LetBindingGroups.a (Primitive (Int 1)))
 (Fun_decl ((name Std.Prelude.Operators.+) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.-) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.^) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.*) (arity 2)))
 (Fun_def
  ((fun_name LetBindingGroups.fun) (args (LetBindingGroups.n))
   (body
    (Fun_call Std.Prelude.Operators.+
     ((Fun_call Std.Prelude.Operators.+
       ((Fun_call Std.Prelude.Operators.-
         ((Fun_call Std.Prelude.Operators.^
           ((Name LetBindingGroups.n) (Primitive (Int 2))))
          (Primitive (Int 2))))
        (Name LetBindingGroups.n)))
      (Fun_call Std.Prelude.Operators.*
       ((Fun_call Std.Prelude.Operators.*
         ((Name LetBindingGroups.n)
          (Fun_call Std.Prelude.Operators.-
           ((Name LetBindingGroups.n) (Primitive (Int 8))))))
        (Primitive (Int 5)))))))))
 (Value_def LetBindingGroups.b
  (Fun_call Std.Prelude.Operators.+
   ((Name LetBindingGroups.a) (Primitive (Int 6)))))
 (Fun_decl ((name Std.Prelude.Operators.::) (arity 2)))
 (Fun_decl ((name Std.Prelude.List.Nil) (arity 0)))
 (Fun_decl ((name Std.Prelude.Operators.||) (arity 2)))
 (Fun_decl ((name Std.Prelude.Operators.==) (arity 2)))
 (Value_def LetBindingGroups._
  (Let LetBindingGroups.list
   (Fun_call Std.Prelude.Operators.::
    ((Primitive (String a))
     (Fun_call Std.Prelude.Operators.::
      ((Primitive (String list))
       (Fun_call Std.Prelude.Operators.::
        ((Primitive (String of))
         (Fun_call Std.Prelude.Operators.::
          ((Primitive (String words)) (Name Std.Prelude.List.Nil)))))))))
   (Fun_call Std.Prelude.Operators.||
    ((Fun_call Std.Prelude.Operators.==
      ((Primitive (Int 1)) (Primitive (Int 2))))
     (Fun_call Std.Prelude.Operators.==
      ((Primitive (Int 3)) (Primitive (Int 4))))))))
 (Fun_def
  ((fun_name LetBindingGroups.go_left) (args (LetBindingGroups.x))
   (body (Fun_call LetBindingGroups.go_right ((Name LetBindingGroups.x))))))
 (Fun_def
  ((fun_name LetBindingGroups.go_right) (args (LetBindingGroups.x.1))
   (body (Fun_call LetBindingGroups.go_left ((Name LetBindingGroups.x.1))))))
 (Fun_def
  ((fun_name LetBindingGroups.bottom_again)
   (args (LetBindingGroups.*lambda_arg))
   (body (Fun_call LetBindingGroups.go_left ((Primitive (Int 17)))))))
 (Value_def LetBindingGroups.bottom.1 (Name LetBindingGroups.bottom_again))
 (Fun_def
  ((fun_name LetBindingGroups.bottom) (args (LetBindingGroups.arg0))
   (body (Fun_call LetBindingGroups.bottom.1 ((Name LetBindingGroups.arg0)))))))
