(CrossModuleUsage ()
 ((Let (rec_ false)
   (bindings
    (((Catch_all (source))
      ((Literal (String "everything depends on me")) (Type_app String ()))))))
  (Module
   (A ()
    ((Let (rec_ true)
      (bindings
       (((Catch_all (a))
         ((Lambda ((Tuple ())) (Fun_call (Name b) (((Tuple ()) (Tuple ())))))
          (Function ((Tuple ())) (Var a))))
        ((Catch_all (b))
         ((Lambda ((Tuple ())) (Fun_call (Name a) (((Tuple ()) (Tuple ())))))
          (Function ((Tuple ())) (Var a)))))))
     (Let (rec_ false)
      (bindings
       (((Catch_all (print))
         ((Name Std.Prelude.print)
          (Function ((Type_app String ())) (Tuple ())))))))
     (Let (rec_ false)
      (bindings
       (((Catch_all (print_source))
         ((Lambda ((Tuple ()))
           (Fun_call (Name print) (((Name source) (Type_app String ())))))
          (Function ((Tuple ())) (Tuple ()))))))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (print_source))
      ((Lambda ((Tuple ()))
        (Fun_call (Name ";")
         (((Fun_call (Name A.print_source) (((Tuple ()) (Tuple ()))))
           (Tuple ()))
          ((Fun_call (Name print) (((Name source) (Type_app String ()))))
           (Tuple ())))))
       (Function ((Tuple ())) (Tuple ())))))))
  (Common_def (Val empty () (() (Type_app List ((Var a))))))
  (Let (rec_ false)
   (bindings (((Catch_all (empty)) ((Name Nil) (Type_app List ((Var a))))))))))
