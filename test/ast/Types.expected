(Types ()
 ((Let (Catch_all (n))
   (Type_annotation (Literal (Int 1)) (() (Type_app (() Int) ()))))
  (Common_def
   (Type_decl Direction
    (() (Variants ((North ()) (South ()) (East ()) (West ()))))))
  (Let (Catch_all (north_is_north))
   (Match (Name (() North))
    (((Cnstr_appl (() North) ()) (Name (() True)))
     ((Catch_all ()) (Name (() False))))))
  (Common_def
   (Val first_letter ()
    (() (Function (Type_app (() Direction) ()) (Type_app (() Char) ())))))
  (Let (Catch_all (first_letter))
   (Lambda (Catch_all (""))
    (Match (Name (() ""))
     (((Cnstr_appl (() North) ()) (Literal (Char N)))
      ((Cnstr_appl (() South) ()) (Literal (Char S)))
      ((Cnstr_appl (() East) ()) (Literal (Char E)))
      ((Cnstr_appl (() West) ()) (Literal (Char W)))))))
  (Let (Catch_all (magnitude))
   (Lambda (Tuple ((Catch_all (x)) (Catch_all (y))))
    (Fun_call (Name (() sqrt))
     (Op_tree
      ((() ^)
       (((() +)
         (((() ^) (((Name (() x))) ((Literal (Int 2))))) ((Name (() y)))))
        ((Literal (Int 2)))))))))
  (Common_def
   (Type_decl Rectangle
    (()
     (Record
      ((length (Type_app (() Int) ())) (width (Type_app (() Int) ())))))))
  (Let (Catch_all (area))
   (Lambda (Catch_all (rect))
    (Op_tree
     ((() *)
      (((Record_field_access (Name (() rect)) length))
       ((Record_field_access (Name (() rect)) width)))))))
  (Let (Catch_all (double_length))
   (Lambda (Record ((length ()) (width ())))
    (Record_literal
     ((length
       ((Op_tree ((() *) (((Name (() length))) ((Literal (Int 2))))))))
      (width ())))))
  (Let (Catch_all (double_width))
   (Lambda (Catch_all (rect))
    (Record_update (Name (() rect))
     ((width
       ((Op_tree
         ((() *)
          (((Record_field_access (Name (() rect)) width))
           ((Literal (Int 2))))))))))))
  (Let (Catch_all (double_dimensions))
   (Op_tree
    ((() .) (((Name (() double_length))) ((Name (() double_width)))))))
  (Common_def
   (Type_decl Option ((a) (Variants ((Some ((Var a))) (None ()))))))
  (Common_def
   (Val value ()
    (()
     (Function (Type_app (() Option) ((Var a))) (Function (Var a) (Var a))))))
  (Let (Catch_all (value))
   (Lambda (Catch_all (opt))
    (Lambda (Catch_all (default))
     (Match (Name (() opt))
      (((Cnstr_appl (() Some) ((Catch_all (x)))) (Name (() x)))
       ((Cnstr_appl (() None) ()) (Name (() default))))))))
  (Common_def (Type_decl MyInt (() (Alias (Type_app (() Int) ())))))
  (Common_def (Type_decl Pair ((x y) (Alias (Tuple ((Var x) (Var y)))))))))
