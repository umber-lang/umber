type Result a e =
  | Ok a
  | Error e

type Exn = String

effect Exn = {
  val raise : Exn -> Never
}

let not_raising : Int =
  handle
    (match True
    | True -> 1
    | False -> raise "exn")
      : Int
  | <raise _> -> 2

let reraise : String, (() -> <Exn, a> b) -> <Exn, a> b =
  \msg f ->
    let' result : Result c String =
      handle f () : e
      | value -> Ok value : Result c String
      | <raise exn> -> Error exn
    in
    (match result
    | Ok value -> value
    | Error exn -> raise ((msg ++ ": " : String) ++ exn : String))
      : b

let print_unhandled : String -> () =
  \exn -> print ("Unhandled exception: " ++ exn : String)

let () =
  handle
    reraise
      "Reraised"
      ((\() ->
        (match True
        | True -> raise "My exception"
        | False -> 42)
          : Int)
        : () -> <Exn, a> Int)
      : Int
  | value -> print_int value
  | <raise exn> -> print_unhandled exn

let catch : (() -> <Exn, a> b), (String -> <a> b) -> <a> b =
  \f exn_handler ->
    (match
      (handle f () : d
      | x -> Ok x : Result f String
      | <raise exn> -> Error exn)
        : Result f String
    | Ok x -> x
    | Error exn -> exn_handler exn)
      : b

let fail : () -> <Exn> Never = \() -> raise "failure" : Never

let this_should_not_raise : () -> () = \() -> catch fail ((\(_ : Exn) -> ()) : Exn -> ())

let this_should_raise : () -> <Exn> Never =
  \() ->
    catch
      fail ((\(_ : Exn) -> raise "outer exception" : Never) : Exn -> <Exn, c> Never)
      : Never

let test : String, Int -> () =
  \msg result ->
    print_string (msg ++ ": " : String);
    print_int result;
    print ""

let () =
  test "Not raising" not_raising;
  this_should_not_raise ();
  (handle this_should_raise ()
  | <raise exn> -> print "Correctly raised")
