import Std.Prelude.((|>) as _, _)

let () = ()

let id : a -> a = \x -> x

let id_for_ints : Int -> Int = \x -> x

let id_for_floats : Float -> Float = \x -> x

let id_for_chars : Char -> Char = id

let id_for_bools : Bool -> Bool = \x -> id x : Bool

let ((id_alias : a -> a), (five : Int)) = (id, 5)

let (|>) : a, (a -> <b> c) -> <b> c = \x f -> f x : c

let if_ : (() -> <a> b), (() -> <a> b) -> (Bool -> <a> b) =
  \then_ else_ ->
    (match
    | True -> then_ ()
    | False -> else_ ())
      : Bool -> <a> b

let if' : (() -> <a> b), (() -> <a> b), Bool -> <a> b =
  \then_ else_ cond ->
    (match cond
    | True -> then_ ()
    | False -> else_ ())
      : b
