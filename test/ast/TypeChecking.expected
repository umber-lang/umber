(TypeChecking ()
 ((1:1-1:12 (Let (((Tuple ()) ((Tuple ()) (Tuple ()))))))
  (2:1-2:13
   (Let
    (((Catch_all (id))
      ((Lambda (Catch_all (x)) (Name (() x))) (Function (Var a) (Var a)))))))
  (3:1-3:30
   (Let
    (((Catch_all (id_for_ints))
      ((Lambda (Catch_all (x)) (Name (() x)))
       (Function (Type_app (() Int) ()) (Type_app (() Int) ())))))))
  (5:1-5:35
   (Common_def
    (Val id_for_floats ()
     (() (Function (Type_app (() Float) ()) (Type_app (() Float) ()))))))
  (6:1-6:28
   (Let
    (((Catch_all (id_for_floats))
      ((Lambda (Catch_all (x)) (Name (() x)))
       (Function (Type_app (() Float) ()) (Type_app (() Float) ())))))))
  (8:1-8:22
   (Let
    (((Catch_all (id_for_chars))
      ((Name (() id))
       (Function (Type_app (() Char) ()) (Type_app (() Char) ())))))))
  (9:1-9:32
   (Common_def
    (Val id_for_chars ()
     (() (Function (Type_app (() Char) ()) (Type_app (() Char) ()))))))
  (11:1-11:33
   (Let
    (((Catch_all (id_for_bools))
      ((Lambda (Catch_all (x)) (Fun_call (Name (() id)) (Name (() x))))
       (Function (Type_app (() Bool) ()) (Type_app (() Bool) ())))))))
  (13:1-13:31
   (Let
    (((Tuple ((Catch_all (id_alias)) (Catch_all (five))))
      ((Tuple ((Name (() id)) (Literal (Int 5))))
       (Tuple ((Function (Var a) (Var a)) (Type_app (() Int) ()))))))))
  (16:1-16:19
   (Let
    (((Catch_all (|>))
      ((Lambda (Catch_all (x))
        (Lambda (Catch_all (f)) (Fun_call (Name (() f)) (Name (() x)))))
       (Function (Var a) (Function (Function (Var a) (Var b)) (Var b))))))))
  (19:1-21:22
   (Let
    (((Catch_all (if_))
      ((Lambda (Catch_all (then_))
        (Lambda (Catch_all (else_))
         (Lambda (Catch_all (""))
          (Match (Name (() ""))
           (((Cnstr_appl (() True) ())
             (Fun_call (Name (() then_)) (Tuple ())))
            ((Cnstr_appl (() False) ())
             (Fun_call (Name (() else_)) (Tuple ()))))))))
       (Function (Function (Tuple ()) (Var a))
        (Function (Function (Tuple ()) (Var a))
         (Function (Type_app (() Bool) ()) (Var a)))))))))))
