let (one, two) as pair : (Int, Int) = (1, 2)

let iter_pairs : (a, a -> <b> ()), List a -> <b> () =
  \f lst ->
    match lst
    | Nil | Cons _ Nil -> ()
    | Cons a (Cons b (_ as rest)) ->
      f a b;
      iter_pairs f (b :: rest : List c)

let () =
  iter_pairs
    ((\(a : String) (b : String) ->
      print (a ++ b : String))
      : String, String -> ())
    (Cons
      "foo" (Cons "bar" (Cons "baz" Nil : List String) : List String)
      : List String)
