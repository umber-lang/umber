(AsPattern ()
 ((Let (rec_ false)
   (bindings
    (((As (Tuple ((Catch_all (one)) (Catch_all (two)))) pair)
      ((Tuple ((Literal (Int 1)) (Literal (Int 2))))
       (Tuple ((Type_app Int ()) (Type_app Int ()))))))))
  (Let (rec_ true)
   (bindings
    (((Catch_all (iter_pairs))
      ((Lambda ((Catch_all (f)) (Catch_all (lst)))
        (Match (Name lst) (Type_app Std.Prelude.List.List ((Var a)))
         (((Union (Cnstr_appl Nil ())
            (Cnstr_appl Cons ((Catch_all ()) (Cnstr_appl Nil ()))))
           (Tuple ()))
          ((Cnstr_appl Cons
            ((Catch_all (a))
             (Cnstr_appl Cons ((Catch_all (b)) (As (Catch_all ()) rest)))))
           (Fun_call (Name ";")
            (((Fun_call (Name f) (((Name a) (Var a)) ((Name b) (Var a))))
              (Tuple ()))
             ((Fun_call (Name iter_pairs)
               (((Name f) (Function ((Var a) (Var a)) (Tuple ())))
                ((Fun_call (Name ::)
                  (((Name b) (Var a))
                   ((Name rest) (Type_app Std.Prelude.List.List ((Var a))))))
                 (Type_app Std.Prelude.List ((Var a))))))
              (Tuple ()))))))))
       (Function
        ((Function ((Var a) (Var a)) (Tuple ()))
         (Type_app Std.Prelude.List ((Var a))))
        (Tuple ())))))))
  (Let (rec_ false)
   (bindings
    (((Tuple ())
      ((Fun_call (Name iter_pairs)
        (((Lambda ((Catch_all (a)) (Catch_all (b)))
           (Fun_call (Name print)
            (((Fun_call (Name ++)
               (((Name a) (Type_app String ()))
                ((Name b) (Type_app String ()))))
              (Type_app String ())))))
          (Function ((Type_app String ()) (Type_app String ())) (Tuple ())))
         ((Fun_call (Name Cons)
           (((Literal (String foo)) (Type_app String ()))
            ((Fun_call (Name Cons)
              (((Literal (String bar)) (Type_app String ()))
               ((Fun_call (Name Cons)
                 (((Literal (String baz)) (Type_app String ()))
                  ((Name Nil)
                   (Type_app Std.Prelude.List.List ((Type_app String ()))))))
                (Type_app Std.Prelude.List.List ((Type_app String ()))))))
             (Type_app Std.Prelude.List.List ((Type_app String ()))))))
          (Type_app Std.Prelude.List.List ((Type_app String ()))))))
       (Tuple ()))))))))
