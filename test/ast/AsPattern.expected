(AsPattern ()
 ((Let
   (((As (Tuple ((Catch_all (one)) (Catch_all (two)))) pair)
     ((Tuple ((Literal (Int 1)) (Literal (Int 2))))
      (Tuple ((Type_app Int ()) (Type_app Int ())))))))
  (Let
   (((Catch_all (iter_pairs))
     ((Lambda ((Catch_all (f)) (Catch_all (lst)))
       (Match (Name lst) (Type_app Std.Prelude.List.List ((Var a)))
        (((Union (Cnstr_appl Nil ())
           (Cnstr_appl Cons ((Catch_all ()) (Cnstr_appl Nil ()))))
          (Tuple ()))
         ((Cnstr_appl Cons
           ((Catch_all (a))
            (Cnstr_appl Cons ((Catch_all (b)) (As (Catch_all ()) rest)))))
          (Fun_call (Name ";")
           (((Fun_call (Name f) (((Name a) (Var a)) ((Name b) (Var a))))
             (Tuple ()))
            ((Fun_call (Name iter_pairs)
              (((Name f) (Function ((Var a) (Var a)) (Tuple ())))
               ((Name rest) (Type_app Std.Prelude.List.List ((Var a))))))
             (Tuple ()))))))))
      (Function
       ((Function ((Var a) (Var a)) (Tuple ()))
        (Type_app Std.Prelude.List.List ((Var a))))
       (Tuple ()))))))))
