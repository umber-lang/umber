(AsPattern ()
 ((Let (rec_ false)
   (bindings
    (((As (Tuple ((Catch_all (one)) (Catch_all (two)))) pair)
      ((Tuple ((Literal (Int 1)) (Literal (Int 2))))
       ((Tuple ((Type_app Int ()) (Type_app Int ()))) ()))))))
  (Let (rec_ true)
   (bindings
    (((Catch_all (iter_pairs))
      ((Lambda ((Catch_all (f)) (Catch_all (lst)))
        (Match (Name AsPattern.lst)
         ((Type_app Std.Prelude.List.List ((Union ()))) ())
         (((Union (Cnstr_appl Std.Prelude.List.Nil ())
            (Cnstr_appl Std.Prelude.List.Cons
             ((Catch_all ()) (Cnstr_appl Std.Prelude.List.Nil ()))))
           (Tuple ()))
          ((Cnstr_appl Std.Prelude.List.Cons
            ((Catch_all (a))
             (Cnstr_appl Std.Prelude.List.Cons
              ((Catch_all (b)) (As (Catch_all ()) rest)))))
           (Fun_call (Name "Std.Prelude.Operators.;")
            ((Function ((Tuple ()) (Tuple ())) (Effect_union ()) (Tuple ()))
             ())
            (((Fun_call (Name AsPattern.f)
               ((Function ((Intersection ()) (Intersection ()))
                 (Effect_union ()) (Tuple ()))
                ())
               (((Name AsPattern.a) ((Union ()) ()))
                ((Name AsPattern.b) ((Union ()) ()))))
              ((Tuple ()) ()))
             ((Fun_call (Name AsPattern.iter_pairs)
               ((Function
                 ((Function ((Var b) (Var b)) (Effect_var c) (Tuple ()))
                  (Type_app Std.Prelude.List.List ((Var b))))
                 (Effect_var c) (Tuple ()))
                ())
               (((Name AsPattern.f)
                 ((Function ((Intersection ()) (Intersection ()))
                   (Effect_union ()) (Tuple ()))
                  ()))
                ((Fun_call (Name Std.Prelude.Operators.::)
                  ((Function
                    ((Var a) (Type_app Std.Prelude.List.List ((Var a))))
                    (Effect_union ())
                    (Type_app Std.Prelude.List.List ((Var a))))
                   ())
                  (((Name AsPattern.b) ((Union ()) ()))
                   ((Name AsPattern.rest)
                    ((Type_app Std.Prelude.List.List ((Union ()))) ()))))
                 ((Type_app Std.Prelude.List.List ((Union ()))) ()))))
              ((Tuple ()) ()))))))))
       ((Function
         ((Function ((Var b) (Var b)) (Effect_var c) (Tuple ()))
          (Type_app Std.Prelude.List.List ((Var b))))
         (Effect_var c) (Tuple ()))
        ()))))))
  (Let (rec_ false)
   (bindings
    (((Tuple ())
      ((Fun_call (Name AsPattern.iter_pairs)
        ((Function
          ((Function ((Type_app String ()) (Type_app String ()))
            (Effect_var a) (Tuple ()))
           (Type_app Std.Prelude.List.List ((Type_app String ()))))
          (Effect_var a) (Tuple ()))
         ())
        (((Lambda ((Catch_all (a)) (Catch_all (b)))
           (Fun_call (Name Std.Prelude.print)
            ((Function ((Type_app String ())) (Effect_union ()) (Tuple ()))
             ())
            (((Fun_call (Name Std.Prelude.Operators.++)
               ((Function ((Type_app String ()) (Type_app String ()))
                 (Effect_union ()) (Type_app String ()))
                ())
               (((Name AsPattern.a) ((Type_app String ()) ()))
                ((Name AsPattern.b) ((Type_app String ()) ()))))
              ((Type_app String ()) ())))))
          ((Function ((Type_app String ()) (Type_app String ()))
            (Effect_union ()) (Tuple ()))
           ()))
         ((Fun_call (Name Std.Prelude.List.Cons)
           ((Function
             ((Type_app String ())
              (Type_app Std.Prelude.List.List ((Type_app String ()))))
             (Effect_union ())
             (Type_app Std.Prelude.List.List ((Type_app String ()))))
            ())
           (((Literal (String foo)) ((Type_app String ()) ()))
            ((Fun_call (Name Std.Prelude.List.Cons)
              ((Function
                ((Type_app String ())
                 (Type_app Std.Prelude.List.List ((Type_app String ()))))
                (Effect_union ())
                (Type_app Std.Prelude.List.List ((Type_app String ()))))
               ())
              (((Literal (String bar)) ((Type_app String ()) ()))
               ((Fun_call (Name Std.Prelude.List.Cons)
                 ((Function
                   ((Type_app String ())
                    (Type_app Std.Prelude.List.List ((Type_app String ()))))
                   (Effect_union ())
                   (Type_app Std.Prelude.List.List ((Type_app String ()))))
                  ())
                 (((Literal (String baz)) ((Type_app String ()) ()))
                  ((Name Std.Prelude.List.Nil)
                   ((Type_app Std.Prelude.List.List ((Type_app String ())))
                    ()))))
                ((Type_app Std.Prelude.List.List ((Type_app String ()))) ()))))
             ((Type_app Std.Prelude.List.List ((Type_app String ()))) ()))))
          ((Type_app Std.Prelude.List.List ((Type_app String ()))) ()))))
       ((Tuple ()) ()))))))))
