(Closures ()
 ((Let (rec_ false)
   (bindings
    (((Catch_all (count_up))
      ((Lambda
        ((Catch_all (start_at)) (Catch_all (count_by))
         (Catch_all (end_after)))
        (Let
         ((rec_ true)
          (bindings
           ((((Catch_all (loop))
              (Function ((Type_app Std.Prelude.Int.Int ()))
               (Type_app Std.Prelude.Int.Int ())))
             (Lambda ((Catch_all (current)))
              (Match
               (Fun_call (Name Std.Prelude.Operators.<)
                (Function
                 ((Type_app Std.Prelude.Int.Int ())
                  (Type_app Std.Prelude.Int.Int ()))
                 (Type_app Std.Prelude.Bool.Bool ()))
                (((Name Closures.current) (Type_app Std.Prelude.Int.Int ()))
                 ((Name Closures.end_after)
                  (Type_app Std.Prelude.Int.Int ()))))
               (Type_app Bool ())
               (((Cnstr_appl True ())
<<<<<<< HEAD
                 (Fun_call (Name loop)
                  (((Fun_call (Name +)
                     (((Name current) (Type_app Int ()))
                      ((Name count_by) (Type_app Int ()))))
                    (Type_app Int ())))))
                ((Cnstr_appl False ()) (Name current))))))))
          (body (Fun_call (Name loop) (((Name start_at) (Type_app Int ()))))))))
       (Function ((Type_app Int ()) (Type_app Int ()) (Type_app Int ()))
        (Type_app Int ())))))))
  (Let (rec_ false)
   (bindings
    (((Tuple ())
      ((Fun_call (Name print_int)
        (((Fun_call (Name count_up)
           (((Literal (Int 0)) (Type_app Int ()))
            ((Literal (Int 2)) (Type_app Int ()))
            ((Literal (Int 5)) (Type_app Int ()))))
          (Type_app Int ()))))
       (Tuple ()))))))))
=======
                 (Fun_call (Name Closures.loop)
                  (Function ((Type_app Std.Prelude.Int.Int ()))
                   (Type_app Std.Prelude.Int.Int ()))
                  (((Fun_call (Name Std.Prelude.Operators.+)
                     (Function
                      ((Type_app Std.Prelude.Int.Int ())
                       (Type_app Std.Prelude.Int.Int ()))
                      (Type_app Std.Prelude.Int.Int ()))
                     (((Name Closures.current)
                       (Type_app Std.Prelude.Int.Int ()))
                      ((Name Closures.count_by)
                       (Type_app Std.Prelude.Int.Int ()))))
                    (Type_app Std.Prelude.Int.Int ())))))
                ((Cnstr_appl False ()) (Name Closures.current))))))))
          (body
           (Fun_call (Name Closures.loop)
            (Function ((Type_app Std.Prelude.Int.Int ()))
             (Type_app Std.Prelude.Int.Int ()))
            (((Name Closures.start_at) (Type_app Std.Prelude.Int.Int ()))))))))
       (Function
        ((Type_app Std.Prelude.Int.Int ()) (Type_app Std.Prelude.Int.Int ())
         (Type_app Std.Prelude.Int.Int ()))
        (Type_app Std.Prelude.Int.Int ())))))))))
>>>>>>> master
