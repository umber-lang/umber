module : {
  import .A.Foo
  
  module A : {
    import ..B.Bar
    
    type Foo = Bar
  }
  
  module B : {
    import Std.Prelude.Int
    
    type Bar = Int
    
    module C : {
      import ...A.Foo
    }
  }
  
  val infixl 7 (*) : Int, Int -> Int
}
import Std.Prelude.Float

import Std.Prelude.(Int, Option)

import Std.Prelude.Float.abs

import Std.Prelude.Float.(sin, cos)

type Cool =
  | You_can_define_types_in_between_imports ()
  | Bad_style_though (Option ())

import Std.Prelude.Int._

import Std.Prelude.Operators.(*)

import Std.Prelude.(List, Float.(pi, (+)))

module A = {
  type Foo = Bar
  
  import ..B.Bar
}

module B = {
  type Bar = Int
  
  import Std.Prelude.Int
  
  module C = {
    import ...A.Foo
  }
}

import .A.Foo
