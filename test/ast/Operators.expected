module : {
  import Std.Prelude.List
  
  val infix 4 (==) : a, a -> Bool
  
  module Arith : {
    val infixl 6 (+) : Int, Int -> Int
    
    val infixl 7 mod : Int, Int -> Int
  }
  
  val infixr 5 (::) : a, List a -> List a
  
  val (×) : List a, List b -> List (a, b)
  
  val infix 3 (~~~) : (), () -> ()
}

import Std.Prelude.((*), (==), List, (::), Nil)

module Arith = {
  import Std.Prelude.((+), mod)
}

let true : Bool =
  (Std.Prelude.Operators.(+) 2 (Std.Prelude.Operators.mod 11 3 : Int) : Int) == 4

let four : Int = Std.Prelude.Operators.(+) 2 2

let one : Int = Std.Prelude.Operators.mod 5 2

let left_section : Int -> Int = (2 :Std.Prelude.Operators.(+):)

let right_section : Int -> Int = (* 5)

let unicode_my_dudes : List (String, String) =
  ("damn" :: ("ok" :: Nil : List String) : List String)
  ×
  ("cartesian" :: ("product" :: ("maybe?" :: Nil : List String) : List String)
    : List String)

let infix 3 (~~~) : (), () -> () = \() () -> ()

let (×) : List a, List b -> List (a, b) =
  \xs ys ->
    List.concat_map
      xs
      ((\(x : e) ->
        List.map ys ((\(y : d) -> (x, y)) : d -> (e, d)) : List (e, d))
        : e -> List (e, d))
      : List (a, b)

import Std.Prelude.((;), print, (++), Int, Bool)

let _ : List () =
  List.map
    unicode_my_dudes
    ((\((x : String), (y : String)) ->
      print x;
      print y)
      : (String, String) -> ())

let () = print ("true = " ++ (Bool.to_string true : String) : String)

let () = print ("four = " ++ (Int.to_string four : String) : String)
