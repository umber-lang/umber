(Operators
 ((Common_sig
   (Import
    ((kind Absolute) (paths (Module Std ((Module Prelude ((Name List)))))))))
  (Common_sig
   (Val == ((Non_assoc 4))
    (() (Function ((Var a) (Var a)) (Type_app Bool ())))))
  (Module_sig Arith
   ((Common_sig
     (Val + ((Left 6))
      (() (Function ((Type_app Int ()) (Type_app Int ())) (Type_app Int ())))))
    (Common_sig
     (Val mod ((Left 7))
      (() (Function ((Type_app Int ()) (Type_app Int ())) (Type_app Int ())))))))
  (Common_sig
   (Val :: ((Right 5))
    (()
     (Function ((Var a) (Type_app Std.Prelude.List.List ((Var a))))
      (Type_app Std.Prelude.List.List ((Var a)))))))
  (Common_sig
   (Val "\195\151" ()
    (()
     (Function
      ((Type_app Std.Prelude.List.List ((Var a)))
       (Type_app Std.Prelude.List.List ((Var b))))
      (Type_app Std.Prelude.List.List ((Tuple ((Var a) (Var b))))))))))
 ((Common_def
   (Import
    ((kind Absolute)
     (paths
      (Module Std
       ((Module Prelude ((Name *) (Name ==) (Name ::) (Name Nil)))))))))
  (Module
   (Arith ()
    ((Common_def
      (Import
       ((kind Absolute)
        (paths (Module Std ((Module Prelude ((Name +) (Name mod))))))))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all ())
      ((Fun_call (Name Std.Prelude.Operators.==)
        (((Fun_call (Name Std.Prelude.Operators.mod)
           (((Fun_call (Name Std.Prelude.Operators.+)
              (((Literal (Int 2)) (Type_app Int ()))
               ((Literal (Int 11)) (Type_app Int ()))))
             (Type_app Std.Prelude.Int ()))
            ((Literal (Int 3)) (Type_app Int ()))))
          (Type_app Std.Prelude.Int ()))
         ((Literal (Int 4)) (Type_app Int ()))))
       (Type_app Bool ()))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (four))
      ((Fun_call (Name Std.Prelude.Operators.+)
        (((Literal (Int 2)) (Type_app Int ()))
         ((Literal (Int 2)) (Type_app Int ()))))
       (Type_app Std.Prelude.Int ()))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (one))
      ((Fun_call (Name Std.Prelude.Operators.mod)
        (((Literal (Int 5)) (Type_app Int ()))
         ((Literal (Int 2)) (Type_app Int ()))))
       (Type_app Std.Prelude.Int ()))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (left_section))
      ((Fun_call (Name Std.Prelude.Operators.+)
        (((Literal (Int 2)) (Type_app Int ()))))
       (Function ((Type_app Std.Prelude.Int ()))
        (Type_app Std.Prelude.Int ())))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (right_section))
      ((Lambda ((Catch_all ("")))
        (Fun_call (Name Std.Prelude.Operators.*)
         (((Name Operators.) (Type_app Std.Prelude.Int ()))
          ((Literal (Int 5)) (Type_app Int ())))))
       (Function ((Type_app Std.Prelude.Int ()))
        (Type_app Std.Prelude.Int ())))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (unicode_my_dudes))
      ((Fun_call (Name "Operators.\195\151")
        (((Fun_call (Name Std.Prelude.Operators.::)
           (((Literal (String damn)) (Type_app String ()))
            ((Fun_call (Name Std.Prelude.Operators.::)
              (((Literal (String ok)) (Type_app String ()))
               ((Name Std.Prelude.List.Nil)
                (Type_app Std.Prelude.List.List ((Type_app String ()))))))
             (Type_app Std.Prelude.List ((Type_app String ()))))))
          (Type_app Std.Prelude.List ((Type_app String ()))))
         ((Fun_call (Name Std.Prelude.Operators.::)
           (((Literal (String cartesian)) (Type_app String ()))
            ((Fun_call (Name Std.Prelude.Operators.::)
              (((Literal (String product)) (Type_app String ()))
               ((Fun_call (Name Std.Prelude.Operators.::)
                 (((Literal (String maybe?)) (Type_app String ()))
                  ((Name Std.Prelude.List.Nil)
                   (Type_app Std.Prelude.List.List ((Type_app String ()))))))
                (Type_app Std.Prelude.List ((Type_app String ()))))))
             (Type_app Std.Prelude.List ((Type_app String ()))))))
          (Type_app Std.Prelude.List ((Type_app String ()))))))
       (Type_app Std.Prelude.List.List
        ((Tuple ((Type_app String ()) (Type_app String ()))))))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all ("\195\151"))
      ((Lambda ((Catch_all (xs)) (Catch_all (ys)))
        (Fun_call (Name Operators.List.concat_map)
         (((Name Operators.xs) (Type_app Std.Prelude.List.List ((Var a))))
          ((Lambda ((Catch_all (x)))
            (Fun_call (Name Operators.List.map)
             (((Name Operators.ys)
               (Type_app Std.Prelude.List.List ((Var a))))
              ((Lambda ((Catch_all (y)))
                (Tuple ((Name Operators.x) (Name Operators.y))))
               (Function ((Var a)) (Tuple ((Var b) (Var a))))))))
           (Function ((Var a))
            (Type_app Std.Prelude.List.List ((Tuple ((Var a) (Var b))))))))))
       (Function
        ((Type_app Std.Prelude.List.List ((Var a)))
         (Type_app Std.Prelude.List.List ((Var b))))
        (Type_app Std.Prelude.List.List ((Tuple ((Var a) (Var b)))))))))))
  (Module
   (List ()
    ((Common_def
      (Import
       ((kind Absolute)
        (paths (Module Std ((Module Prelude ((Module List (All))))))))))
     (Let (rec_ true)
      (bindings
       (((Catch_all (append))
         ((Lambda ((Catch_all (xs)) (Catch_all (ys)))
           (Match (Tuple ((Name Operators.List.xs) (Name Operators.List.ys)))
            (Tuple
             ((Type_app Std.Prelude.List.List ((Var a)))
              (Type_app Std.Prelude.List.List ((Var a)))))
            (((Union
               (Tuple
                ((Cnstr_appl Std.Prelude.List.Nil ()) (Catch_all (res))))
               (Tuple
                ((Catch_all (res)) (Cnstr_appl Std.Prelude.List.Nil ()))))
              (Name Operators.List.res))
             ((Tuple
               ((Cnstr_appl Std.Prelude.List.Cons
                 ((Catch_all (x)) (Catch_all (xs))))
                (Catch_all (ys))))
              (Fun_call (Name Std.Prelude.List.Cons)
               (((Name Operators.List.x) (Var a))
                ((Fun_call (Name Operators.List.append)
                  (((Name Operators.List.xs)
                    (Type_app Std.Prelude.List.List ((Var a))))
                   ((Name Operators.List.ys)
                    (Type_app Std.Prelude.List.List ((Var a))))))
                 (Type_app Std.Prelude.List.List ((Var a))))))))))
          (Function
           ((Type_app Std.Prelude.List.List ((Var a)))
            (Type_app Std.Prelude.List.List ((Var a))))
           (Type_app Std.Prelude.List.List ((Var a)))))))))
     (Let (rec_ true)
      (bindings
       (((Catch_all (map))
         ((Lambda ((Catch_all (xs)) (Catch_all (f)))
           (Match (Name Operators.List.xs)
            (Type_app Std.Prelude.List.List ((Var a)))
            (((Cnstr_appl Std.Prelude.List.Nil ())
              (Name Std.Prelude.List.Nil))
             ((Cnstr_appl Std.Prelude.List.Cons
               ((Catch_all (x)) (Catch_all (xs))))
              (Fun_call (Name Std.Prelude.List.Cons)
               (((Fun_call (Name Operators.List.f)
                  (((Name Operators.List.x) (Var a))))
                 (Var a))
                ((Fun_call (Name Operators.List.map)
                  (((Name Operators.List.xs)
                    (Type_app Std.Prelude.List.List ((Var a))))
                   ((Name Operators.List.f) (Function ((Var a)) (Var b)))))
                 (Type_app Std.Prelude.List.List ((Var a))))))))))
          (Function
           ((Type_app Std.Prelude.List.List ((Var a)))
            (Function ((Var a)) (Var b)))
           (Type_app Std.Prelude.List.List ((Var b)))))))))
     (Let (rec_ true)
      (bindings
       (((Catch_all (concat_map))
         ((Lambda ((Catch_all (xs)) (Catch_all (f)))
           (Match (Name Operators.List.xs)
            (Type_app Std.Prelude.List.List ((Var a)))
            (((Cnstr_appl Std.Prelude.List.Nil ())
              (Name Std.Prelude.List.Nil))
             ((Cnstr_appl Std.Prelude.List.Cons
               ((Catch_all (x)) (Catch_all (xs))))
              (Fun_call (Name Operators.List.append)
               (((Fun_call (Name Operators.List.f)
                  (((Name Operators.List.x) (Var a))))
                 (Type_app Std.Prelude.List.List ((Var a))))
                ((Fun_call (Name Operators.List.concat_map)
                  (((Name Operators.List.xs)
                    (Type_app Std.Prelude.List.List ((Var a))))
                   ((Name Operators.List.f)
                    (Function ((Var a))
                     (Type_app Std.Prelude.List.List ((Var b)))))))
                 (Type_app Std.Prelude.List.List ((Var a))))))))))
          (Function
           ((Type_app Std.Prelude.List.List ((Var a)))
            (Function ((Var a)) (Type_app Std.Prelude.List.List ((Var b)))))
           (Type_app Std.Prelude.List.List ((Var b))))))))))))))
