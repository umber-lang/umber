let a : Int = 1

let fun : Int -> Int =
  \n ->
    (((n ^ 2 : Int) - 2 : Int) + n : Int) + ((n * (n - 8 : Int) : Int) * 5 : Int) : Int

let b : Int = a + 6

let _ : Bool =
  let' () = ()
  and _ : Int -> Int = fun
  and list : List String =
    "a"
    :: ("list" :: ("of" :: ("words" :: Nil : List String) : List String) : List String)
  in
  (1 == 2 : Bool) || (3 == 4 : Bool) : Bool

let bottom : Any -> Never =
  let' bottom_again : Any -> Never =
    \_ ->
      let go_left : Int -> Never = \x -> go_right x : Never
      and go_right : Int -> Never = \x -> go_left x : Never
      in
      go_left 17 : Never
  in
  bottom_again

let _ : () =
  let' foo : Int = 5 in
  let' foo : Int = foo * 2
  and bar : Int = foo * 3
  in
  print_int foo;
  print "";
  print_int bar
