(LetBindingGroups ()
 ((Let (((Catch_all (a)) ((Literal (Int 1)) (Type_app Int ())))))
  (Let
   (((Catch_all (fun))
     ((Lambda ((Catch_all (n)))
       (Fun_call (Name +)
        (((Fun_call (Name +)
           (((Fun_call (Name -)
              (((Fun_call (Name ^)
                 (((Name n) (Type_app Int ()))
                  ((Literal (Int 2)) (Type_app Int ()))))
                (Type_app Int ()))
               ((Literal (Int 2)) (Type_app Int ()))))
             (Type_app Int ()))
            ((Name n) (Type_app Int ()))))
          (Type_app Int ()))
         ((Fun_call (Name *)
           (((Fun_call (Name *)
              (((Name n) (Type_app Int ()))
               ((Fun_call (Name -)
                 (((Name n) (Type_app Int ()))
                  ((Literal (Int 8)) (Type_app Int ()))))
                (Type_app Int ()))))
             (Type_app Int ()))
            ((Literal (Int 5)) (Type_app Int ()))))
          (Type_app Int ())))))
      (Function ((Type_app Int ())) (Type_app Int ()))))))
  (Let
   (((Catch_all (b))
     ((Fun_call (Name +)
       (((Name a) (Type_app Int ())) ((Literal (Int 6)) (Type_app Int ()))))
      (Type_app Int ())))))
  (Let
   (((Catch_all ())
     ((Let
       ((rec_ false)
        (bindings
         ((((Tuple ()) (Tuple ())) (Tuple ()))
          (((Catch_all ()) (Function ((Type_app Int ())) (Type_app Int ())))
           (Name fun))
          (((Catch_all (list))
            (Type_app Std.Prelude.List ((Type_app String ()))))
           (Fun_call (Name ::)
            (((Literal (String a)) (Type_app String ()))
             ((Fun_call (Name ::)
               (((Literal (String list)) (Type_app String ()))
                ((Fun_call (Name ::)
                  (((Literal (String of)) (Type_app String ()))
                   ((Fun_call (Name ::)
                     (((Literal (String words)) (Type_app String ()))
                      ((Name Nil)
                       (Type_app Std.Prelude.List.List
                        ((Type_app String ()))))))
                    (Type_app Std.Prelude.List ((Type_app String ()))))))
                 (Type_app Std.Prelude.List ((Type_app String ()))))))
              (Type_app Std.Prelude.List ((Type_app String ())))))))))
        (body
         (Fun_call (Name ||)
          (((Fun_call (Name ==)
             (((Literal (Int 1)) (Type_app Int ()))
              ((Literal (Int 2)) (Type_app Int ()))))
            (Type_app Bool ()))
           ((Fun_call (Name ==)
             (((Literal (Int 3)) (Type_app Int ()))
              ((Literal (Int 4)) (Type_app Int ()))))
            (Type_app Bool ())))))))
      (Type_app Bool ())))))
  (Let
   (((Catch_all (bottom))
     ((Let
       ((rec_ false)
        (bindings
         ((((Catch_all (bottom_again)) (Var a))
           (Let
            ((rec_ true)
             (bindings
              ((((Catch_all (go_left)) (Var a)) (Name go_right))
               (((Catch_all (go_right)) (Var a)) (Name go_left))))
             (body (Name go_left)))))))
        (body (Name bottom_again))))
      (Var a)))))))
