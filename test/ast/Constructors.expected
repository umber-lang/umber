module A = {
  type Foo =
    | Foo
}

module B = {
  type Foo =
    | Foo
  
  let of_a : A.Foo -> Foo =
    match
    | A.Foo -> Foo
}

module Wrap = {
  type Wrap a =
    | Wrap a
  
  let my_id : Wrap a -> Wrap a =
    \x ->
      let' Wrap (y : b) = x in
      Wrap y : Wrap a
}
