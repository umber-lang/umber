effect Read = {
  val ask : () -> Int
}

let read : () -> <Read> Int = ask

let read_and_add : () -> <Read> Int = \() -> (ask () : Int) + (ask () : Int) : Int

let run_both : (a -> <b> c), (a -> <b> d), a -> <b> (c, d) =
  \f g x -> ((f x : c), (g x : d))

let foo : () -> <Read> (Int, ()) =
  \() ->
    run_both
      ((\(x : Int) -> x + (read_and_add () : Int) : Int) : Int -> <Read> Int) print_int 5
      : (Int, ())

let _ : Int =
  handle 5
  | <ask ()> -> 6

let _ : Int =
  handle read_and_add () : Int
  | <ask ()> -> resume 1

let _value_branch : Int =
  handle foo () : (Int, ())
  | (x, ()) -> x
  | <ask ()> -> resume 0

let _nested_handler : Int =
  handle
    (handle ask () : Int
    | x -> x + 1 : Int
    | <ask ()> -> resume 5)
      : Int
  | <ask ()> -> resume 7

let higher_order_handler : (() -> <Read, a> ()) -> <a> () =
  \f ->
    handle f ()
    | <ask ()> -> ()

let _ : () = higher_order_handler ((\() -> ignore (ask () : Int)) : () -> <Read> ())
