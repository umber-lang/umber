let catch_all : Bool = False

type Thing =
  | Thing1 Int
  | Thing2 Int

let Thing1 one | Thing2 one : Thing = Thing1 1

let make_thing : Int -> Thing =
  match
  | 1 -> Thing1 1
  | 2 -> Thing2 2
  | n -> Thing1 n

let Thing1 n | Thing2 n : Thing = make_thing 7

type Triple a b c =
  | Triple a b c

let _ : Triple String Int Int = Triple "s" 1 2

let _ : (String, Int, Int) = ("s'", -1, -2)

let Triple x 5 y | Triple x y 5 : Triple String Int Int = Triple "Weird stuff" 5 7

let (u, -5, v) | (u, v, -20) : (String, Int, Int) = ("Weird tuples", 0, 1)

let a : NewThing = ANewThing

type NewThing =
  | ANewThing
