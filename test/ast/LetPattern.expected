(LetPattern ()
 ((1:1-1:25
   (Let
    (((Catch_all (catch_all)) ((Name (() False)) (Type_app (() Bool) ()))))))
  (2:1-2:10
   (Let (((Constant (Int 1)) ((Literal (Int 1)) (Type_app (() Int) ()))))))
  (4:1-4:37
   (Common_def
    (Type_decl Thing
     (()
      (Variants
       ((Thing1 ((Type_app (() Int) ()))) (Thing2 ((Type_app (() Int) ())))))))))
  (5:1-5:26
   (Let
    (((Cnstr_appl (() Thing1) ((Catch_all (one))))
      ((Fun_call (Name (() Thing1)) (Literal (Int 1)))
       (Type_app ((LetPattern) Thing) ()))))))
  (6:1-10:1
   (Let
    (((Catch_all (make_thing))
      ((Lambda (Catch_all (""))
        (Match (Name (() ""))
         (((Constant (Int 1))
           (Fun_call (Name (() Thing1)) (Literal (Int 1))))
          ((Constant (Int 2))
           (Fun_call (Name (() Thing2)) (Literal (Int 2))))
          ((Catch_all (n)) (Fun_call (Name (() Thing1)) (Name (() n)))))))
       (Function (Type_app (() Int) ()) (Type_app ((LetPattern) Thing) ())))))))
  (10:1-10:41
   (Let
    (((Union (Cnstr_appl (() Thing1) ((Catch_all (n))))
       (Cnstr_appl (() Thing2) ((Catch_all (n)))))
      ((Fun_call (Name (() make_thing)) (Literal (Int 7)))
       (Type_app ((LetPattern) Thing) ()))))))
  (12:1-12:33
   (Common_def
    (Type_decl Triple
     ((a b c) (Variants ((Triple ((Var a) (Var b) (Var c)))))))))
  (13:1-13:23
   (Let
    (((Catch_all ())
      ((Fun_call
        (Fun_call (Fun_call (Name (() Triple)) (Literal (String s)))
         (Literal (Int 1)))
        (Literal (Int 2)))
       (Type_app ((LetPattern) Triple)
        ((Type_app (() String) ()) (Type_app (() Int) ())
         (Type_app (() Int) ()))))))))
  (14:1-14:23
   (Let
    (((Catch_all ())
      ((Tuple ((Literal (String s')) (Literal (Int -1)) (Literal (Int -2))))
       (Tuple
        ((Type_app (() String) ()) (Type_app (() Int) ())
         (Type_app (() Int) ()))))))))
  (15:1-15:65
   (Let
    (((Union
       (Cnstr_appl (() Triple)
        ((Catch_all (x)) (Constant (Int 5)) (Catch_all (y))))
       (Cnstr_appl (() Triple)
        ((Catch_all (x)) (Catch_all (y)) (Constant (Int 5)))))
      ((Fun_call
        (Fun_call
         (Fun_call (Name (() Triple)) (Literal (String "Weird stuff")))
         (Literal (Int 5)))
        (Literal (Int 7)))
       (Type_app ((LetPattern) Triple)
        ((Type_app (() String) ()) (Type_app (() Int) ())
         (Type_app (() Int) ()))))))))
  (16:1-16:56
   (Let
    (((Union (Tuple ((Catch_all (u)) (Constant (Int -5)) (Catch_all (v))))
       (Tuple ((Catch_all (u)) (Catch_all (v)) (Constant (Int -20)))))
      ((Tuple
        ((Literal (String "Weird tuples")) (Literal (Int 0))
         (Literal (Int 1))))
       (Tuple
        ((Type_app (() String) ()) (Type_app (() Int) ())
         (Type_app (() Int) ()))))))))
  (18:1-18:18
   (Let
    (((Catch_all (a))
      ((Name (() ANewThing)) (Type_app ((LetPattern) NewThing) ()))))))
  (19:1-19:17 (Common_def (Val a () (() (Type_app (() NewThing) ())))))
  (20:1-20:26
   (Common_def (Type_decl NewThing (() (Variants ((ANewThing ())))))))))
