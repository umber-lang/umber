(MutualRecursion ()
 ((Common_def (Val f () (() (Type_app (() Forest) ((Var a))))))
  (Let (Catch_all (f)) (Name (() Nil)))
  (Let (Catch_all (sum_forest))
   (Let
    ((rec_ true) (pat (Catch_all (loop)))
     (expr
      (Lambda (Catch_all (acc))
       (Lambda (Catch_all (""))
        (Match (Name (() ""))
         (((Cnstr_appl (() Nil) ()) (Name (() acc)))
          ((Cnstr_appl (() Cons) ((Catch_all (x)) (Catch_all (xs))))
           (Fun_call
            (Fun_call (Name (() loop))
             (Op_tree ((() +) (((Name (() acc))) ((Name (() x)))))))
            (Name (() xs)))))))))
     (body (Fun_call (Name (() loop)) (Literal (Int 0)))))))
  (Let (Catch_all (sum_tree))
   (Lambda (Catch_all (""))
    (Match (Name (() ""))
     (((Cnstr_appl (() Leaf) ()) (Literal (Int 0)))
      ((Cnstr_appl (() Node) ((Catch_all (x)) (Catch_all (forest))))
       (Op_tree
        ((() +)
         (((Name (() x)))
          ((Fun_call (Name (() sum_forest)) (Name (() forest))))))))))))
  (Common_def
   (Type_decl Forest
    ((a) (Alias (Type_app (() List) ((Type_app (() Tree) ((Var a)))))))))
  (Common_def
   (Type_decl Tree
    ((a)
     (Variants ((Leaf ()) (Node ((Var a) (Type_app (() Forest) ((Var a))))))))))
  (Let (Catch_all (even))
   (Lambda (Catch_all (x))
    (If (Op_tree ((() ==) (((Name (() x))) ((Literal (Int 0))))))
     (Name (() True))
     (Fun_call (Name (() odd))
      (Op_tree ((() -) (((Name (() x))) ((Literal (Int 1))))))))))
  (Let (Catch_all (odd))
   (Lambda (Catch_all (x))
    (If (Op_tree ((() ==) (((Name (() x))) ((Literal (Int 0))))))
     (Name (() False))
     (Fun_call (Name (() even))
      (Op_tree ((() -) (((Name (() x))) ((Literal (Int 1))))))))))))
