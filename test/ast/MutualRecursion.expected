(MutualRecursion ()
 ((Common_def (Val f () (() (Type_app MutualRecursion.Forest ((Var a))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (f))
      ((Name Std.Prelude.List.Nil)
       (Type_app MutualRecursion.Forest ((Var a))))))))
  (Let (rec_ true)
   (bindings
    (((Catch_all (sum_forest))
      ((Let
        ((rec_ true)
         (bindings
          ((((Catch_all (loop))
             (Function
              ((Type_app Std.Prelude.Int ())
               (Type_app Std.Prelude.List.List
                ((Type_app MutualRecursion.Tree
                  ((Type_app Std.Prelude.Int ()))))))
              (Type_app Std.Prelude.Int ())))
            (Lambda ((Catch_all (acc)) (Catch_all (forest)))
             (Match (Name MutualRecursion.forest)
              (Type_app Std.Prelude.List.List
               ((Type_app MutualRecursion.Tree
                 ((Type_app Std.Prelude.Int ())))))
              (((Cnstr_appl Std.Prelude.List.Nil ())
                (Name MutualRecursion.acc))
               ((Cnstr_appl Std.Prelude.List.Cons
                 ((Catch_all (tree)) (Catch_all (trees))))
                (Fun_call (Name MutualRecursion.loop)
                 (Function
                  ((Type_app Std.Prelude.Int ())
                   (Type_app Std.Prelude.List.List
                    ((Type_app MutualRecursion.Tree
                      ((Type_app Std.Prelude.Int ()))))))
                  (Type_app Std.Prelude.Int ()))
                 (((Fun_call (Name Std.Prelude.Operators.+)
                    (Function
                     ((Type_app Std.Prelude.Int ())
                      (Type_app Std.Prelude.Int ()))
                     (Type_app Std.Prelude.Int ()))
                    (((Name MutualRecursion.acc)
                      (Type_app Std.Prelude.Int ()))
                     ((Fun_call (Name MutualRecursion.sum_tree)
                       (Function
                        ((Type_app MutualRecursion.Tree
                          ((Type_app Std.Prelude.Int ()))))
                        (Type_app Std.Prelude.Int ()))
                       (((Name MutualRecursion.tree)
                         (Type_app MutualRecursion.Tree
                          ((Type_app Std.Prelude.Int ()))))))
                      (Type_app Std.Prelude.Int ()))))
                   (Type_app Std.Prelude.Int ()))
                  ((Name MutualRecursion.trees)
                   (Type_app Std.Prelude.List.List
                    ((Type_app MutualRecursion.Tree
                      ((Type_app Std.Prelude.Int ())))))))))))))))
         (body
          (Lambda ((Catch_all (forest)))
           (Fun_call (Name MutualRecursion.loop)
            (Function
             ((Type_app Std.Prelude.Int ())
              (Type_app Std.Prelude.List.List
               ((Type_app MutualRecursion.Tree
                 ((Type_app Std.Prelude.Int ()))))))
             (Type_app Std.Prelude.Int ()))
            (((Literal (Int 0)) (Type_app Int ()))
             ((Name MutualRecursion.forest)
              (Type_app Std.Prelude.List.List
               ((Type_app MutualRecursion.Tree
                 ((Type_app Std.Prelude.Int ()))))))))))))
       (Function
        ((Type_app Std.Prelude.List.List
          ((Type_app MutualRecursion.Tree ((Type_app Std.Prelude.Int ()))))))
        (Type_app Std.Prelude.Int ()))))
     ((Catch_all (sum_tree))
      ((Lambda ((Catch_all ("")))
        (Match (Name MutualRecursion.)
         (Type_app MutualRecursion.Tree ((Type_app Std.Prelude.Int ())))
         (((Cnstr_appl MutualRecursion.Leaf ()) (Literal (Int 0)))
          ((Cnstr_appl MutualRecursion.Node
            ((Catch_all (x)) (Catch_all (forest))))
           (Fun_call (Name Std.Prelude.Operators.+)
            (Function
             ((Type_app Std.Prelude.Int ()) (Type_app Std.Prelude.Int ()))
             (Type_app Std.Prelude.Int ()))
            (((Name MutualRecursion.x) (Type_app Std.Prelude.Int ()))
             ((Fun_call (Name MutualRecursion.sum_forest)
               (Function
                ((Type_app Std.Prelude.List.List
                  ((Type_app MutualRecursion.Tree
                    ((Type_app Std.Prelude.Int ()))))))
                (Type_app Std.Prelude.Int ()))
               (((Name MutualRecursion.forest)
                 (Type_app MutualRecursion.Forest
                  ((Type_app Std.Prelude.Int ()))))))
              (Type_app Std.Prelude.Int ()))))))))
       (Function
        ((Type_app MutualRecursion.Tree ((Type_app Std.Prelude.Int ()))))
        (Type_app Std.Prelude.Int ())))))))
  (Common_def
   (Type_decl Forest
    ((a)
     (Alias
      (Type_app Std.Prelude.List.List
       ((Type_app MutualRecursion.Tree ((Var a)))))))))
  (Common_def
   (Type_decl Tree
    ((a)
     (Variants
      ((Leaf ())
       (Node ((Var a) (Type_app MutualRecursion.Forest ((Var a))))))))))
  (Let (rec_ false)
   (bindings
    (((Tuple ())
      ((Let
        ((rec_ false)
         (bindings
          ((((Catch_all (tree))
             (Type_app MutualRecursion.Tree ((Type_app Int ()))))
            (Fun_call (Name MutualRecursion.Node)
             (Function
              ((Type_app Int ())
               (Type_app MutualRecursion.Forest ((Type_app Int ()))))
              (Type_app MutualRecursion.Tree ((Type_app Int ()))))
             (((Literal (Int 1)) (Type_app Int ()))
              ((Fun_call (Name Std.Prelude.List.Cons)
                (Function
                 ((Type_app MutualRecursion.Tree ((Type_app Int ())))
                  (Type_app Std.Prelude.List.List
                   ((Type_app MutualRecursion.Tree ((Type_app Int ()))))))
                 (Type_app Std.Prelude.List.List
                  ((Type_app MutualRecursion.Tree ((Type_app Int ()))))))
                (((Name MutualRecursion.Leaf)
                  (Type_app MutualRecursion.Tree ((Type_app Int ()))))
                 ((Fun_call (Name Std.Prelude.List.Cons)
                   (Function
                    ((Type_app MutualRecursion.Tree ((Type_app Int ())))
                     (Type_app Std.Prelude.List.List
                      ((Type_app MutualRecursion.Tree ((Type_app Int ()))))))
                    (Type_app Std.Prelude.List.List
                     ((Type_app MutualRecursion.Tree ((Type_app Int ()))))))
                   (((Fun_call (Name MutualRecursion.Node)
                      (Function
                       ((Type_app Int ())
                        (Type_app MutualRecursion.Forest ((Type_app Int ()))))
                       (Type_app MutualRecursion.Tree ((Type_app Int ()))))
                      (((Literal (Int 17)) (Type_app Int ()))
                       ((Name Std.Prelude.List.Nil)
                        (Type_app Std.Prelude.List.List
                         ((Type_app MutualRecursion.Tree ((Var a))))))))
                     (Type_app MutualRecursion.Tree ((Type_app Int ()))))
                    ((Name Std.Prelude.List.Nil)
                     (Type_app Std.Prelude.List.List
                      ((Type_app MutualRecursion.Tree ((Type_app Int ()))))))))
                  (Type_app Std.Prelude.List.List
                   ((Type_app MutualRecursion.Tree ((Type_app Int ()))))))))
               (Type_app Std.Prelude.List.List
                ((Type_app MutualRecursion.Tree ((Type_app Int ())))))))))))
         (body
          (Fun_call (Name Std.Prelude.print_int)
           (Function ((Type_app Std.Prelude.Int ())) (Tuple ()))
           (((Fun_call (Name MutualRecursion.sum_tree)
              (Function
               ((Type_app MutualRecursion.Tree
                 ((Type_app Std.Prelude.Int ()))))
               (Type_app Std.Prelude.Int ()))
              (((Name MutualRecursion.tree)
                (Type_app MutualRecursion.Tree ((Type_app Int ()))))))
             (Type_app Std.Prelude.Int ())))))))
       (Tuple ()))))))
  (Let (rec_ true)
   (bindings
    (((Catch_all (even))
      ((Lambda ((Catch_all (x)))
        (Match
         (Fun_call (Name Std.Prelude.Operators.==)
          (Function ((Type_app Int ()) (Type_app Int ())) (Type_app Bool ()))
          (((Name MutualRecursion.x) (Type_app Int ()))
           ((Literal (Int 0)) (Type_app Int ()))))
         (Type_app Bool ())
         (((Cnstr_appl True ()) (Name True))
          ((Cnstr_appl False ())
           (Fun_call (Name MutualRecursion.odd)
            (Function ((Type_app Std.Prelude.Int ())) (Type_app Bool ()))
            (((Fun_call (Name Std.Prelude.Operators.-)
               (Function
                ((Type_app Std.Prelude.Int ()) (Type_app Std.Prelude.Int ()))
                (Type_app Std.Prelude.Int ()))
               (((Name MutualRecursion.x) (Type_app Int ()))
                ((Literal (Int 1)) (Type_app Int ()))))
              (Type_app Std.Prelude.Int ()))))))))
       (Function ((Type_app Int ())) (Type_app Bool ()))))
     ((Catch_all (odd))
      ((Lambda ((Catch_all (x)))
        (Match
         (Fun_call (Name Std.Prelude.Operators.==)
          (Function ((Type_app Int ()) (Type_app Int ())) (Type_app Bool ()))
          (((Name MutualRecursion.x) (Type_app Int ()))
           ((Literal (Int 0)) (Type_app Int ()))))
         (Type_app Bool ())
         (((Cnstr_appl True ()) (Name False))
          ((Cnstr_appl False ())
           (Fun_call (Name MutualRecursion.even)
            (Function ((Type_app Int ())) (Type_app Bool ()))
            (((Fun_call (Name Std.Prelude.Operators.-)
               (Function
                ((Type_app Std.Prelude.Int ()) (Type_app Std.Prelude.Int ()))
                (Type_app Std.Prelude.Int ()))
               (((Name MutualRecursion.x) (Type_app Int ()))
                ((Literal (Int 1)) (Type_app Int ()))))
              (Type_app Std.Prelude.Int ()))))))))
       (Function ((Type_app Std.Prelude.Int ())) (Type_app Bool ())))))))
  (Let (rec_ false)
   (bindings
    (((Catch_all (number))
      ((Let
        ((rec_ false)
         (bindings
          ((((Catch_all (number)) (Type_app Int ())) (Literal (Int 5)))))
         (body
          (Let
           ((rec_ false)
            (bindings
             ((((Catch_all (number)) (Type_app Std.Prelude.Int ()))
               (Fun_call (Name Std.Prelude.Operators.+)
                (Function
                 ((Type_app Std.Prelude.Int ())
                  (Type_app Std.Prelude.Int ()))
                 (Type_app Std.Prelude.Int ()))
                (((Name MutualRecursion.number)
                  (Type_app Std.Prelude.Int ()))
                 ((Name MutualRecursion.number)
                  (Type_app Std.Prelude.Int ())))))))
            (body (Name MutualRecursion.number)))))))
       (Type_app Std.Prelude.Int ()))))))))
