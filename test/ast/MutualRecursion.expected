let f : Forest Never = Nil

let sum_forest : List (Tree Int) -> Int =
  let loop : Int, List (Tree Int) -> Int =
    \acc forest ->
      (match forest
      | Nil -> acc
      | Cons tree trees -> loop (acc + (sum_tree tree : Int) : Int) trees)
        : Int
  in
  (\(forest : List (Tree Int)) -> loop 0 forest : Int) : List (Tree Int) -> Int
and sum_tree : Tree Int -> Int =
  match
  | Leaf -> 0
  | Node x forest -> x + (sum_forest forest : Int)

type Forest a = List (Tree a)

type Tree a =
  | Leaf
  | Node a (Forest a)

let () =
  let' tree : Tree Int =
    Node
      1
      (Cons
        Leaf (Cons (Node 17 Nil : Tree Int) Nil : List (Tree Int))
        : List (Tree Int))
  in
  print_int (sum_tree tree : Int)

let even : Int -> Bool =
  \x ->
    (match x == 0 : Bool
    | True -> True
    | False -> odd (x - 1 : Int))
      : Bool
and odd : Int -> Bool =
  \x ->
    (match x == 0 : Bool
    | True -> False
    | False -> even (x - 1 : Int))
      : Bool

let number : Int =
  let' number : Int = 5 in
  let' number : Int = number + number in
  number
