(MutualRecursion ()
 ((Common_def (Val f () (() (Type_app (() Forest) ((Var a))))))
  (Let
   (((Catch_all (f))
     ((Name (() Nil)) (Type_app ((MutualRecursion) Forest) ((Var a)))))))
  (Let
   (((Catch_all (sum_forest))
     ((Let
       ((rec_ true)
        (bindings
         ((((Catch_all (loop))
            (Function (Type_app (() Int) ())
             (Function
              (Type_app ((Std Prelude List) List)
               ((Type_app ((MutualRecursion) Tree) ((Type_app (() Int) ())))))
              (Type_app (() Int) ()))))
           (Lambda (Catch_all (acc))
            (Lambda (Catch_all (""))
             (Match (Name (() ""))
              (((Cnstr_appl (() Nil) ()) (Name (() acc)))
               ((Cnstr_appl (() Cons)
                 ((Catch_all (tree)) (Catch_all (trees))))
                (Fun_call
                 (Fun_call (Name (() loop))
                  (Fun_call (Fun_call (Name (() +)) (Name (() acc)))
                   (Fun_call (Name (() sum_tree)) (Name (() tree)))))
                 (Name (() trees)))))))))))
        (body (Fun_call (Name (() loop)) (Literal (Int 0))))))
      (Function
       (Type_app ((Std Prelude List) List)
        ((Type_app ((MutualRecursion) Tree) ((Type_app (() Int) ())))))
       (Type_app (() Int) ()))))
    ((Catch_all (sum_tree))
     ((Lambda (Catch_all (""))
       (Match (Name (() ""))
        (((Cnstr_appl (() Leaf) ()) (Literal (Int 0)))
         ((Cnstr_appl (() Node) ((Catch_all (x)) (Catch_all (forest))))
          (Fun_call (Fun_call (Name (() +)) (Name (() x)))
           (Fun_call (Name (() sum_forest)) (Name (() forest))))))))
      (Function (Type_app ((MutualRecursion) Tree) ((Type_app (() Int) ())))
       (Type_app (() Int) ()))))))
  (Common_def
   (Type_decl Forest
    ((a) (Alias (Type_app (() List) ((Type_app (() Tree) ((Var a)))))))))
  (Common_def
   (Type_decl Tree
    ((a)
     (Variants ((Leaf ()) (Node ((Var a) (Type_app (() Forest) ((Var a))))))))))
  (Let
   (((Catch_all (even))
     ((Lambda (Catch_all (x))
       (Match
        (Fun_call (Fun_call (Name (() ==)) (Name (() x))) (Literal (Int 0)))
        (((Cnstr_appl (() True) ()) (Name (() True)))
         ((Cnstr_appl (() False) ())
          (Fun_call (Name (() odd))
           (Fun_call (Fun_call (Name (() -)) (Name (() x)))
            (Literal (Int 1))))))))
      (Function (Type_app (() Int) ()) (Type_app (() Bool) ()))))
    ((Catch_all (odd))
     ((Lambda (Catch_all (x))
       (Match
        (Fun_call (Fun_call (Name (() ==)) (Name (() x))) (Literal (Int 0)))
        (((Cnstr_appl (() True) ()) (Name (() False)))
         ((Cnstr_appl (() False) ())
          (Fun_call (Name (() even))
           (Fun_call (Fun_call (Name (() -)) (Name (() x)))
            (Literal (Int 1))))))))
      (Function (Type_app (() Int) ()) (Type_app (() Bool) ()))))))
  (Let
   (((Catch_all (number))
     ((Let
       ((rec_ true)
        (bindings
         ((((Catch_all (number)) (Type_app (() Int) ())) (Literal (Int 5)))))
        (body
         (Let
          ((rec_ false)
           (bindings
            ((((Catch_all (number)) (Type_app (() Int) ()))
              (Fun_call (Fun_call (Name (() +)) (Name (() number)))
               (Name (() number))))))
           (body (Name (() number))))))))
      (Type_app (() Int) ())))))))
