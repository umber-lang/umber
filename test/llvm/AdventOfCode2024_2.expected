; ModuleID = 'examples/AdventOfCode2024_2.um'
source_filename = "examples/AdventOfCode2024_2.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }
%umber_block16b = type { %umber_header, [16 x i8] }
%umber_block8b = type { %umber_header, [8 x i8] }

@AdventOfCode2024_2.Report.MustBeAllSafe = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@AdventOfCode2024_2.Report.AllowOneUnsafe = constant %umber_block* inttoptr (i64 3 to %umber_block*)
@AdventOfCode2024_2.Report.Increasing = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@AdventOfCode2024_2.Report.Decreasing = constant %umber_block* inttoptr (i64 3 to %umber_block*)
@Std.Prelude.Option.None = external global %umber_block*
@"AdventOfCode2024_2.#binding.2" = global %umber_block* null
@Std.Prelude.List.Nil = external global %umber_block*
@"char. " = linkonce_odr constant %umber_block1 { %umber_header { i16 -32766, i16 1, i32 0 }, [1 x i64] [i64 32] }
@int.1 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] [i64 1] }
@int.3 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] [i64 3] }
@int.0 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] zeroinitializer }
@string.382513992 = linkonce_odr constant %umber_block16b { %umber_header { i16 -32764, i16 2, i32 0 }, [16 x i8] c"Part 1: \00\00\00\00\00\00\00\07" }
@string.0 = linkonce_odr constant %umber_block8b { %umber_header { i16 -32764, i16 1, i32 0 }, [8 x i8] c"\00\00\00\00\00\00\00\07" }
@string.506255120 = linkonce_odr constant %umber_block16b { %umber_header { i16 -32764, i16 2, i32 0 }, [16 x i8] c"Part 2: \00\00\00\00\00\00\00\07" }

define i32 @"umber_main:AdventOfCode2024_2"() {
entry:
  %fun_call = tail call tailcc %umber_block* @AdventOfCode2024_2.loop.1(%umber_block* bitcast (%umber_block1* @int.0 to %umber_block*), %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*))
  %block_field_gep = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %fun_call4 = tail call tailcc %umber_block* @Std.Prelude.print_string(%umber_block* bitcast (%umber_block16b* @string.382513992 to %umber_block*))
  %fun_call5 = tail call tailcc %umber_block* @Std.Prelude.print_int(%umber_block* %block_field)
  %fun_call6 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call4, %umber_block* %fun_call5)
  %fun_call7 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* bitcast (%umber_block8b* @string.0 to %umber_block*))
  %fun_call8 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call6, %umber_block* %fun_call7)
  %fun_call9 = tail call tailcc %umber_block* @Std.Prelude.print_string(%umber_block* bitcast (%umber_block16b* @string.506255120 to %umber_block*))
  %fun_call10 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call8, %umber_block* %fun_call9)
  %fun_call11 = tail call tailcc %umber_block* @Std.Prelude.print_int(%umber_block* %block_field3)
  %fun_call12 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call10, %umber_block* %fun_call11)
  %fun_call13 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* bitcast (%umber_block8b* @string.0 to %umber_block*))
  %fun_call14 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call12, %umber_block* %fun_call13)
  store %umber_block* %fun_call14, %umber_block** @"AdventOfCode2024_2.#binding.2", align 8
  ret i32 0
}

declare tailcc %umber_block* @Std.Prelude.List.map(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.String.split(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.Int.of_string(%umber_block*)

define tailcc %umber_block* @AdventOfCode2024_2.Report.parse(%umber_block* %AdventOfCode2024_2.Report.str.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.String.split(%umber_block* %AdventOfCode2024_2.Report.str.1, %umber_block* bitcast (%umber_block1* @"char. " to %umber_block*))
  %fun_call1 = tail call tailcc %umber_block* @Std.Prelude.List.map(%umber_block* %fun_call, %umber_block* bitcast (%umber_block* (%umber_block*)* @Std.Prelude.Int.of_string to %umber_block*))
  ret %umber_block* %fun_call1
}

declare tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.&&"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.>="(%umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.<="(%umber_block*, %umber_block*)

define tailcc %umber_block* @AdventOfCode2024_2.Report.level_pair_is_safe(%umber_block* %"AdventOfCode2024_2.Report.#lambda_arg.1", %umber_block* %AdventOfCode2024_2.Report.dir.1) {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_2.Report.#lambda_arg.1", i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_2.Report.#lambda_arg.1", i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %block_field3, %umber_block* %block_field)
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %AdventOfCode2024_2.Report.dir.14 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.dir.1 to i64
  %equals = icmp eq i64 %AdventOfCode2024_2.Report.dir.14, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call5 = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %block_field, %umber_block* %block_field3)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge6 = phi %umber_block* [ %fun_call, %cond_binding_merge ], [ %fun_call5, %cond_otherwise ]
  %fun_call7 = tail call tailcc %umber_block* @"Std.Prelude.Operators.>="(%umber_block* %cond_otherwise_merge6, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  %fun_call8 = tail call tailcc %umber_block* @"Std.Prelude.Operators.<="(%umber_block* %cond_otherwise_merge6, %umber_block* bitcast (%umber_block1* @int.3 to %umber_block*))
  %fun_call9 = tail call tailcc %umber_block* @"Std.Prelude.Operators.&&"(%umber_block* %fun_call7, %umber_block* %fun_call8)
  ret %umber_block* %fun_call9
}

declare tailcc %umber_block* @"Std.Prelude.Operators.||"(%umber_block*, %umber_block*)

define tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.dir.2, %umber_block* %AdventOfCode2024_2.Report.tolerance.1, %umber_block* %AdventOfCode2024_2.Report.prev.1, %umber_block* %AdventOfCode2024_2.Report.a.2, %umber_block* %AdventOfCode2024_2.Report.b.2, %umber_block* %AdventOfCode2024_2.Report.rest.1) {
entry:
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* %AdventOfCode2024_2.Report.a.2, %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %AdventOfCode2024_2.Report.b.2, %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.level_pair_is_safe(%umber_block* %box6, %umber_block* %AdventOfCode2024_2.Report.dir.2)
  br label %cond20

cond_binding_merge:                               ; preds = %cond_binding23
  br label %cond

cond_binding_merge7:                              ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %cond_binding_merge
  %AdventOfCode2024_2.Report.rest.18 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.rest.1 to i64
  %equals = icmp eq i64 %AdventOfCode2024_2.Report.rest.18, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge7

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.rest.1, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep9 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.rest.1, i32 0, i32 1, i32 0
  %block_field_raw10 = load i64, i64* %block_field_gep9, align 8
  %block_field11 = inttoptr i64 %block_field_raw10 to %umber_block*
  %box12 = call i64* @umber_gc_alloc(i64 16)
  %box13 = bitcast i64* %box12 to i16*
  store i16 0, i16* %box13, align 2
  %box14 = getelementptr i16, i16* %box13, i32 1
  store i16 1, i16* %box14, align 2
  %box15 = bitcast i64* %box12 to %umber_block**
  %box16 = getelementptr %umber_block*, %umber_block** %box15, i32 1
  store %umber_block* %AdventOfCode2024_2.Report.a.2, %umber_block** %box16, align 8
  %box17 = bitcast %umber_block** %box15 to %umber_block*
  %fun_call18 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.dir.2, %umber_block* %AdventOfCode2024_2.Report.tolerance.1, %umber_block* %box17, %umber_block* %AdventOfCode2024_2.Report.b.2, %umber_block* %block_field11, %umber_block* %block_field)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge7
  %cond_otherwise_merge19 = phi %umber_block* [ inttoptr (i64 3 to %umber_block*), %cond_binding_merge7 ], [ %fun_call18, %cond_otherwise ]
  br label %cond_otherwise_merge65

cond20:                                           ; preds = %entry
  %fun_call21 = ptrtoint %umber_block* %fun_call to i64
  %equals22 = icmp eq i64 %fun_call21, 3
  br i1 %equals22, label %cond_binding23, label %cond_otherwise24

cond_binding23:                                   ; preds = %cond20
  br label %cond_binding_merge

cond_otherwise24:                                 ; preds = %cond20
  br label %cond26

cond_binding_merge25:                             ; preds = %cond_binding29
  br label %cond_otherwise_merge63

cond26:                                           ; preds = %cond_otherwise24
  %AdventOfCode2024_2.Report.tolerance.127 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.tolerance.1 to i64
  %equals28 = icmp eq i64 %AdventOfCode2024_2.Report.tolerance.127, 1
  br i1 %equals28, label %cond_binding29, label %cond_otherwise30

cond_binding29:                                   ; preds = %cond26
  br label %cond_binding_merge25

cond_otherwise30:                                 ; preds = %cond26
  br label %cond32

cond_binding_merge31:                             ; preds = %cond_binding35
  br label %cond_otherwise_merge61

cond32:                                           ; preds = %cond_otherwise30
  %AdventOfCode2024_2.Report.rest.133 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.rest.1 to i64
  %equals34 = icmp eq i64 %AdventOfCode2024_2.Report.rest.133, 1
  br i1 %equals34, label %cond_binding35, label %cond_otherwise36

cond_binding35:                                   ; preds = %cond32
  br label %cond_binding_merge31

cond_otherwise36:                                 ; preds = %cond32
  %block_field_gep37 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.rest.1, i32 0, i32 1, i32 1
  %block_field_raw38 = load i64, i64* %block_field_gep37, align 8
  %block_field39 = inttoptr i64 %block_field_raw38 to %umber_block*
  %block_field_gep40 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.rest.1, i32 0, i32 1, i32 0
  %block_field_raw41 = load i64, i64* %block_field_gep40, align 8
  %block_field42 = inttoptr i64 %block_field_raw41 to %umber_block*
  %AdventOfCode2024_2.Report.MustBeAllSafe = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.MustBeAllSafe, align 8
  %fun_call43 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.dir.2, %umber_block* %AdventOfCode2024_2.Report.MustBeAllSafe, %umber_block* %AdventOfCode2024_2.Report.prev.1, %umber_block* %AdventOfCode2024_2.Report.a.2, %umber_block* %block_field42, %umber_block* %block_field39)
  br label %cond47

cond_binding_merge44:                             ; preds = %cond_binding50
  %cond_bindings = phi %umber_block* [ %AdventOfCode2024_2.Report.prev.2, %cond_binding50 ]
  %AdventOfCode2024_2.Report.MustBeAllSafe45 = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.MustBeAllSafe, align 8
  %Std.Prelude.Option.None = load %umber_block*, %umber_block** @Std.Prelude.Option.None, align 8
  %fun_call46 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.dir.2, %umber_block* %AdventOfCode2024_2.Report.MustBeAllSafe45, %umber_block* %Std.Prelude.Option.None, %umber_block* %cond_bindings, %umber_block* %AdventOfCode2024_2.Report.b.2, %umber_block* %AdventOfCode2024_2.Report.rest.1)
  br label %cond_otherwise_merge58

cond47:                                           ; preds = %cond_otherwise36
  %AdventOfCode2024_2.Report.prev.148 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.prev.1 to i64
  %bottom_bit = and i64 %AdventOfCode2024_2.Report.prev.148, 1
  %bottom_bit_set = icmp eq i64 %bottom_bit, 0
  %tag_gep = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.prev.1, i32 0, i32 0, i32 0
  %tag = load i16, i16* %tag_gep, align 2
  %equals49 = icmp eq i16 %tag, 0
  %non_constant_tag_equals = select i1 %bottom_bit_set, i1 %equals49, i1 false
  br i1 %non_constant_tag_equals, label %cond_binding50, label %cond_otherwise54

cond_binding50:                                   ; preds = %cond47
  %block_field_gep51 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.prev.1, i32 0, i32 1, i32 0
  %block_field_raw52 = load i64, i64* %block_field_gep51, align 8
  %AdventOfCode2024_2.Report.prev.2 = inttoptr i64 %block_field_raw52 to %umber_block*
  br label %cond_binding_merge44

cond_otherwise54:                                 ; preds = %cond47
  %AdventOfCode2024_2.Report.MustBeAllSafe55 = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.MustBeAllSafe, align 8
  %Std.Prelude.Option.None56 = load %umber_block*, %umber_block** @Std.Prelude.Option.None, align 8
  %fun_call57 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.dir.2, %umber_block* %AdventOfCode2024_2.Report.MustBeAllSafe55, %umber_block* %Std.Prelude.Option.None56, %umber_block* %AdventOfCode2024_2.Report.b.2, %umber_block* %block_field42, %umber_block* %block_field39)
  br label %cond_otherwise_merge58

cond_otherwise_merge58:                           ; preds = %cond_otherwise54, %cond_binding_merge44
  %cond_otherwise_merge59 = phi %umber_block* [ %fun_call46, %cond_binding_merge44 ], [ %fun_call57, %cond_otherwise54 ]
  %fun_call60 = tail call tailcc %umber_block* @"Std.Prelude.Operators.||"(%umber_block* %fun_call43, %umber_block* %cond_otherwise_merge59)
  br label %cond_otherwise_merge61

cond_otherwise_merge61:                           ; preds = %cond_otherwise_merge58, %cond_binding_merge31
  %cond_otherwise_merge62 = phi %umber_block* [ inttoptr (i64 3 to %umber_block*), %cond_binding_merge31 ], [ %fun_call60, %cond_otherwise_merge58 ]
  br label %cond_otherwise_merge63

cond_otherwise_merge63:                           ; preds = %cond_otherwise_merge61, %cond_binding_merge25
  %cond_otherwise_merge64 = phi %umber_block* [ inttoptr (i64 1 to %umber_block*), %cond_binding_merge25 ], [ %cond_otherwise_merge62, %cond_otherwise_merge61 ]
  br label %cond_otherwise_merge65

cond_otherwise_merge65:                           ; preds = %cond_otherwise_merge63, %cond_otherwise_merge
  %cond_otherwise_merge66 = phi %umber_block* [ %cond_otherwise_merge19, %cond_otherwise_merge ], [ %cond_otherwise_merge64, %cond_otherwise_merge63 ]
  ret %umber_block* %cond_otherwise_merge66
}

define tailcc %umber_block* @AdventOfCode2024_2.Report.is_safe(%umber_block* %AdventOfCode2024_2.Report.reports.1, %umber_block* %AdventOfCode2024_2.Report.tolerance.2) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding7, %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %AdventOfCode2024_2.Report.reports.11 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.reports.1 to i64
  %equals = icmp eq i64 %AdventOfCode2024_2.Report.reports.11, 1
  br i1 %equals, label %cond_binding, label %cond2

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond2:                                            ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.reports.1, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field3 = ptrtoint %umber_block* %block_field to i64
  %equals4 = icmp eq i64 %block_field3, 1
  %AdventOfCode2024_2.Report.reports.15 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.reports.1 to i64
  %bottom_bit = and i64 %AdventOfCode2024_2.Report.reports.15, 1
  %bottom_bit_set = icmp eq i64 %bottom_bit, 0
  %tag_gep = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.reports.1, i32 0, i32 0, i32 0
  %tag = load i16, i16* %tag_gep, align 2
  %equals6 = icmp eq i16 %tag, 0
  %non_constant_tag_equals = select i1 %bottom_bit_set, i1 %equals6, i1 false
  %cond_and = and i1 %non_constant_tag_equals, %equals4
  br i1 %cond_and, label %cond_binding7, label %cond_otherwise

cond_binding7:                                    ; preds = %cond2
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond2
  %block_field_gep8 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.reports.1, i32 0, i32 1, i32 1
  %block_field_raw9 = load i64, i64* %block_field_gep8, align 8
  %block_field10 = inttoptr i64 %block_field_raw9 to %umber_block*
  %block_field_gep11 = getelementptr %umber_block, %umber_block* %block_field10, i32 0, i32 1, i32 1
  %block_field_raw12 = load i64, i64* %block_field_gep11, align 8
  %block_field13 = inttoptr i64 %block_field_raw12 to %umber_block*
  %block_field_gep14 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.reports.1, i32 0, i32 1, i32 1
  %block_field_raw15 = load i64, i64* %block_field_gep14, align 8
  %block_field16 = inttoptr i64 %block_field_raw15 to %umber_block*
  %block_field_gep17 = getelementptr %umber_block, %umber_block* %block_field16, i32 0, i32 1, i32 0
  %block_field_raw18 = load i64, i64* %block_field_gep17, align 8
  %block_field19 = inttoptr i64 %block_field_raw18 to %umber_block*
  %block_field_gep20 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.reports.1, i32 0, i32 1, i32 0
  %block_field_raw21 = load i64, i64* %block_field_gep20, align 8
  %block_field22 = inttoptr i64 %block_field_raw21 to %umber_block*
  %AdventOfCode2024_2.Report.Increasing = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.Increasing, align 8
  %Std.Prelude.Option.None = load %umber_block*, %umber_block** @Std.Prelude.Option.None, align 8
  %fun_call = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.Increasing, %umber_block* %AdventOfCode2024_2.Report.tolerance.2, %umber_block* %Std.Prelude.Option.None, %umber_block* %block_field22, %umber_block* %block_field19, %umber_block* %block_field13)
  %AdventOfCode2024_2.Report.Decreasing = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.Decreasing, align 8
  %Std.Prelude.Option.None23 = load %umber_block*, %umber_block** @Std.Prelude.Option.None, align 8
  %fun_call24 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.check_loop.1(%umber_block* %AdventOfCode2024_2.Report.Decreasing, %umber_block* %AdventOfCode2024_2.Report.tolerance.2, %umber_block* %Std.Prelude.Option.None23, %umber_block* %block_field22, %umber_block* %block_field19, %umber_block* %block_field13)
  %fun_call25 = tail call tailcc %umber_block* @"Std.Prelude.Operators.||"(%umber_block* %fun_call, %umber_block* %fun_call24)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge26 = phi %umber_block* [ inttoptr (i64 3 to %umber_block*), %cond_binding_merge ], [ %fun_call25, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge26
}

declare tailcc %umber_block* @Std.Prelude.read_line(%umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block*, %umber_block*)

define tailcc %umber_block* @AdventOfCode2024_2.loop.1(%umber_block* %AdventOfCode2024_2.count1.1, %umber_block* %AdventOfCode2024_2.count2.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.read_line(%umber_block* inttoptr (i64 1 to %umber_block*))
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* %AdventOfCode2024_2.count1.1, %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %AdventOfCode2024_2.count2.1, %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  br label %cond_otherwise_merge29

cond:                                             ; preds = %entry
  %fun_call7 = ptrtoint %umber_block* %fun_call to i64
  %equals = icmp eq i64 %fun_call7, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %fun_call8 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.parse(%umber_block* %block_field)
  %AdventOfCode2024_2.Report.MustBeAllSafe = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.MustBeAllSafe, align 8
  %fun_call9 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.is_safe(%umber_block* %fun_call8, %umber_block* %AdventOfCode2024_2.Report.MustBeAllSafe)
  br label %cond12

cond_binding_merge10:                             ; preds = %cond_binding15
  %fun_call11 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %AdventOfCode2024_2.count1.1, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  br label %cond_otherwise_merge

cond12:                                           ; preds = %cond_otherwise
  %fun_call913 = ptrtoint %umber_block* %fun_call9 to i64
  %equals14 = icmp eq i64 %fun_call913, 3
  br i1 %equals14, label %cond_binding15, label %cond_otherwise16

cond_binding15:                                   ; preds = %cond12
  br label %cond_binding_merge10

cond_otherwise16:                                 ; preds = %cond12
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise16, %cond_binding_merge10
  %cond_otherwise_merge17 = phi %umber_block* [ %fun_call11, %cond_binding_merge10 ], [ %AdventOfCode2024_2.count1.1, %cond_otherwise16 ]
  %AdventOfCode2024_2.Report.AllowOneUnsafe = load %umber_block*, %umber_block** @AdventOfCode2024_2.Report.AllowOneUnsafe, align 8
  %fun_call18 = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.is_safe(%umber_block* %fun_call8, %umber_block* %AdventOfCode2024_2.Report.AllowOneUnsafe)
  br label %cond21

cond_binding_merge19:                             ; preds = %cond_binding24
  %fun_call20 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %AdventOfCode2024_2.count2.1, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  br label %cond_otherwise_merge26

cond21:                                           ; preds = %cond_otherwise_merge
  %fun_call1822 = ptrtoint %umber_block* %fun_call18 to i64
  %equals23 = icmp eq i64 %fun_call1822, 3
  br i1 %equals23, label %cond_binding24, label %cond_otherwise25

cond_binding24:                                   ; preds = %cond21
  br label %cond_binding_merge19

cond_otherwise25:                                 ; preds = %cond21
  br label %cond_otherwise_merge26

cond_otherwise_merge26:                           ; preds = %cond_otherwise25, %cond_binding_merge19
  %cond_otherwise_merge27 = phi %umber_block* [ %fun_call20, %cond_binding_merge19 ], [ %AdventOfCode2024_2.count2.1, %cond_otherwise25 ]
  %fun_call28 = tail call tailcc %umber_block* @AdventOfCode2024_2.loop.1(%umber_block* %cond_otherwise_merge17, %umber_block* %cond_otherwise_merge27)
  br label %cond_otherwise_merge29

cond_otherwise_merge29:                           ; preds = %cond_otherwise_merge26, %cond_binding_merge
  %cond_otherwise_merge30 = phi %umber_block* [ %box6, %cond_binding_merge ], [ %fun_call28, %cond_otherwise_merge26 ]
  ret %umber_block* %cond_otherwise_merge30
}

declare tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.print_string(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.print_int(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.print(%umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.::"(%umber_block*, %umber_block*)

define tailcc %umber_block* @AdventOfCode2024_2.Report.pairs(%umber_block* %AdventOfCode2024_2.Report.xs.1) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding7, %cond_binding
  %Std.Prelude.List.Nil = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %AdventOfCode2024_2.Report.xs.11 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.xs.1 to i64
  %equals = icmp eq i64 %AdventOfCode2024_2.Report.xs.11, 1
  br i1 %equals, label %cond_binding, label %cond2

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond2:                                            ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.xs.1, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field3 = ptrtoint %umber_block* %block_field to i64
  %equals4 = icmp eq i64 %block_field3, 1
  %AdventOfCode2024_2.Report.xs.15 = ptrtoint %umber_block* %AdventOfCode2024_2.Report.xs.1 to i64
  %bottom_bit = and i64 %AdventOfCode2024_2.Report.xs.15, 1
  %bottom_bit_set = icmp eq i64 %bottom_bit, 0
  %tag_gep = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.xs.1, i32 0, i32 0, i32 0
  %tag = load i16, i16* %tag_gep, align 2
  %equals6 = icmp eq i16 %tag, 0
  %non_constant_tag_equals = select i1 %bottom_bit_set, i1 %equals6, i1 false
  %cond_and = and i1 %non_constant_tag_equals, %equals4
  br i1 %cond_and, label %cond_binding7, label %cond_otherwise

cond_binding7:                                    ; preds = %cond2
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond2
  %block_field_gep8 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.xs.1, i32 0, i32 1, i32 1
  %block_field_raw9 = load i64, i64* %block_field_gep8, align 8
  %block_field10 = inttoptr i64 %block_field_raw9 to %umber_block*
  %block_field_gep11 = getelementptr %umber_block, %umber_block* %block_field10, i32 0, i32 1, i32 0
  %block_field_raw12 = load i64, i64* %block_field_gep11, align 8
  %block_field13 = inttoptr i64 %block_field_raw12 to %umber_block*
  %block_field_gep14 = getelementptr %umber_block, %umber_block* %AdventOfCode2024_2.Report.xs.1, i32 0, i32 1, i32 0
  %block_field_raw15 = load i64, i64* %block_field_gep14, align 8
  %block_field16 = inttoptr i64 %block_field_raw15 to %umber_block*
  %box = call i64* @umber_gc_alloc(i64 24)
  %box17 = bitcast i64* %box to i16*
  store i16 0, i16* %box17, align 2
  %box18 = getelementptr i16, i16* %box17, i32 1
  store i16 2, i16* %box18, align 2
  %box19 = bitcast i64* %box to %umber_block**
  %box20 = getelementptr %umber_block*, %umber_block** %box19, i32 1
  store %umber_block* %block_field16, %umber_block** %box20, align 8
  %box21 = getelementptr %umber_block*, %umber_block** %box19, i32 2
  store %umber_block* %block_field13, %umber_block** %box21, align 8
  %box22 = bitcast %umber_block** %box19 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @AdventOfCode2024_2.Report.pairs(%umber_block* %block_field10)
  %fun_call23 = tail call tailcc %umber_block* @"Std.Prelude.Operators.::"(%umber_block* %box22, %umber_block* %fun_call)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge24 = phi %umber_block* [ %Std.Prelude.List.Nil, %cond_binding_merge ], [ %fun_call23, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge24
}

declare i64* @umber_gc_alloc(i64)

define linkonce_odr %umber_block* @umber_apply2(%umber_block* %0, %umber_block* %1, %umber_block* %2) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1, %umber_block* %2)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*, %umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1, %umber_block* %2)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

