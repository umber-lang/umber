; ModuleID = './examples/TypeChecking.um'
source_filename = "./examples/TypeChecking.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@TypeChecking.id_for_chars.1 = constant %umber_block* bitcast (%umber_block* (%umber_block*)* @TypeChecking.id to %umber_block*)
@"*binding" = global %umber_block* null
@TypeChecking.id_alias = global %umber_block* null
@TypeChecking.five = global %umber_block* null
@int.5 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 5 }

define i32 @"umber_main:./examples/TypeChecking.um"() {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 3))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*)* @TypeChecking.id to %umber_block*), %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* bitcast (%umber_block1* @int.5 to %umber_block*), %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  store %umber_block* %box6, %umber_block** @"*binding", align 8
  %"*binding" = load %umber_block*, %umber_block** @"*binding", align 8
  %block_field_gep = getelementptr %umber_block, %umber_block* %"*binding", i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  store %umber_block* %block_field, %umber_block** @TypeChecking.id_alias, align 8
  %"*binding7" = load %umber_block*, %umber_block** @"*binding", align 8
  %block_field_gep8 = getelementptr %umber_block, %umber_block* %"*binding7", i32 0, i32 1, i32 1
  %block_field_raw9 = load i64, i64* %block_field_gep8, align 8
  %block_field10 = inttoptr i64 %block_field_raw9 to %umber_block*
  store %umber_block* %block_field10, %umber_block** @TypeChecking.five, align 8
  ret i32 0
}

define tailcc %umber_block* @TypeChecking.id(%umber_block* %TypeChecking.x) {
entry:
  ret %umber_block* %TypeChecking.x
}

define tailcc %umber_block* @TypeChecking.id_for_ints(%umber_block* %TypeChecking.x.1) {
entry:
  ret %umber_block* %TypeChecking.x.1
}

define tailcc %umber_block* @TypeChecking.id_for_floats(%umber_block* %TypeChecking.x.2) {
entry:
  ret %umber_block* %TypeChecking.x.2
}

define tailcc %umber_block* @TypeChecking.id_for_chars(%umber_block* %arg0) {
entry:
  %TypeChecking.id_for_chars.1 = load %umber_block*, %umber_block** @TypeChecking.id_for_chars.1, align 8
  %fun_call = tail call tailcc %umber_block* @umber_apply1(%umber_block* %TypeChecking.id_for_chars.1, %umber_block* %arg0)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @TypeChecking.id_for_bools(%umber_block* %TypeChecking.x.3) {
entry:
  %fun_call = tail call tailcc %umber_block* @TypeChecking.id(%umber_block* %TypeChecking.x.3)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @"TypeChecking.|>"(%umber_block* %TypeChecking.x.4, %umber_block* %TypeChecking.f) {
entry:
  %fun_call = tail call tailcc %umber_block* @umber_apply1(%umber_block* %TypeChecking.f, %umber_block* %TypeChecking.x.4)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @"*fun"(%umber_block* %"*closure_env", %umber_block* %TypeChecking.) {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"*closure_env", i32 0, i32 1, i32 2
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %"*closure_env", i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  %fun_call = tail call tailcc %umber_block* @umber_apply1(%umber_block* %block_field, %umber_block* inttoptr (i64 1 to %umber_block*))
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %TypeChecking.4 = ptrtoint %umber_block* %TypeChecking. to i64
  %equals = icmp eq i64 %TypeChecking.4, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call5 = tail call tailcc %umber_block* @umber_apply1(%umber_block* %block_field3, %umber_block* inttoptr (i64 1 to %umber_block*))
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge6 = phi %umber_block* [ %fun_call, %cond_binding_merge ], [ %fun_call5, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge6
}

define tailcc %umber_block* @TypeChecking.if_(%umber_block* %TypeChecking.then_, %umber_block* %TypeChecking.else_) {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 4))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 12289, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 3, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"*fun" to %umber_block*), %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %TypeChecking.else_, %umber_block** %box5, align 8
  %box6 = getelementptr %umber_block*, %umber_block** %box3, i32 3
  store %umber_block* %TypeChecking.then_, %umber_block** %box6, align 8
  %box7 = bitcast %umber_block** %box3 to %umber_block*
  ret %umber_block* %box7
}

define tailcc %umber_block* @"TypeChecking.if'"(%umber_block* %TypeChecking.then_.2, %umber_block* %TypeChecking.else_.2, %umber_block* %TypeChecking.cond) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  %fun_call = tail call tailcc %umber_block* @umber_apply1(%umber_block* %TypeChecking.then_.2, %umber_block* inttoptr (i64 1 to %umber_block*))
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %TypeChecking.cond1 = ptrtoint %umber_block* %TypeChecking.cond to i64
  %equals = icmp eq i64 %TypeChecking.cond1, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call2 = tail call tailcc %umber_block* @umber_apply1(%umber_block* %TypeChecking.else_.2, %umber_block* inttoptr (i64 1 to %umber_block*))
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge3 = phi %umber_block* [ %fun_call, %cond_binding_merge ], [ %fun_call2, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge3
}

define linkonce_odr tailcc %umber_block* @umber_apply1(%umber_block* %0, %umber_block* %1) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

declare noalias i8* @malloc(i32)

