; ModuleID = './examples/AsPattern.um'
source_filename = "./examples/AsPattern.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@AsPattern.pair = global %umber_block* null
@AsPattern.one = global %umber_block* null
@AsPattern.two = global %umber_block* null
@int.1 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 1 }
@int.2 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 2 }

define i32 @"umber_main:./examples/AsPattern.um"() {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 3))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*), %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* bitcast (%umber_block1* @int.2 to %umber_block*), %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  store %umber_block* %box6, %umber_block** @AsPattern.pair, align 8
  %AsPattern.pair = load %umber_block*, %umber_block** @AsPattern.pair, align 8
  %block_field_gep = getelementptr %umber_block, %umber_block* %AsPattern.pair, i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  store %umber_block* %block_field, %umber_block** @AsPattern.one, align 8
  %AsPattern.pair7 = load %umber_block*, %umber_block** @AsPattern.pair, align 8
  %block_field_gep8 = getelementptr %umber_block, %umber_block* %AsPattern.pair7, i32 0, i32 1, i32 1
  %block_field_raw9 = load i64, i64* %block_field_gep8, align 8
  %block_field10 = inttoptr i64 %block_field_raw9 to %umber_block*
  store %umber_block* %block_field10, %umber_block** @AsPattern.two, align 8
  ret i32 0
}

declare tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.::"(%umber_block*, %umber_block*)

define tailcc %umber_block* @AsPattern.iter_pairs(%umber_block* %AsPattern.f, %umber_block* %AsPattern.lst) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding6, %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %AsPattern.lst1 = ptrtoint %umber_block* %AsPattern.lst to i64
  %equals = icmp eq i64 %AsPattern.lst1, 1
  br i1 %equals, label %cond_binding, label %cond2

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond2:                                            ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %AsPattern.lst, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field3 = ptrtoint %umber_block* %block_field to i64
  %equals4 = icmp eq i64 %block_field3, 1
  %tag_gep = getelementptr %umber_block, %umber_block* %AsPattern.lst, i32 0, i32 0, i32 0
  %tag = load i16, i16* %tag_gep, align 2
  %equals5 = icmp eq i16 %tag, 0
  %cond_and = and i1 %equals5, %equals4
  br i1 %cond_and, label %cond_binding6, label %cond_otherwise

cond_binding6:                                    ; preds = %cond2
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond2
  %block_field_gep7 = getelementptr %umber_block, %umber_block* %AsPattern.lst, i32 0, i32 1, i32 1
  %block_field_raw8 = load i64, i64* %block_field_gep7, align 8
  %block_field9 = inttoptr i64 %block_field_raw8 to %umber_block*
  %block_field_gep10 = getelementptr %umber_block, %umber_block* %block_field9, i32 0, i32 1, i32 1
  %block_field_raw11 = load i64, i64* %block_field_gep10, align 8
  %block_field12 = inttoptr i64 %block_field_raw11 to %umber_block*
  %block_field_gep13 = getelementptr %umber_block, %umber_block* %AsPattern.lst, i32 0, i32 1, i32 1
  %block_field_raw14 = load i64, i64* %block_field_gep13, align 8
  %block_field15 = inttoptr i64 %block_field_raw14 to %umber_block*
  %block_field_gep16 = getelementptr %umber_block, %umber_block* %block_field15, i32 0, i32 1, i32 0
  %block_field_raw17 = load i64, i64* %block_field_gep16, align 8
  %block_field18 = inttoptr i64 %block_field_raw17 to %umber_block*
  %block_field_gep19 = getelementptr %umber_block, %umber_block* %AsPattern.lst, i32 0, i32 1, i32 0
  %block_field_raw20 = load i64, i64* %block_field_gep19, align 8
  %block_field21 = inttoptr i64 %block_field_raw20 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @umber_apply2(%umber_block* %AsPattern.f, %umber_block* %block_field21, %umber_block* %block_field18)
  %fun_call22 = tail call tailcc %umber_block* @"Std.Prelude.Operators.::"(%umber_block* %block_field18, %umber_block* %block_field12)
  %fun_call23 = tail call tailcc %umber_block* @AsPattern.iter_pairs(%umber_block* %AsPattern.f, %umber_block* %fun_call22)
  %fun_call24 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call, %umber_block* %fun_call23)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge25 = phi %umber_block* [ inttoptr (i64 1 to %umber_block*), %cond_binding_merge ], [ %fun_call24, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge25
}

declare noalias i8* @malloc(i32)

define linkonce_odr tailcc %umber_block* @umber_apply2(%umber_block* %0, %umber_block* %1, %umber_block* %2) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1, %umber_block* %2)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*, %umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1, %umber_block* %2)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

