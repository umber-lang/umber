; ModuleID = './examples/Basics.um'
source_filename = "./examples/Basics.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@Basics.false.0 = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@Basics.true.0 = constant %umber_block* inttoptr (i64 3 to %umber_block*)
@Basics._.0 = global %umber_block* null
@Basics.Red.0 = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@Basics.Blue.0 = constant %umber_block* inttoptr (i64 3 to %umber_block*)
@Basics.Green.0 = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@Basics.Yellow.0 = constant %umber_block* inttoptr (i64 3 to %umber_block*)
@Basics.Purple.0 = constant %umber_block* inttoptr (i64 5 to %umber_block*)
@Basics.xyz.0 = global %umber_block* null
@float.1. = constant %umber_block1 { %umber_header { i16 -32765, i16 1, i32 0 }, double 1.000000e+00 }
@float.2.5 = constant %umber_block1 { %umber_header { i16 -32765, i16 1, i32 0 }, double 2.500000e+00 }
@int.1 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 1 }
@int.2 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 2 }
@int.3 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 3 }

define i32 @"main./examples/Basics.um"() {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %Basics.false.0 = load %umber_block*, %umber_block** @Basics.false.0, align 8
  %Basics.false.01 = ptrtoint %umber_block* %Basics.false.0 to i64
  %equals = icmp eq i64 %Basics.false.01, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge2 = phi %umber_block* [ bitcast (%umber_block1* @float.1. to %umber_block*), %cond_binding_merge ], [ bitcast (%umber_block1* @float.2.5 to %umber_block*), %cond_otherwise ]
  store %umber_block* %cond_otherwise_merge2, %umber_block** @Basics._.0, align 8
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 4))
  %box = bitcast i8* %malloccall to i64*
  %box3 = bitcast i64* %box to i16*
  store i16 0, i16* %box3, align 2
  %box4 = getelementptr i16, i16* %box3, i64 1
  store i16 3, i16* %box4, align 2
  %box5 = bitcast i64* %box to %umber_block**
  %box6 = getelementptr %umber_block*, %umber_block** %box5, i64 1
  store %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*), %umber_block** %box6, align 8
  %box7 = bitcast i64* %box to %umber_block**
  %box8 = getelementptr %umber_block*, %umber_block** %box7, i64 2
  store %umber_block* bitcast (%umber_block1* @int.2 to %umber_block*), %umber_block** %box8, align 8
  %box9 = bitcast i64* %box to %umber_block**
  %box10 = getelementptr %umber_block*, %umber_block** %box9, i64 3
  store %umber_block* bitcast (%umber_block1* @int.3 to %umber_block*), %umber_block** %box10, align 8
  %box11 = bitcast i64* %box to %umber_block*
  store %umber_block* %box11, %umber_block** @Basics.xyz.0, align 8
  ret i32 0
}

define tailcc %umber_block* @Basics.Regular.0(%umber_block* %arg0.0) {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 2))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i64 1
  store i16 1, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i64 1
  store %umber_block* %arg0.0, %umber_block** %box4, align 8
  %box5 = bitcast i64* %box to %umber_block*
  ret %umber_block* %box5
}

define tailcc %umber_block* @Basics.Expanded.0(%umber_block* %arg0.1) {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 2))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 1, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i64 1
  store i16 1, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i64 1
  store %umber_block* %arg0.1, %umber_block** %box4, align 8
  %box5 = bitcast i64* %box to %umber_block*
  ret %umber_block* %box5
}

define tailcc %umber_block* @Basics.Point3.0(%umber_block* %arg0.2, %umber_block* %arg1.0, %umber_block* %arg2.0) {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 4))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i64 1
  store i16 3, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i64 1
  store %umber_block* %arg0.2, %umber_block** %box4, align 8
  %box5 = bitcast i64* %box to %umber_block**
  %box6 = getelementptr %umber_block*, %umber_block** %box5, i64 2
  store %umber_block* %arg1.0, %umber_block** %box6, align 8
  %box7 = bitcast i64* %box to %umber_block**
  %box8 = getelementptr %umber_block*, %umber_block** %box7, i64 3
  store %umber_block* %arg2.0, %umber_block** %box8, align 8
  %box9 = bitcast i64* %box to %umber_block*
  ret %umber_block* %box9
}

declare noalias i8* @malloc(i32)

