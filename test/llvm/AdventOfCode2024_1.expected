; ModuleID = 'examples/AdventOfCode2024_1.um'
source_filename = "examples/AdventOfCode2024_1.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }
%umber_block16b = type { %umber_header, [16 x i8] }
%umber_block8b = type { %umber_header, [8 x i8] }

@Std.Prelude.List.Nil = external global %umber_block*
@AdventOfCode2024_1.input = global %umber_block* null
@"AdventOfCode2024_1.#binding.3" = global %umber_block* null
@"char. " = linkonce_odr constant %umber_block1 { %umber_header { i16 -32766, i16 1, i32 0 }, [1 x i64] [i64 32] }
@int.0 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] zeroinitializer }
@string.382513992 = linkonce_odr constant %umber_block16b { %umber_header { i16 -32764, i16 2, i32 0 }, [16 x i8] c"Part 1: \00\00\00\00\00\00\00\07" }
@string.406032834 = linkonce_odr constant %umber_block16b { %umber_header { i16 -32764, i16 2, i32 0 }, [16 x i8] c"\0APart 2: \00\00\00\00\00\00\06" }
@string.0 = linkonce_odr constant %umber_block8b { %umber_header { i16 -32764, i16 1, i32 0 }, [8 x i8] c"\00\00\00\00\00\00\00\07" }

define i32 @"umber_main:AdventOfCode2024_1"() {
entry:
  %Std.Prelude.List.Nil = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  %fun_call = tail call tailcc %umber_block* @AdventOfCode2024_1.loop.1(%umber_block* %Std.Prelude.List.Nil)
  store %umber_block* %fun_call, %umber_block** @AdventOfCode2024_1.input, align 8
  %fun_call1 = tail call tailcc %umber_block* @Std.Prelude.print_string(%umber_block* bitcast (%umber_block16b* @string.382513992 to %umber_block*))
  %AdventOfCode2024_1.input = load %umber_block*, %umber_block** @AdventOfCode2024_1.input, align 8
  %fun_call2 = tail call tailcc %umber_block* @AdventOfCode2024_1.solve_part_1(%umber_block* %AdventOfCode2024_1.input)
  %fun_call3 = tail call tailcc %umber_block* @Std.Prelude.print_int(%umber_block* %fun_call2)
  %fun_call4 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call1, %umber_block* %fun_call3)
  %fun_call5 = tail call tailcc %umber_block* @Std.Prelude.print_string(%umber_block* bitcast (%umber_block16b* @string.406032834 to %umber_block*))
  %fun_call6 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call4, %umber_block* %fun_call5)
  %AdventOfCode2024_1.input7 = load %umber_block*, %umber_block** @AdventOfCode2024_1.input, align 8
  %fun_call8 = tail call tailcc %umber_block* @AdventOfCode2024_1.solve_part_2(%umber_block* %AdventOfCode2024_1.input7)
  %fun_call9 = tail call tailcc %umber_block* @Std.Prelude.print_int(%umber_block* %fun_call8)
  %fun_call10 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call6, %umber_block* %fun_call9)
  %fun_call11 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* bitcast (%umber_block8b* @string.0 to %umber_block*))
  %fun_call12 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call10, %umber_block* %fun_call11)
  store %umber_block* %fun_call12, %umber_block** @"AdventOfCode2024_1.#binding.3", align 8
  ret i32 0
}

declare tailcc %umber_block* @Std.Prelude.read_line(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.List.reverse(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.List.map(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.List.filter(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.String.split(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.Operators..(%umber_block*, %umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.Operators.not(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.String.is_empty(%umber_block*)

define tailcc %umber_block* @"AdventOfCode2024_1.#fun.3"(%umber_block* %"AdventOfCode2024_1.#closure_env.1", %umber_block* %"AdventOfCode2024_1.#arg2.1") {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#closure_env.1", i32 0, i32 1, i32 3
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#closure_env.1", i32 0, i32 1, i32 2
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %block_field_gep4 = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#closure_env.1", i32 0, i32 1, i32 1
  %block_field_raw5 = load i64, i64* %block_field_gep4, align 8
  %block_field6 = inttoptr i64 %block_field_raw5 to %umber_block*
  %fun_call = tail call %umber_block* @umber_apply3(%umber_block* %block_field6, %umber_block* %block_field3, %umber_block* %block_field, %umber_block* %"AdventOfCode2024_1.#arg2.1")
  ret %umber_block* %fun_call
}

declare tailcc %umber_block* @Std.Prelude.Int.of_string(%umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.::"(%umber_block*, %umber_block*)

define tailcc %umber_block* @AdventOfCode2024_1.loop.1(%umber_block* %AdventOfCode2024_1.acc.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.read_line(%umber_block* inttoptr (i64 1 to %umber_block*))
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  %fun_call1 = tail call tailcc %umber_block* @Std.Prelude.List.reverse(%umber_block* %AdventOfCode2024_1.acc.1)
  br label %cond_otherwise_merge59

cond:                                             ; preds = %entry
  %fun_call2 = ptrtoint %umber_block* %fun_call to i64
  %equals = icmp eq i64 %fun_call2, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %fun_call3 = tail call tailcc %umber_block* @Std.Prelude.String.split(%umber_block* %block_field, %umber_block* bitcast (%umber_block1* @"char. " to %umber_block*))
  %box = call i64* @umber_gc_alloc(i64 40)
  %box4 = bitcast i64* %box to i16*
  store i16 12289, i16* %box4, align 2
  %box5 = getelementptr i16, i16* %box4, i32 1
  store i16 4, i16* %box5, align 2
  %box6 = bitcast i64* %box to %umber_block**
  %box7 = getelementptr %umber_block*, %umber_block** %box6, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"AdventOfCode2024_1.#fun.3" to %umber_block*), %umber_block** %box7, align 8
  %box8 = getelementptr %umber_block*, %umber_block** %box6, i32 2
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*, %umber_block*)* @Std.Prelude.Operators.. to %umber_block*), %umber_block** %box8, align 8
  %box9 = getelementptr %umber_block*, %umber_block** %box6, i32 3
  store %umber_block* bitcast (%umber_block* (%umber_block*)* @Std.Prelude.Operators.not to %umber_block*), %umber_block** %box9, align 8
  %box10 = getelementptr %umber_block*, %umber_block** %box6, i32 4
  store %umber_block* bitcast (%umber_block* (%umber_block*)* @Std.Prelude.String.is_empty to %umber_block*), %umber_block** %box10, align 8
  %box11 = bitcast %umber_block** %box6 to %umber_block*
  %fun_call12 = tail call tailcc %umber_block* @Std.Prelude.List.filter(%umber_block* %fun_call3, %umber_block* %box11)
  %fun_call13 = tail call tailcc %umber_block* @Std.Prelude.List.map(%umber_block* %fun_call12, %umber_block* bitcast (%umber_block* (%umber_block*)* @Std.Prelude.Int.of_string to %umber_block*))
  br label %cond25

cond_binding_merge14:                             ; preds = %cond_binding47
  %cond_bindings = phi %umber_block* [ %AdventOfCode2024_1.x.1, %cond_binding47 ]
  %cond_bindings15 = phi %umber_block* [ %AdventOfCode2024_1.y.1, %cond_binding47 ]
  %box16 = call i64* @umber_gc_alloc(i64 24)
  %box17 = bitcast i64* %box16 to i16*
  store i16 0, i16* %box17, align 2
  %box18 = getelementptr i16, i16* %box17, i32 1
  store i16 2, i16* %box18, align 2
  %box19 = bitcast i64* %box16 to %umber_block**
  %box20 = getelementptr %umber_block*, %umber_block** %box19, i32 1
  store %umber_block* %cond_bindings, %umber_block** %box20, align 8
  %box21 = getelementptr %umber_block*, %umber_block** %box19, i32 2
  store %umber_block* %cond_bindings15, %umber_block** %box21, align 8
  %box22 = bitcast %umber_block** %box19 to %umber_block*
  %fun_call23 = tail call tailcc %umber_block* @"Std.Prelude.Operators.::"(%umber_block* %box22, %umber_block* %AdventOfCode2024_1.acc.1)
  %fun_call24 = tail call tailcc %umber_block* @AdventOfCode2024_1.loop.1(%umber_block* %fun_call23)
  br label %cond_otherwise_merge

cond25:                                           ; preds = %cond_otherwise
  %block_field_gep26 = getelementptr %umber_block, %umber_block* %fun_call13, i32 0, i32 1, i32 1
  %block_field_raw27 = load i64, i64* %block_field_gep26, align 8
  %block_field28 = inttoptr i64 %block_field_raw27 to %umber_block*
  %block_field_gep29 = getelementptr %umber_block, %umber_block* %block_field28, i32 0, i32 1, i32 1
  %block_field_raw30 = load i64, i64* %block_field_gep29, align 8
  %block_field31 = inttoptr i64 %block_field_raw30 to %umber_block*
  %block_field3132 = ptrtoint %umber_block* %block_field31 to i64
  %equals33 = icmp eq i64 %block_field3132, 1
  %block_field_gep34 = getelementptr %umber_block, %umber_block* %fun_call13, i32 0, i32 1, i32 1
  %block_field_raw35 = load i64, i64* %block_field_gep34, align 8
  %block_field36 = inttoptr i64 %block_field_raw35 to %umber_block*
  %block_field3637 = ptrtoint %umber_block* %block_field36 to i64
  %bottom_bit = and i64 %block_field3637, 1
  %bottom_bit_set = icmp eq i64 %bottom_bit, 0
  %tag_gep = getelementptr %umber_block, %umber_block* %block_field36, i32 0, i32 0, i32 0
  %tag = load i16, i16* %tag_gep, align 2
  %equals38 = icmp eq i16 %tag, 0
  %non_constant_tag_equals = select i1 %bottom_bit_set, i1 %equals38, i1 false
  %cond_and = and i1 %non_constant_tag_equals, %equals33
  %fun_call1339 = ptrtoint %umber_block* %fun_call13 to i64
  %bottom_bit40 = and i64 %fun_call1339, 1
  %bottom_bit_set41 = icmp eq i64 %bottom_bit40, 0
  %tag_gep42 = getelementptr %umber_block, %umber_block* %fun_call13, i32 0, i32 0, i32 0
  %tag43 = load i16, i16* %tag_gep42, align 2
  %equals44 = icmp eq i16 %tag43, 0
  %non_constant_tag_equals45 = select i1 %bottom_bit_set41, i1 %equals44, i1 false
  %cond_and46 = and i1 %non_constant_tag_equals45, %cond_and
  br i1 %cond_and46, label %cond_binding47, label %cond_otherwise57

cond_binding47:                                   ; preds = %cond25
  %block_field_gep48 = getelementptr %umber_block, %umber_block* %fun_call13, i32 0, i32 1, i32 0
  %block_field_raw49 = load i64, i64* %block_field_gep48, align 8
  %AdventOfCode2024_1.x.1 = inttoptr i64 %block_field_raw49 to %umber_block*
  %block_field_gep51 = getelementptr %umber_block, %umber_block* %fun_call13, i32 0, i32 1, i32 1
  %block_field_raw52 = load i64, i64* %block_field_gep51, align 8
  %block_field53 = inttoptr i64 %block_field_raw52 to %umber_block*
  %block_field_gep54 = getelementptr %umber_block, %umber_block* %block_field53, i32 0, i32 1, i32 0
  %block_field_raw55 = load i64, i64* %block_field_gep54, align 8
  %AdventOfCode2024_1.y.1 = inttoptr i64 %block_field_raw55 to %umber_block*
  br label %cond_binding_merge14

cond_otherwise57:                                 ; preds = %cond25
  %Std.Prelude.List.Nil = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise57, %cond_binding_merge14
  %cond_otherwise_merge58 = phi %umber_block* [ %fun_call24, %cond_binding_merge14 ], [ %Std.Prelude.List.Nil, %cond_otherwise57 ]
  br label %cond_otherwise_merge59

cond_otherwise_merge59:                           ; preds = %cond_otherwise_merge, %cond_binding_merge
  %cond_otherwise_merge60 = phi %umber_block* [ %fun_call1, %cond_binding_merge ], [ %cond_otherwise_merge58, %cond_otherwise_merge ]
  ret %umber_block* %cond_otherwise_merge60
}

declare tailcc %umber_block* @Std.Prelude.List.fold(%umber_block*, %umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block*, %umber_block*)

define tailcc %umber_block* @AdventOfCode2024_1.sum(%umber_block* %AdventOfCode2024_1.xs.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.List.fold(%umber_block* %AdventOfCode2024_1.xs.1, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*), %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"Std.Prelude.Operators.+" to %umber_block*))
  ret %umber_block* %fun_call
}

declare tailcc %umber_block* @Std.Prelude.List.unzip(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.List.sort(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.List.zip_shortest(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.Int.abs(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block*, %umber_block*)

define tailcc %umber_block* @"AdventOfCode2024_1.#fun.4"(%umber_block* %"AdventOfCode2024_1.#lambda_arg.1") {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#lambda_arg.1", i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#lambda_arg.1", i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %block_field, %umber_block* %block_field3)
  %fun_call4 = tail call tailcc %umber_block* @Std.Prelude.Int.abs(%umber_block* %fun_call)
  ret %umber_block* %fun_call4
}

define tailcc %umber_block* @AdventOfCode2024_1.solve_part_1(%umber_block* %AdventOfCode2024_1.input.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.List.unzip(%umber_block* %AdventOfCode2024_1.input.1)
  %block_field_gep = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %fun_call4 = tail call tailcc %umber_block* @Std.Prelude.List.sort(%umber_block* %block_field)
  %fun_call5 = tail call tailcc %umber_block* @Std.Prelude.List.sort(%umber_block* %block_field3)
  %fun_call6 = tail call tailcc %umber_block* @Std.Prelude.List.zip_shortest(%umber_block* %fun_call4, %umber_block* %fun_call5)
  %fun_call7 = tail call tailcc %umber_block* @Std.Prelude.List.map(%umber_block* %fun_call6, %umber_block* bitcast (%umber_block* (%umber_block*)* @"AdventOfCode2024_1.#fun.4" to %umber_block*))
  %fun_call8 = tail call tailcc %umber_block* @AdventOfCode2024_1.sum(%umber_block* %fun_call7)
  ret %umber_block* %fun_call8
}

declare tailcc %umber_block* @"Std.Prelude.Operators.*"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.List.count(%umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block*, %umber_block*)

define tailcc %umber_block* @"AdventOfCode2024_1.#fun.5"(%umber_block* %"AdventOfCode2024_1.#closure_env.2", %umber_block* %"AdventOfCode2024_1.#arg0.3") {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#closure_env.2", i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block* %"AdventOfCode2024_1.#arg0.3", %umber_block* %block_field)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @"AdventOfCode2024_1.#fun.6"(%umber_block* %"AdventOfCode2024_1.#closure_env.3", %umber_block* %AdventOfCode2024_1.acc.2, %umber_block* %AdventOfCode2024_1.x.3) {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"AdventOfCode2024_1.#closure_env.3", i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 12289, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"AdventOfCode2024_1.#fun.5" to %umber_block*), %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %AdventOfCode2024_1.x.3, %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.List.count(%umber_block* %block_field, %umber_block* %box6)
  %fun_call7 = tail call tailcc %umber_block* @"Std.Prelude.Operators.*"(%umber_block* %AdventOfCode2024_1.x.3, %umber_block* %fun_call)
  %fun_call8 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %AdventOfCode2024_1.acc.2, %umber_block* %fun_call7)
  ret %umber_block* %fun_call8
}

define tailcc %umber_block* @AdventOfCode2024_1.solve_part_2(%umber_block* %AdventOfCode2024_1.input.2) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.List.unzip(%umber_block* %AdventOfCode2024_1.input.2)
  %block_field_gep = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %fun_call, i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %box = call i64* @umber_gc_alloc(i64 24)
  %box4 = bitcast i64* %box to i16*
  store i16 12289, i16* %box4, align 2
  %box5 = getelementptr i16, i16* %box4, i32 1
  store i16 2, i16* %box5, align 2
  %box6 = bitcast i64* %box to %umber_block**
  %box7 = getelementptr %umber_block*, %umber_block** %box6, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*, %umber_block*)* @"AdventOfCode2024_1.#fun.6" to %umber_block*), %umber_block** %box7, align 8
  %box8 = getelementptr %umber_block*, %umber_block** %box6, i32 2
  store %umber_block* %block_field3, %umber_block** %box8, align 8
  %box9 = bitcast %umber_block** %box6 to %umber_block*
  %fun_call10 = tail call tailcc %umber_block* @Std.Prelude.List.fold(%umber_block* %block_field, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*), %umber_block* %box9)
  ret %umber_block* %fun_call10
}

declare tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.print_string(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.print_int(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.print(%umber_block*)

define linkonce_odr %umber_block* @umber_apply3(%umber_block* %0, %umber_block* %1, %umber_block* %2, %umber_block* %3) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*, %umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1, %umber_block* %2, %umber_block* %3)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*, %umber_block*, %umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1, %umber_block* %2, %umber_block* %3)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

declare i64* @umber_gc_alloc(i64)

define linkonce_odr %umber_block* @umber_apply2(%umber_block* %0, %umber_block* %1, %umber_block* %2) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1, %umber_block* %2)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*, %umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1, %umber_block* %2)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

