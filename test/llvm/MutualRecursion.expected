; ModuleID = 'examples/MutualRecursion.um'
source_filename = "examples/MutualRecursion.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@MutualRecursion.Leaf = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@MutualRecursion.number = global %umber_block* null
@Std.Prelude.List.Nil = external global %umber_block*
@MutualRecursion.f = global %umber_block* null
@"MutualRecursion.*binding.1" = global %umber_block* null
@int.0 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] zeroinitializer }
@int.1 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] [i64 1] }
@int.5 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] [i64 5] }
@int.17 = linkonce_odr constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, [1 x i64] [i64 17] }

define i32 @"umber_main:examples/MutualRecursion.um"() {
entry:
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* bitcast (%umber_block1* @int.5 to %umber_block*), %umber_block* bitcast (%umber_block1* @int.5 to %umber_block*))
  store %umber_block* %fun_call, %umber_block** @MutualRecursion.number, align 8
  %Std.Prelude.List.Nil = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  store %umber_block* %Std.Prelude.List.Nil, %umber_block** @MutualRecursion.f, align 8
  %MutualRecursion.Leaf = load %umber_block*, %umber_block** @MutualRecursion.Leaf, align 8
  %Std.Prelude.List.Nil1 = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  %box = call i64* @umber_gc_alloc(i64 24)
  %box2 = bitcast i64* %box to i16*
  store i16 0, i16* %box2, align 2
  %box3 = getelementptr i16, i16* %box2, i32 1
  store i16 2, i16* %box3, align 2
  %box4 = bitcast i64* %box to %umber_block**
  %box5 = getelementptr %umber_block*, %umber_block** %box4, i32 1
  store %umber_block* bitcast (%umber_block1* @int.17 to %umber_block*), %umber_block** %box5, align 8
  %box6 = getelementptr %umber_block*, %umber_block** %box4, i32 2
  store %umber_block* %Std.Prelude.List.Nil1, %umber_block** %box6, align 8
  %box7 = bitcast %umber_block** %box4 to %umber_block*
  %Std.Prelude.List.Nil8 = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  %box9 = call i64* @umber_gc_alloc(i64 24)
  %box10 = bitcast i64* %box9 to i16*
  store i16 0, i16* %box10, align 2
  %box11 = getelementptr i16, i16* %box10, i32 1
  store i16 2, i16* %box11, align 2
  %box12 = bitcast i64* %box9 to %umber_block**
  %box13 = getelementptr %umber_block*, %umber_block** %box12, i32 1
  store %umber_block* %box7, %umber_block** %box13, align 8
  %box14 = getelementptr %umber_block*, %umber_block** %box12, i32 2
  store %umber_block* %Std.Prelude.List.Nil8, %umber_block** %box14, align 8
  %box15 = bitcast %umber_block** %box12 to %umber_block*
  %box16 = call i64* @umber_gc_alloc(i64 24)
  %box17 = bitcast i64* %box16 to i16*
  store i16 0, i16* %box17, align 2
  %box18 = getelementptr i16, i16* %box17, i32 1
  store i16 2, i16* %box18, align 2
  %box19 = bitcast i64* %box16 to %umber_block**
  %box20 = getelementptr %umber_block*, %umber_block** %box19, i32 1
  store %umber_block* %MutualRecursion.Leaf, %umber_block** %box20, align 8
  %box21 = getelementptr %umber_block*, %umber_block** %box19, i32 2
  store %umber_block* %box15, %umber_block** %box21, align 8
  %box22 = bitcast %umber_block** %box19 to %umber_block*
  %box23 = call i64* @umber_gc_alloc(i64 24)
  %box24 = bitcast i64* %box23 to i16*
  store i16 0, i16* %box24, align 2
  %box25 = getelementptr i16, i16* %box24, i32 1
  store i16 2, i16* %box25, align 2
  %box26 = bitcast i64* %box23 to %umber_block**
  %box27 = getelementptr %umber_block*, %umber_block** %box26, i32 1
  store %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*), %umber_block** %box27, align 8
  %box28 = getelementptr %umber_block*, %umber_block** %box26, i32 2
  store %umber_block* %box22, %umber_block** %box28, align 8
  %box29 = bitcast %umber_block** %box26 to %umber_block*
  %fun_call30 = tail call tailcc %umber_block* @MutualRecursion.sum_tree(%umber_block* %box29)
  %fun_call31 = tail call tailcc %umber_block* @Std.Prelude.print_int(%umber_block* %fun_call30)
  store %umber_block* %fun_call31, %umber_block** @"MutualRecursion.*binding.1", align 8
  ret i32 0
}

define tailcc %umber_block* @MutualRecursion.Node(%umber_block* %"MutualRecursion.*arg0.1", %umber_block* %"MutualRecursion.*arg1.1") {
entry:
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* %"MutualRecursion.*arg0.1", %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %"MutualRecursion.*arg1.1", %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  ret %umber_block* %box6
}

declare tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block*, %umber_block*)

define tailcc %umber_block* @MutualRecursion.even(%umber_block* %MutualRecursion.x.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block* %MutualRecursion.x.1, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*))
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %fun_call1 = ptrtoint %umber_block* %fun_call to i64
  %equals = icmp eq i64 %fun_call1, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call2 = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %MutualRecursion.x.1, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  %fun_call3 = tail call tailcc %umber_block* @MutualRecursion.odd(%umber_block* %fun_call2)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge4 = phi %umber_block* [ inttoptr (i64 3 to %umber_block*), %cond_binding_merge ], [ %fun_call3, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge4
}

define tailcc %umber_block* @MutualRecursion.odd(%umber_block* %MutualRecursion.x.2) {
entry:
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block* %MutualRecursion.x.2, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*))
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %fun_call1 = ptrtoint %umber_block* %fun_call to i64
  %equals = icmp eq i64 %fun_call1, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call2 = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %MutualRecursion.x.2, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  %fun_call3 = tail call tailcc %umber_block* @MutualRecursion.even(%umber_block* %fun_call2)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge4 = phi %umber_block* [ inttoptr (i64 1 to %umber_block*), %cond_binding_merge ], [ %fun_call3, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge4
}

declare tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block*, %umber_block*)

define tailcc %umber_block* @MutualRecursion.loop.1(%umber_block* %MutualRecursion.acc.1, %umber_block* %MutualRecursion.forest.1) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %MutualRecursion.forest.11 = ptrtoint %umber_block* %MutualRecursion.forest.1 to i64
  %equals = icmp eq i64 %MutualRecursion.forest.11, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %MutualRecursion.forest.1, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep2 = getelementptr %umber_block, %umber_block* %MutualRecursion.forest.1, i32 0, i32 1, i32 0
  %block_field_raw3 = load i64, i64* %block_field_gep2, align 8
  %block_field4 = inttoptr i64 %block_field_raw3 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @MutualRecursion.sum_tree(%umber_block* %block_field4)
  %fun_call5 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %MutualRecursion.acc.1, %umber_block* %fun_call)
  %fun_call6 = tail call tailcc %umber_block* @MutualRecursion.loop.1(%umber_block* %fun_call5, %umber_block* %block_field)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge7 = phi %umber_block* [ %MutualRecursion.acc.1, %cond_binding_merge ], [ %fun_call6, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge7
}

define tailcc %umber_block* @MutualRecursion.sum_forest(%umber_block* %MutualRecursion.forest.2) {
entry:
  %fun_call = tail call tailcc %umber_block* @MutualRecursion.loop.1(%umber_block* bitcast (%umber_block1* @int.0 to %umber_block*), %umber_block* %MutualRecursion.forest.2)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @MutualRecursion.sum_tree(%umber_block* %MutualRecursion.match.3) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %MutualRecursion.match.31 = ptrtoint %umber_block* %MutualRecursion.match.3 to i64
  %equals = icmp eq i64 %MutualRecursion.match.31, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %MutualRecursion.match.3, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep2 = getelementptr %umber_block, %umber_block* %MutualRecursion.match.3, i32 0, i32 1, i32 0
  %block_field_raw3 = load i64, i64* %block_field_gep2, align 8
  %block_field4 = inttoptr i64 %block_field_raw3 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @MutualRecursion.sum_forest(%umber_block* %block_field)
  %fun_call5 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %block_field4, %umber_block* %fun_call)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge6 = phi %umber_block* [ bitcast (%umber_block1* @int.0 to %umber_block*), %cond_binding_merge ], [ %fun_call5, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge6
}

declare tailcc %umber_block* @Std.Prelude.print_int(%umber_block*)

declare i64* @umber_gc_alloc(i64)

