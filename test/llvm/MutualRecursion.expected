; ModuleID = './examples/MutualRecursion.um'
source_filename = "./examples/MutualRecursion.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@Std.Prelude.List.Nil = external global %umber_block*
@MutualRecursion.f = global %umber_block* null
@MutualRecursion.sum_forest.1 = global %umber_block* null
@MutualRecursion.Nil = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@MutualRecursion.Leaf = constant %umber_block* inttoptr (i64 1 to %umber_block*)
@"*binding" = global %umber_block* null
@MutualRecursion.number = global %umber_block* null
@int.0 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 0 }
@int.1 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 1 }
@int.17 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 17 }
@int.5 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 5 }

define i32 @"umber_main:./examples/MutualRecursion.um"() {
entry:
  %Std.Prelude.List.Nil = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  store %umber_block* %Std.Prelude.List.Nil, %umber_block** @MutualRecursion.f, align 8
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 12289, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"*fun" to %umber_block*), %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @MutualRecursion.loop to %umber_block*), %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  store %umber_block* %box6, %umber_block** @MutualRecursion.sum_forest.1, align 8
  %MutualRecursion.Leaf = load %umber_block*, %umber_block** @MutualRecursion.Leaf, align 8
  %Std.Prelude.List.Nil7 = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  %box8 = call i64* @umber_gc_alloc(i64 24)
  %box9 = bitcast i64* %box8 to i16*
  store i16 0, i16* %box9, align 2
  %box10 = getelementptr i16, i16* %box9, i32 1
  store i16 2, i16* %box10, align 2
  %box11 = bitcast i64* %box8 to %umber_block**
  %box12 = getelementptr %umber_block*, %umber_block** %box11, i32 1
  store %umber_block* bitcast (%umber_block1* @int.17 to %umber_block*), %umber_block** %box12, align 8
  %box13 = getelementptr %umber_block*, %umber_block** %box11, i32 2
  store %umber_block* %Std.Prelude.List.Nil7, %umber_block** %box13, align 8
  %box14 = bitcast %umber_block** %box11 to %umber_block*
  %Std.Prelude.List.Nil15 = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  %box16 = call i64* @umber_gc_alloc(i64 24)
  %box17 = bitcast i64* %box16 to i16*
  store i16 0, i16* %box17, align 2
  %box18 = getelementptr i16, i16* %box17, i32 1
  store i16 2, i16* %box18, align 2
  %box19 = bitcast i64* %box16 to %umber_block**
  %box20 = getelementptr %umber_block*, %umber_block** %box19, i32 1
  store %umber_block* %box14, %umber_block** %box20, align 8
  %box21 = getelementptr %umber_block*, %umber_block** %box19, i32 2
  store %umber_block* %Std.Prelude.List.Nil15, %umber_block** %box21, align 8
  %box22 = bitcast %umber_block** %box19 to %umber_block*
  %box23 = call i64* @umber_gc_alloc(i64 24)
  %box24 = bitcast i64* %box23 to i16*
  store i16 0, i16* %box24, align 2
  %box25 = getelementptr i16, i16* %box24, i32 1
  store i16 2, i16* %box25, align 2
  %box26 = bitcast i64* %box23 to %umber_block**
  %box27 = getelementptr %umber_block*, %umber_block** %box26, i32 1
  store %umber_block* %MutualRecursion.Leaf, %umber_block** %box27, align 8
  %box28 = getelementptr %umber_block*, %umber_block** %box26, i32 2
  store %umber_block* %box22, %umber_block** %box28, align 8
  %box29 = bitcast %umber_block** %box26 to %umber_block*
  %box30 = call i64* @umber_gc_alloc(i64 24)
  %box31 = bitcast i64* %box30 to i16*
  store i16 0, i16* %box31, align 2
  %box32 = getelementptr i16, i16* %box31, i32 1
  store i16 2, i16* %box32, align 2
  %box33 = bitcast i64* %box30 to %umber_block**
  %box34 = getelementptr %umber_block*, %umber_block** %box33, i32 1
  store %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*), %umber_block** %box34, align 8
  %box35 = getelementptr %umber_block*, %umber_block** %box33, i32 2
  store %umber_block* %box29, %umber_block** %box35, align 8
  %box36 = bitcast %umber_block** %box33 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @MutualRecursion.sum_tree(%umber_block* %box36)
  %fun_call37 = tail call tailcc %umber_block* @Std.Prelude.print_int(%umber_block* %fun_call)
  store %umber_block* %fun_call37, %umber_block** @"*binding", align 8
  %fun_call38 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* bitcast (%umber_block1* @int.5 to %umber_block*), %umber_block* bitcast (%umber_block1* @int.5 to %umber_block*))
  store %umber_block* %fun_call38, %umber_block** @MutualRecursion.number, align 8
  ret i32 0
}

declare tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block*, %umber_block*)

define tailcc %umber_block* @MutualRecursion.loop(%umber_block* %MutualRecursion.acc, %umber_block* %MutualRecursion.forest) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %MutualRecursion.forest1 = ptrtoint %umber_block* %MutualRecursion.forest to i64
  %equals = icmp eq i64 %MutualRecursion.forest1, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %MutualRecursion.forest, i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep2 = getelementptr %umber_block, %umber_block* %MutualRecursion.forest, i32 0, i32 1, i32 0
  %block_field_raw3 = load i64, i64* %block_field_gep2, align 8
  %block_field4 = inttoptr i64 %block_field_raw3 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @MutualRecursion.sum_tree(%umber_block* %block_field4)
  %fun_call5 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %MutualRecursion.acc, %umber_block* %fun_call)
  %fun_call6 = tail call tailcc %umber_block* @MutualRecursion.loop(%umber_block* %fun_call5, %umber_block* %block_field)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge7 = phi %umber_block* [ %MutualRecursion.acc, %cond_binding_merge ], [ %fun_call6, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge7
}

define tailcc %umber_block* @"*fun"(%umber_block* %"*closure_env", %umber_block* %MutualRecursion.forest.1) {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"*closure_env", i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %fun_call = tail call tailcc %umber_block* @umber_apply2(%umber_block* %block_field, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*), %umber_block* %MutualRecursion.forest.1)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @MutualRecursion.sum_forest(%umber_block* %arg0) {
entry:
  %MutualRecursion.sum_forest.1 = load %umber_block*, %umber_block** @MutualRecursion.sum_forest.1, align 8
  %fun_call = tail call tailcc %umber_block* @umber_apply1(%umber_block* %MutualRecursion.sum_forest.1, %umber_block* %arg0)
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @MutualRecursion.sum_tree(%umber_block* %MutualRecursion.) {
entry:
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %MutualRecursion.1 = ptrtoint %umber_block* %MutualRecursion. to i64
  %equals = icmp eq i64 %MutualRecursion.1, 1
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %block_field_gep = getelementptr %umber_block, %umber_block* %MutualRecursion., i32 0, i32 1, i32 1
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep2 = getelementptr %umber_block, %umber_block* %MutualRecursion., i32 0, i32 1, i32 0
  %block_field_raw3 = load i64, i64* %block_field_gep2, align 8
  %block_field4 = inttoptr i64 %block_field_raw3 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @MutualRecursion.sum_forest(%umber_block* %block_field)
  %fun_call5 = tail call tailcc %umber_block* @"Std.Prelude.Operators.+"(%umber_block* %block_field4, %umber_block* %fun_call)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge6 = phi %umber_block* [ bitcast (%umber_block1* @int.0 to %umber_block*), %cond_binding_merge ], [ %fun_call5, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge6
}

define tailcc %umber_block* @MutualRecursion.Cons(%umber_block* %arg0.1, %umber_block* %arg1) {
entry:
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* %arg0.1, %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %arg1, %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  ret %umber_block* %box6
}

define tailcc %umber_block* @MutualRecursion.Node(%umber_block* %arg0.2, %umber_block* %arg1.1) {
entry:
  %box = call i64* @umber_gc_alloc(i64 24)
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* %arg0.2, %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %arg1.1, %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  ret %umber_block* %box6
}

declare tailcc %umber_block* @Std.Prelude.print_int(%umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block*, %umber_block*)

define tailcc %umber_block* @MutualRecursion.even(%umber_block* %MutualRecursion.x.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block* %MutualRecursion.x.1, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*))
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %fun_call1 = ptrtoint %umber_block* %fun_call to i64
  %equals = icmp eq i64 %fun_call1, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call2 = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %MutualRecursion.x.1, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  %fun_call3 = tail call tailcc %umber_block* @MutualRecursion.odd(%umber_block* %fun_call2)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge4 = phi %umber_block* [ inttoptr (i64 3 to %umber_block*), %cond_binding_merge ], [ %fun_call3, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge4
}

define tailcc %umber_block* @MutualRecursion.odd(%umber_block* %MutualRecursion.x.2) {
entry:
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.=="(%umber_block* %MutualRecursion.x.2, %umber_block* bitcast (%umber_block1* @int.0 to %umber_block*))
  br label %cond

cond_binding_merge:                               ; preds = %cond_binding
  br label %cond_otherwise_merge

cond:                                             ; preds = %entry
  %fun_call1 = ptrtoint %umber_block* %fun_call to i64
  %equals = icmp eq i64 %fun_call1, 3
  br i1 %equals, label %cond_binding, label %cond_otherwise

cond_binding:                                     ; preds = %cond
  br label %cond_binding_merge

cond_otherwise:                                   ; preds = %cond
  %fun_call2 = tail call tailcc %umber_block* @Std.Prelude.Operators.-(%umber_block* %MutualRecursion.x.2, %umber_block* bitcast (%umber_block1* @int.1 to %umber_block*))
  %fun_call3 = tail call tailcc %umber_block* @MutualRecursion.even(%umber_block* %fun_call2)
  br label %cond_otherwise_merge

cond_otherwise_merge:                             ; preds = %cond_otherwise, %cond_binding_merge
  %cond_otherwise_merge4 = phi %umber_block* [ inttoptr (i64 1 to %umber_block*), %cond_binding_merge ], [ %fun_call3, %cond_otherwise ]
  ret %umber_block* %cond_otherwise_merge4
}

define linkonce_odr tailcc %umber_block* @umber_apply2(%umber_block* %0, %umber_block* %1, %umber_block* %2) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1, %umber_block* %2)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*, %umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1, %umber_block* %2)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

declare i64* @umber_gc_alloc(i64)

define linkonce_odr tailcc %umber_block* @umber_apply1(%umber_block* %0, %umber_block* %1) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

