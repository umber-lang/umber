; ModuleID = './examples/Functions.um'
source_filename = "./examples/Functions.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@Functions.zero.0 = constant %umber_block* bitcast (%umber_block1* @float.0. to %umber_block*)
@Functions.still_zero_wow.0 = global %umber_block* null
@float.0. = constant %umber_block1 { %umber_header { i16 -32765, i16 1, i32 0 }, double 0.000000e+00 }

define void @main() {
entry:
  %Functions.zero.0 = load %umber_block*, %umber_block** @Functions.zero.0, align 8
  %fun_call = tail call %umber_block* @Functions.id.0(%umber_block* %Functions.zero.0)
  store %umber_block* %fun_call, %umber_block** @Functions.still_zero_wow.0, align 8
  ret void
}

define tailcc %umber_block* @Functions.id.0(%umber_block* %Functions.x.0) {
entry:
  ret %umber_block* %Functions.x.0
}

declare %umber_block* @umber_int_mul(%umber_block*, %umber_block*)

define tailcc %umber_block* @Functions.sqr.0(%umber_block* %Functions.x.1) {
entry:
  %fun_call = tail call %umber_block* @umber_int_mul(%umber_block* %Functions.x.1, %umber_block* %Functions.x.1)
  ret %umber_block* %fun_call
}

