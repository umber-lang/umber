; ModuleID = 'examples/OpSectionLeft.um'
source_filename = "examples/OpSectionLeft.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block24b = type { %umber_header, [24 x i8] }
%umber_block16b = type { %umber_header, [16 x i8] }
%umber_block8b = type { %umber_header, [8 x i8] }

@"OpSectionLeft.*binding.1" = global %umber_block* null
@string.885266753 = linkonce_odr constant %umber_block24b { %umber_header { i16 -32764, i16 3, i32 0 }, [24 x i8] c" is mid. I prefer \00\00\00\00\00\05" }
@string.631358830 = linkonce_odr constant %umber_block16b { %umber_header { i16 -32764, i16 2, i32 0 }, [16 x i8] c"called apply\00\00\00\03" }
@string.738315706 = linkonce_odr constant %umber_block8b { %umber_header { i16 -32764, i16 1, i32 0 }, [8 x i8] c"lasagna\00" }
@string.76039754 = linkonce_odr constant %umber_block8b { %umber_header { i16 -32764, i16 1, i32 0 }, [8 x i8] c"between\00" }
@string.483149063 = linkonce_odr constant %umber_block8b { %umber_header { i16 -32764, i16 1, i32 0 }, [8 x i8] c"penne\00\00\02" }

define i32 @"umber_main:OpSectionLeft"() {
entry:
  %fun_call = tail call tailcc %umber_block* @OpSectionLeft.apply(%umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"OpSectionLeft.:/" to %umber_block*))
  %fun_call1 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* bitcast (%umber_block8b* @string.76039754 to %umber_block*))
  %fun_call2 = tail call %umber_block* @umber_apply1(%umber_block* %fun_call, %umber_block* bitcast (%umber_block8b* @string.483149063 to %umber_block*))
  %fun_call3 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call1, %umber_block* %fun_call2)
  store %umber_block* %fun_call3, %umber_block** @"OpSectionLeft.*binding.1", align 8
  ret i32 0
}

declare tailcc %umber_block* @Std.Prelude.print(%umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.++"(%umber_block*, %umber_block*)

define tailcc %umber_block* @"OpSectionLeft.:/"(%umber_block* %OpSectionLeft.x.1, %umber_block* %OpSectionLeft.y.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.++"(%umber_block* %OpSectionLeft.x.1, %umber_block* bitcast (%umber_block24b* @string.885266753 to %umber_block*))
  %fun_call1 = tail call tailcc %umber_block* @"Std.Prelude.Operators.++"(%umber_block* %fun_call, %umber_block* %OpSectionLeft.y.1)
  %fun_call2 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* %fun_call1)
  ret %umber_block* %fun_call2
}

declare tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block*, %umber_block*)

define tailcc %umber_block* @"OpSectionLeft.*fun.1"(%umber_block* %"OpSectionLeft.*closure_env.1", %umber_block* %"OpSectionLeft.*arg1.1") {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"OpSectionLeft.*closure_env.1", i32 0, i32 1, i32 2
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %"OpSectionLeft.*closure_env.1", i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %fun_call = tail call %umber_block* @umber_apply2(%umber_block* %block_field3, %umber_block* %block_field, %umber_block* %"OpSectionLeft.*arg1.1")
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @OpSectionLeft.apply(%umber_block* %OpSectionLeft.f.1) {
entry:
  %fun_call = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* bitcast (%umber_block16b* @string.631358830 to %umber_block*))
  %fun_call1 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call, %umber_block* bitcast (%umber_block8b* @string.738315706 to %umber_block*))
  %box = call i64* @umber_gc_alloc(i64 32)
  %box2 = bitcast i64* %box to i16*
  store i16 12289, i16* %box2, align 2
  %box3 = getelementptr i16, i16* %box2, i32 1
  store i16 3, i16* %box3, align 2
  %box4 = bitcast i64* %box to %umber_block**
  %box5 = getelementptr %umber_block*, %umber_block** %box4, i32 1
  store %umber_block* bitcast (%umber_block* (%umber_block*, %umber_block*)* @"OpSectionLeft.*fun.1" to %umber_block*), %umber_block** %box5, align 8
  %box6 = getelementptr %umber_block*, %umber_block** %box4, i32 2
  store %umber_block* %OpSectionLeft.f.1, %umber_block** %box6, align 8
  %box7 = getelementptr %umber_block*, %umber_block** %box4, i32 3
  store %umber_block* %fun_call1, %umber_block** %box7, align 8
  %box8 = bitcast %umber_block** %box4 to %umber_block*
  ret %umber_block* %box8
}

define linkonce_odr %umber_block* @umber_apply2(%umber_block* %0, %umber_block* %1, %umber_block* %2) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1, %umber_block* %2)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*, %umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1, %umber_block* %2)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

declare i64* @umber_gc_alloc(i64)

define linkonce_odr %umber_block* @umber_apply1(%umber_block* %0, %umber_block* %1) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

