; ModuleID = './examples/ModuleSig.um'
source_filename = "./examples/ModuleSig.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block1 = type { %umber_header, [1 x i64] }

@ModuleSig.my_range = global %umber_block* null
@ModuleSig.is_10_in_range = global %umber_block* null
@"*binding" = global %umber_block* null
@int.1 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 1 }
@int.10 = constant %umber_block1 { %umber_header { i16 -32767, i16 1, i32 0 }, i64 10 }
@string.0 = constant %umber_block1 { %umber_header { i16 -32764, i16 1, i32 0 }, [8 x i8] c"\00\00\00\00\00\00\00\07" }

define i32 @"umber_main:./examples/ModuleSig.um"() {
entry:
  %fun_call = tail call tailcc %umber_block* @ModuleSig.Range.between(%umber_block* bitcast (%umber_block1* @int.1 to %umber_block*), %umber_block* bitcast (%umber_block1* @int.10 to %umber_block*))
  store %umber_block* %fun_call, %umber_block** @ModuleSig.my_range, align 8
  %ModuleSig.my_range = load %umber_block*, %umber_block** @ModuleSig.my_range, align 8
  %fun_call1 = tail call tailcc %umber_block* @ModuleSig.Range.elem(%umber_block* bitcast (%umber_block1* @int.10 to %umber_block*), %umber_block* %ModuleSig.my_range)
  store %umber_block* %fun_call1, %umber_block** @ModuleSig.is_10_in_range, align 8
  %ModuleSig.is_10_in_range = load %umber_block*, %umber_block** @ModuleSig.is_10_in_range, align 8
  %fun_call2 = tail call tailcc %umber_block* @Std.Prelude.print_bool(%umber_block* %ModuleSig.is_10_in_range)
  %fun_call3 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* bitcast (%umber_block1* @string.0 to %umber_block*))
  %fun_call4 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call2, %umber_block* %fun_call3)
  store %umber_block* %fun_call4, %umber_block** @"*binding", align 8
  ret i32 0
}

define tailcc %umber_block* @ModuleSig.Range.between(%umber_block* %ModuleSig.Range.lo, %umber_block* %ModuleSig.Range.hi) {
entry:
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i32), i32 3))
  %box = bitcast i8* %malloccall to i64*
  %box1 = bitcast i64* %box to i16*
  store i16 0, i16* %box1, align 2
  %box2 = getelementptr i16, i16* %box1, i32 1
  store i16 2, i16* %box2, align 2
  %box3 = bitcast i64* %box to %umber_block**
  %box4 = getelementptr %umber_block*, %umber_block** %box3, i32 1
  store %umber_block* %ModuleSig.Range.lo, %umber_block** %box4, align 8
  %box5 = getelementptr %umber_block*, %umber_block** %box3, i32 2
  store %umber_block* %ModuleSig.Range.hi, %umber_block** %box5, align 8
  %box6 = bitcast %umber_block** %box3 to %umber_block*
  ret %umber_block* %box6
}

declare tailcc %umber_block* @"Std.Prelude.Operators.&&"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @"Std.Prelude.Operators.<="(%umber_block*, %umber_block*)

define tailcc %umber_block* @ModuleSig.Range.elem(%umber_block* %ModuleSig.Range.x, %umber_block* %"*lambda_arg") {
entry:
  %block_field_gep = getelementptr %umber_block, %umber_block* %"*lambda_arg", i32 0, i32 1, i32 0
  %block_field_raw = load i64, i64* %block_field_gep, align 8
  %block_field = inttoptr i64 %block_field_raw to %umber_block*
  %block_field_gep1 = getelementptr %umber_block, %umber_block* %"*lambda_arg", i32 0, i32 1, i32 1
  %block_field_raw2 = load i64, i64* %block_field_gep1, align 8
  %block_field3 = inttoptr i64 %block_field_raw2 to %umber_block*
  %fun_call = tail call tailcc %umber_block* @"Std.Prelude.Operators.<="(%umber_block* %block_field, %umber_block* %ModuleSig.Range.x)
  %fun_call4 = tail call tailcc %umber_block* @"Std.Prelude.Operators.<="(%umber_block* %ModuleSig.Range.x, %umber_block* %block_field3)
  %fun_call5 = tail call tailcc %umber_block* @"Std.Prelude.Operators.&&"(%umber_block* %fun_call, %umber_block* %fun_call4)
  ret %umber_block* %fun_call5
}

declare tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block*, %umber_block*)

declare tailcc %umber_block* @Std.Prelude.print_bool(%umber_block*)

declare tailcc %umber_block* @Std.Prelude.print(%umber_block*)

declare noalias i8* @malloc(i32)

