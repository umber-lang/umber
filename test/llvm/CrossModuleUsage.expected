; ModuleID = 'examples/CrossModuleUsage.um'
source_filename = "examples/CrossModuleUsage.um"
target datalayout = "i32:64-i64:64-p:64:64-f64:64"

%umber_block = type { %umber_header, [0 x i64] }
%umber_header = type { i16, i16, i32 }
%umber_block32b = type { %umber_header, [32 x i8] }

@CrossModuleUsage.A.print.1 = constant %umber_block* bitcast (%umber_block* (%umber_block*)* @Std.Prelude.print to %umber_block*)
@CrossModuleUsage.source = constant %umber_block* bitcast (%umber_block32b* @string.619126749 to %umber_block*)
@Std.Prelude.List.Nil = external global %umber_block*
@CrossModuleUsage.empty = global %umber_block* null
@string.619126749 = linkonce_odr constant %umber_block32b { %umber_header { i16 -32764, i16 4, i32 0 }, [32 x i8] c"everything depends on me\00\00\00\00\00\00\00\07" }

define i32 @"umber_main:examples/CrossModuleUsage.um"() {
entry:
  %Std.Prelude.List.Nil = load %umber_block*, %umber_block** @Std.Prelude.List.Nil, align 8
  store %umber_block* %Std.Prelude.List.Nil, %umber_block** @CrossModuleUsage.empty, align 8
  ret i32 0
}

declare tailcc %umber_block* @Std.Prelude.print(%umber_block*)

define tailcc %umber_block* @CrossModuleUsage.A.print(%umber_block* %"CrossModuleUsage.A.*arg0.1") {
entry:
  %CrossModuleUsage.A.print.1 = load %umber_block*, %umber_block** @CrossModuleUsage.A.print.1, align 8
  %fun_call = tail call tailcc %umber_block* @umber_apply1(%umber_block* %CrossModuleUsage.A.print.1, %umber_block* %"CrossModuleUsage.A.*arg0.1")
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @CrossModuleUsage.A.print_source(%umber_block* %"CrossModuleUsage.A.*lambda_arg.1") {
entry:
  %CrossModuleUsage.source = load %umber_block*, %umber_block** @CrossModuleUsage.source, align 8
  %fun_call = tail call tailcc %umber_block* @CrossModuleUsage.A.print(%umber_block* %CrossModuleUsage.source)
  ret %umber_block* %fun_call
}

declare tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block*, %umber_block*)

define tailcc %umber_block* @CrossModuleUsage.print_source(%umber_block* %"CrossModuleUsage.*lambda_arg.1") {
entry:
  %fun_call = tail call tailcc %umber_block* @CrossModuleUsage.A.print_source(%umber_block* inttoptr (i64 1 to %umber_block*))
  %CrossModuleUsage.source = load %umber_block*, %umber_block** @CrossModuleUsage.source, align 8
  %fun_call1 = tail call tailcc %umber_block* @Std.Prelude.print(%umber_block* %CrossModuleUsage.source)
  %fun_call2 = tail call tailcc %umber_block* @"Std.Prelude.Operators.;"(%umber_block* %fun_call, %umber_block* %fun_call1)
  ret %umber_block* %fun_call2
}

define tailcc %umber_block* @CrossModuleUsage.A.a(%umber_block* %"CrossModuleUsage.A.*lambda_arg.2") {
entry:
  %fun_call = tail call tailcc %umber_block* @CrossModuleUsage.A.b(%umber_block* inttoptr (i64 1 to %umber_block*))
  ret %umber_block* %fun_call
}

define tailcc %umber_block* @CrossModuleUsage.A.b(%umber_block* %"CrossModuleUsage.A.*lambda_arg.3") {
entry:
  %fun_call = tail call tailcc %umber_block* @CrossModuleUsage.A.a(%umber_block* inttoptr (i64 1 to %umber_block*))
  ret %umber_block* %fun_call
}

define linkonce_odr tailcc %umber_block* @umber_apply1(%umber_block* %0, %umber_block* %1) {
entry:
  %is_on_heap = call i1 @umber_gc_is_on_heap(%umber_block* %0)
  br i1 %is_on_heap, label %closure_call, label %regular_call

closure_call:                                     ; preds = %entry
  %closure_gep = getelementptr %umber_block, %umber_block* %0, i32 0, i32 1, i32 0
  %closure_gep_raw = load i64, i64* %closure_gep, align 8
  %closure_fun = inttoptr i64 %closure_gep_raw to %umber_block* (%umber_block*, %umber_block*)*
  %closure_call1 = tail call tailcc %umber_block* %closure_fun(%umber_block* %0, %umber_block* %1)
  br label %call_phi

regular_call:                                     ; preds = %entry
  %calling_fun = bitcast %umber_block* %0 to %umber_block* (%umber_block*)*
  %regular_call2 = tail call tailcc %umber_block* %calling_fun(%umber_block* %1)
  br label %call_phi

call_phi:                                         ; preds = %regular_call, %closure_call
  %call_phi3 = phi %umber_block* [ %closure_call1, %closure_call ], [ %regular_call2, %regular_call ]
  ret %umber_block* %call_phi3
}

declare i1 @umber_gc_is_on_heap(%umber_block*)

