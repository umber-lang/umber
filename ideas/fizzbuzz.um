# Various FizzBuzz implementations

# (Probably) the most idiomatic with mapping a range 
let fizzBuzzMap n = map (1..n) ~f:fun n ->
  if n % 15 == 0 then "FizzBuzz"
  else if n % 3 = 0 then "Fizz"
  else if n % 5 = 0 then "Buzz"
  else show n

# The iterative way with a for loop and yielding to a generator
# (I wonder if this could be implemented in-language and not in the compiler)
# I'm not set on whether this is strictly necessary (or even good) to have
# Apparently generators can be implemented as monads! Could also use
# algebraic effects. (why bake it into the language if you can implement it
# by having a rich enough type system?)
let fizzBuzzGen n = generator
  for i in 1..n
    yield if n % 15 = 0 then "FizzBuzz"
      else if n % 3 = 0 then "Fizz"
      else if n % 5 = 0 then "Buzz"
      else show n

# note: both of these return a lazy iterator (good, what you want here I think)