{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Umber",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#names"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.umber",
					"match": "#[^\n]*\n"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.umber",
					"match": "\\b(if|then|else|let|let'|and|in|match|handle|with|as|type|val|extern|infix|infixl|infixr|module|trait|impl|import|effect)\\b"
				},
				{
					"name": "keyword.control.umber",
					"match": "\\bresume\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.umber",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.umber",
					"match": "\\\\."
				}
			]
		},
		"characters": {
			"name": "string.quoted.single.umber",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.umber",
					"match": "\\\\."
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"comment": "floating point decimal literal with exponent",
					"name": "constant.numeric.decimal.float.umber",
					"match": "\\b([[:digit:]][[:digit:]_]*(\\.[[:digit:]_]*)?[eE][+-]?[[:digit:]][[:digit:]_]*)\\b"
				},
				{
					"comment": "floating point decimal literal",
					"name": "constant.numeric.decimal.float.umber",
					"match": "\\b([[:digit:]][[:digit:]_]*)(\\.[[:digit:]_]*\\b|\\.)"
				},
				{
					"comment": "decimal integer literal",
					"name": "constant.numeric.decimal.integer.umber",
					"match": "\\b([[:digit:]][[:digit:]_]*)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.umber",
					"match": "[[:punct:]\\p{s}&&[^'\"()\\[\\]{},#_]]+"
				}
			]
		},
		"names": {
			"patterns": [
				{
					"name": "variable.name.lower.umber",
					"match": "\\b[[:lower:]_][[:alnum:]'_]*\\b"
				},
				{
					"name": "constant.other.upper.umber",
					"match": "\\b[[:upper:]_][[:alnum:]'_]*\\b"
				}
			]
		}
	},
	"scopeName": "source.umber"
}