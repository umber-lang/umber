module : {
  module List : {
    type List a =
      | Nil
      | Cons a (List a)

    val reverse : List a -> List a
    val append : List a, List a -> List a
    val map : List a, (a -> b) -> List b
    val concat_map : List a, (a -> List b) -> List b
  }

  import .List.(Nil, Cons)

  module Option : {
    type Option a =
      | None
      | Some a
  }

  import .Option.(None, Some)

  module Bool : {
    import Bool

    val to_string : Bool -> String
  }

  module Int : {
    import Int

    val to_string : Int -> String
  }

  module Float : {
    import Float

    val infixl 6 (+) : Float, Float -> Float
    val abs : Float, Float -> Float
    val sin : Float, Float -> Float
    val cos : Float, Float -> Float
    val pi : Float
  }

  module Operators : {
    val infixr 9 (.) : (b -> c), (a -> b), a -> c

    val infixr 8 (^) : Int, Int -> Int
    #val infixr 8 (^^) : Float, Int -> Float
    #val infixr 8 (**) : Float, Float -> Float

    val infixl 7 (*) : Int, Int -> Int
    #val infixl 7 (/) : Float, Float -> Float
    #val infixl 7 (//) : Int, Int -> Int  # Same as quot (not div)

    # Remainder
    val infixl 7 (%) : Int, Int -> Int

    # Euclidean modulus
    val infixl 7 mod : Int, Int -> Int

    val infixl 6 (+) : Int, Int -> Int
    val infixl 6 (-) : Int, Int -> Int

    val infixl 7 (*.) : Float, Float -> Float
    val infixl 6 (+.) : Float, Float -> Float
    val infixl 6 (-.) : Float, Float -> Float

    val infixr 5 (::) : a, List a -> List a
    
    # TODO: add trait bounds to these - this is just temporary
    val not : Bool -> Bool
    val infix 4 (==) : a, a -> Bool
    val infix 4 (!=) : a, a -> Bool
    val infix 4 (<) : a, a -> Bool
    val infix 4 (<=) : a, a -> Bool
    val infix 4 (>) : a, a -> Bool
    val infix 4 (>=) : a, a -> Bool

    val infixl 3 (&&) : Bool, Bool -> Bool
    
    val infixl 2 (||) : Bool, Bool -> Bool

    #val infixl 1 (>>=) : (Monad m) => m a, (a -> m b) -> m b

    val infixl 0 (|>) : a, (a -> b) -> b

    val infixl 0 (;) : (), a -> a

    val infixl 5 (++) : String, String -> String
  }

  import .Operators._

  val sqrt : Float -> Float

  val ignore : a -> ()

  extern print : String -> () = "umber_print_endline"  # TODO: effects
  extern print_int : Int -> () = "umber_print_int"
  extern print_bool : Bool -> () = "umber_print_bool"
}

# TODO: need some kind of syntax for re-exporting things easily
# Idea: just put the imports inside `module :` (could work)
# Perhaps nicer: just use `include` instead of `import`
# - or some variant of `import` e.g. `import'`, `import!`
# - I think `include` is nice as it's more intuitive

# see https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Prelude.html
# as a starting point

# TODO: Char, Int, Integer, Float, etc.
# - different sizes (actually, if the overhead isn't that large,
#   could just use arbitrary-length integers by default)
# - numeric traits
# - arithmetic functions (Math module)

# TODO: collections e.g. Iterable, Collection, Seq, Array, List, Map, HashMap, TreeMap, Set, HashSet, TreeSet

# TODO: semigroups, monoids (eh...), functors, monads, applicatives

# TODO: IO e.g. reading to/writing from stdin/stdout/stderr and files

# TODO: effects and errors

# TODO: Sys/Os handling (syscals: file interactions, time, misc.)

# TODO: macro support

# TODO: randomness

module Bool = {
  import Bool

  let to_string = match
    | True -> "True"
    | False -> "False"
}

module Int = {
  import Int

  extern to_string : Int -> String = "umber_int_to_string"
}

module Float = {
  import Float

  extern infixl 6 (+) : Float, Float -> Float = "umber_float_add"
  extern abs : Float, Float -> Float = "umber_float_abs"
  extern sin : Float, Float -> Float = "umber_float_sin"
  extern cos : Float, Float -> Float = "umber_float_cos"
  extern pi : Float = "umber_float_pi"
}

module List = {
  # `rev_append xs ys` reverses `xs` and concatenates it with `ys`
  let rev_append xs ys =
    match xs
    | Nil -> ys
    | Cons x xs -> rev_append xs (x :: ys) 

  let reverse xs = rev_append xs Nil

  let append xs ys = rev_append (reverse xs) ys

  let map xs f =
    let loop acc xs f =
      match xs
      | Nil -> reverse acc
      | Cons x xs -> loop (f x :: acc) xs f
    in
    loop Nil xs f

  let concat_map xs f =
    let loop acc xs f =
      match xs
      | Nil -> reverse acc
      | Cons x xs -> loop (rev_append (f x) acc) xs f
    in
    loop Nil xs f
}

module Operators = {
  # TODO: Consider removing these fixity declarations and copying them from the sig
  # This requires a way to specify fixity in a let binding.
  let infixr 9 (.) f g x = f (g x)

  extern infixl 6 (+) : Int, Int -> Int = "umber_int_add"
  extern infixl 6 (-) : Int, Int -> Int = "umber_int_sub"
  extern infixl 7 (*) : Int, Int -> Int = "umber_int_mul"
  extern infixl 7 (%) : Int, Int -> Int = "umber_int_rem"
  extern infixl 7 mod : Int, Int -> Int = "umber_int_mod"
  extern infixr 8 (^) : Int, Int -> Int = "umber_int_pow"

  extern infixl 7 (*.) : Float, Float -> Float = "umber_float_mul"
  extern infixl 6 (+.) : Float, Float -> Float = "umber_float_add"
  extern infixl 6 (-.) : Float, Float -> Float = "umber_float_sub"

  let infixr 5 (::) = List.Cons
  
  let not = match | True -> False | False -> True

  extern infix 4 (==) : a, a -> Bool = "umber_eq"
  extern infix 4 (!=) : a, a -> Bool = "umber_neq"
  extern infix 4 (<) : a, a -> Bool = "umber_lt"
  extern infix 4 (<=) : a, a -> Bool = "umber_lte"
  extern infix 4 (>) : a, a -> Bool = "umber_gt"
  extern infix 4 (>=) : a, a -> Bool = "umber_gte"

  let infixl 3 (&&) a b = if a then b else False
  let infixl 2 (||) a b = if a then True else b
  let infixl 0 (|>) x f = f x
  let infixl 0 (;) () x = x

  extern infixl 5 (++) : String, String -> String = "umber_string_append"
}

import .Operators._

let ignore _ = ()

extern sqrt : Float -> Float = "umber_float_sqrt"
extern print : String -> () = "umber_print_endline"
extern print_int : Int -> () = "umber_print_int"
extern print_bool : Bool -> () = "umber_print_bool"