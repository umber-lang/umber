module : {
  module List : {
    type List a =
      | Nil
      | Cons a (List a)

    val length : List Any -> Int
    val head : List a -> Option a
    val tail : List a -> Option (List a)
    val reverse : List a -> List a
    val append : List a, List a -> List a
    val map : List a, (a -> b) -> List b
    val concat_map : List a, (a -> List b) -> List b
    val fold : List a, acc, (acc, a -> acc) -> acc

    val fold_until :
      List a, acc, (acc, a -> ControlFlow acc final), (acc -> final) -> final

    val count : List a, (a -> Bool) -> Int
    val for_all : List a, (a -> Bool) -> Bool

    # Zip two lists together, dropping the suffix of the longer list if their lengths
    # are not equal.
    val zip_shortest : List a, List b -> List (a, b)

    val unzip : List (a, b) -> (List a, List b)

    # `split list n` returns a tuple of the first `n` elements of `list`, and the
    # remaining elements.
    val split : List a, Int -> (List a, List a)

    # TODO: Add an Ord constraint here
    val sort : List a -> List a
  }

  import .List.(Nil, Cons)

  module ControlFlow : {
    type ControlFlow acc final =
      | Continue acc
      | Stop final
  }

  module Option : {
    type Option a =
      | None
      | Some a
  }

  import .Option.(None, Some)

  module Bool : {
    import Bool

    val to_string : Bool -> String
  }

  module Int : {
    import Int

    val abs : Int -> Int
    val neg : Int -> Int
    val to_string : Int -> String

    # TODO: Proper error handling. The runtime will currently panic on parse failure
    val of_string : String -> Int
  }

  module Float : {
    import Float

    val infixl 6 (+) : Float, Float -> Float
    val abs : Float, Float -> Float
    val sin : Float, Float -> Float
    val cos : Float, Float -> Float
    val pi : Float
  }

  module String : {
    import String

    val make : Int, Char -> String
    val of_char : Char -> String
    val fold : String, acc, (acc, Char -> acc) -> acc
    val split : String, Char -> List String
  }

  module Operators : {
    val infixr 9 (.) : (b -> c), (a -> b), a -> c

    val infixr 8 (^) : Int, Int -> Int
    #val infixr 8 (^^) : Float, Int -> Float
    #val infixr 8 (**) : Float, Float -> Float

    val infixl 7 (*) : Int, Int -> Int
    #val infixl 7 (/) : Float, Float -> Float
    val infixl 7 (//) : Int, Int -> Int  # Same as quot (not div)

    # Remainder
    val infixl 7 (%) : Int, Int -> Int

    # Euclidean modulus
    val infixl 7 mod : Int, Int -> Int

    val infixl 6 (+) : Int, Int -> Int
    val infixl 6 (-) : Int, Int -> Int

    val infixl 7 (*.) : Float, Float -> Float
    val infixl 6 (+.) : Float, Float -> Float
    val infixl 6 (-.) : Float, Float -> Float

    val infixr 5 (::) : a, List a -> List a
    
    # TODO: add trait bounds to these - this is just temporary
    val not : Bool -> Bool
    val infix 4 (==) : a, a -> Bool
    val infix 4 (!=) : a, a -> Bool
    val infix 4 (<) : a, a -> Bool
    val infix 4 (<=) : a, a -> Bool
    val infix 4 (>) : a, a -> Bool
    val infix 4 (>=) : a, a -> Bool
    val compare : a, a -> Ordering

    val infixl 3 (&&) : Bool, Bool -> Bool
    
    val infixl 2 (||) : Bool, Bool -> Bool

    #val infixl 1 (>>=) : (Monad m) => m a, (a -> m b) -> m b

    val infixl 0 (|>) : a, (a -> b) -> b

    val infixl 0 (;) : (), a -> a

    val infixl 5 (++) : String, String -> String
  }

  import .Operators._

  module Ordering : {
    type Ordering =
      | Less
      | Equal
      | Greater
  }

  val sqrt : Float -> Float

  val ignore : a -> ()
  val fst : (a, b) -> a
  val snd : (a, b) -> b

  extern print : String -> () = "umber_print_endline"  # TODO: effects
  extern print_string : String -> () = "umber_print_string"
  extern print_int : Int -> () = "umber_print_int"
  extern print_bool : Bool -> () = "umber_print_bool"
  extern read_line : () -> Option String = "umber_read_line" 
}

# TODO: need some kind of syntax for re-exporting things easily
# Idea: just put the imports inside `module :` (could work)
# Perhaps nicer: just use `include` instead of `import`
# - or some variant of `import` e.g. `import'`, `import!`
# - I think `include` is nice as it's more intuitive

# see https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Prelude.html
# as a starting point

# TODO: Char, Int, Integer, Float, etc.
# - different sizes (actually, if the overhead isn't that large,
#   could just use arbitrary-length integers by default)
# - numeric traits
# - arithmetic functions (Math module)

# TODO: collections e.g. Iterable, Collection, Seq, Array, List, Map, HashMap, TreeMap, Set, HashSet, TreeSet

# TODO: semigroups, monoids (eh...), functors, monads, applicatives

# TODO: IO e.g. reading to/writing from stdin/stdout/stderr and files

# TODO: effects and errors

# TODO: Sys/Os handling (syscals: file interactions, time, misc.)

# TODO: macro support

# TODO: randomness

module Bool = {
  import Bool

  let to_string = match
    | True -> "True"
    | False -> "False"
}

module Int = {
  import Int

  extern to_string : Int -> String = "umber_int_to_string"
  extern of_string : String -> Int = "umber_int_of_string"

  let neg x = 0 - x
  let abs x = if x >= 0 then x else neg x
}

module Float = {
  import Float

  extern infixl 6 (+) : Float, Float -> Float = "umber_float_add"
  extern abs : Float, Float -> Float = "umber_float_abs"
  extern sin : Float, Float -> Float = "umber_float_sin"
  extern cos : Float, Float -> Float = "umber_float_cos"
  extern pi : Float = "umber_float_pi"
}

module String = {
  import String

  extern make : Int, Char -> String = "umber_string_make"
  extern fold : String, acc, (acc, Char -> acc) -> acc = "umber_string_fold"

  let of_char c = make 1 c

  let split str sep =
    # TODO: The performance of this is going to be bad, with all the quadratic appending
    fold str [] (\chunks c ->
      if c == sep then "" :: chunks
      else match chunks
        | Nil -> [ of_char c ]
        | Cons current_chunk chunks -> (current_chunk ++ of_char c) :: chunks)
    |> List.reverse
}

import .Option.(None, Some)

module List = {
  let head = match
    | Nil -> None
    | Cons x _ -> Some x

  let tail = match
    | Nil -> None
    | Cons _ xs -> Some xs

  let length =
    let loop acc xs =
      match xs
      | Nil -> acc
      | Cons _ xs -> loop (acc + 1) xs
    in
    loop 0

  # `rev_append xs ys` reverses `xs` and concatenates it with `ys`
  let rev_append xs ys =
    match xs
    | Nil -> ys
    | Cons x xs -> rev_append xs (x :: ys) 

  let reverse xs = rev_append xs Nil

  let append xs ys = rev_append (reverse xs) ys

  let map xs f =
    let loop acc xs f =
      match xs
      | Nil -> reverse acc
      | Cons x xs -> loop (f x :: acc) xs f
    in
    loop Nil xs f

  let concat_map xs f =
    let loop acc xs f =
      match xs
      | Nil -> reverse acc
      | Cons x xs -> loop (rev_append (f x) acc) xs f
    in
    loop Nil xs f

  let fold xs init f =
    match xs
    | Nil -> init
    | Cons x xs -> fold xs (f init x) f

  let fold_until xs init f finish =
    match xs
    | Nil -> finish init
    | Cons x xs ->
      match f init x
      | ControlFlow.Stop done -> done
      | ControlFlow.Continue acc -> fold_until xs acc f finish

  let count xs f = fold xs 0 (\acc x -> if f x then acc + 1 else acc)

  let for_all xs f =
    fold_until
      xs
      ()
      (\() x -> if f x then ControlFlow.Continue () else ControlFlow.Stop False)
      (\() -> True)

  let zip_shortest xs ys =
    match (xs, ys)
    | (Nil, _) | (_, Nil) -> Nil
    | (Cons x xs, Cons y ys) -> Cons (x, y) (zip_shortest xs ys)

  let unzip xys =
    match xys
    | Nil -> (Nil, Nil)
    | Cons (x, y) xys ->
      let (xs, ys) = unzip xys in
      (x :: xs, y :: ys)

  let split xs n =
    let loop left right xs n =
      match xs
      | Nil -> (reverse left, reverse right)
      | Cons x xs ->
        if n <= 0 then loop left (x :: right) xs n
        else loop (x :: left) right xs (n - 1)
    in
    loop Nil Nil xs n

  let sort xs =
    let merge xs ys =
      match (xs, ys)
      | (Nil, rest) | (rest, Nil) -> rest
      | (Cons x xs', Cons y ys') ->
        if x <= y then x :: merge xs' ys
        else y :: merge xs ys'
    in
    let sort_loop len xs =
      if len <= 1 then xs
      else 
        let half_len = len // 2 in
        let (left, right) = split xs half_len in
        merge (sort_loop half_len left) (sort_loop (len - half_len) right)
    in
    sort_loop (length xs) xs
}

import .List.(Nil, Cons)

module Operators = {
  # TODO: Consider removing these fixity declarations and copying them from the sig
  # This requires a way to specify fixity in a let binding.
  let infixr 9 (.) f g x = f (g x)

  extern infixl 6 (+) : Int, Int -> Int = "umber_int_add"
  extern infixl 6 (-) : Int, Int -> Int = "umber_int_sub"
  extern infixl 7 (*) : Int, Int -> Int = "umber_int_mul"
  extern infixl 7 (//) : Int, Int -> Int = "umber_int_div"
  extern infixl 7 (%) : Int, Int -> Int = "umber_int_rem"
  extern infixl 7 mod : Int, Int -> Int = "umber_int_mod"
  extern infixr 8 (^) : Int, Int -> Int = "umber_int_pow"

  extern infixl 7 (*.) : Float, Float -> Float = "umber_float_mul"
  extern infixl 6 (+.) : Float, Float -> Float = "umber_float_add"
  extern infixl 6 (-.) : Float, Float -> Float = "umber_float_sub"

  let infixr 5 (::) = List.Cons
  
  let not = match | True -> False | False -> True

  extern infix 4 (==) : a, a -> Bool = "umber_eq"
  extern infix 4 (!=) : a, a -> Bool = "umber_neq"
  extern infix 4 (<) : a, a -> Bool = "umber_lt"
  extern infix 4 (<=) : a, a -> Bool = "umber_lte"
  extern infix 4 (>) : a, a -> Bool = "umber_gt"
  extern infix 4 (>=) : a, a -> Bool = "umber_gte"
  extern compare : a, a -> Ordering = "umber_compare"
  
  let infixl 3 (&&) a b = if a then b else False
  let infixl 2 (||) a b = if a then True else b
  let infixl 0 (|>) x f = f x
  let infixl 0 (;) () x = x

  extern infixl 5 (++) : String, String -> String = "umber_string_append"
}

import .Operators._

let ignore _ = ()
let fst (a, _) = a
let snd (_, b) = b

extern sqrt : Float -> Float = "umber_float_sqrt"
extern print : String -> () = "umber_print_endline"
extern print_string : String -> () = "umber_print_string"
extern print_int : Int -> () = "umber_print_int"
extern print_bool : Bool -> () = "umber_print_bool"
extern read_line : () -> Option String = "umber_read_line" 