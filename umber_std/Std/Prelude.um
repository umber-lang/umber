module : {
  module List : {
    type List a = Nil | Cons a (List a)
  }

  import List with Nil, Cons

  module Operators : {
    val (.) (infixr 9) : () => (b -> c), (a -> b), a -> c
    # `() =>` is a hack for the parser as it confuses the `(` in `(b -> c)` as the start
    # of a trait bound (it would need arbitrary lookahead or some other trickery to
    # avoid doing so)

    val (^) (infixr 8) : Int, Int -> Int
    #val (^^) (infixr 8) : Float, Int -> Float
    #val (**) (infixr 8) : Float, Float -> Float

    val (*) (infixl 7) : Int, Int -> Int
    #val (/) (infixl 7) : Float, Float -> Float
    #val (//) (infixl 7) : Int, Int -> Int  # Same as quot (not div)
    #val (%) (infixl 7) : Int, Int -> Int  # Same as rem (not mod)

    val (+) (infixl 6) : Int, Int -> Int
    val (-) (infixl 6) : Int, Int -> Int

    val (::) (infixr 5) : a, List a -> List a
    
    # TODO: add trait bounds to these - this is just temporary
    val not : Bool -> Bool
    val (==) (infix 4) : a, a -> Bool
    val (!=) (infix 4) : a, a -> Bool
    val (<) (infix 4) : a, a -> Bool
    val (<=) (infix 4) : a, a -> Bool
    val (>) (infix 4) : a, a -> Bool
    val (>=) (infix 4) : a, a -> Bool

    val (&&) (infixl 3) : Bool, Bool -> Bool
    
    val (||) (infixl 2) : Bool, Bool -> Bool

    #val (>>=) (infixl 1) : (Monad m) => m a, (a -> m b) -> m b

    val (|>) (infixl 0) : a, (a -> b) -> b

    val (;) (infixl 0) : () => (), a -> a

    val (++) (infixl 5) : String, String -> String
  }

  import Operators with *

  val sqrt : Int -> Float

  extern print : String -> () = "umber_print_endline"  # TODO: effects
  extern print_int : Int -> () = "umber_print_int"
  extern print_bool : Bool -> () = "umber_print_bool"
}

# TODO: implement public/private distinction for modules

#import Bool with *
#import Fun
# TODO: need some kind of syntax for re-exporting things easily
# Idea: just put the imports inside `module :` (could work)
# Perhaps nicer: just use `include` instead of `import`
# - or some variant of `import` e.g. `import'`, `import!`
# - I think `include` is nice as it's more intuitive

# see https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Prelude.html
# as a starting point

# TODO: Char, Int, Integer, Float, etc.
# - different sizes (actually, if the overhead isn't that large,
#   could just use arbitrary-length integers by default)
# - numeric traits
# - arithmetic functions (Math module)

# TODO: collections e.g. Iterable, Collection, Seq, Array, List, Map, HashMap, TreeMap, Set, HashSet, TreeSet

# TODO: semigroups, monoids (eh...), functors, monads, applicatives

# TODO: IO e.g. reading to/writing from stdin/stdout/stderr and files

# TODO: effects and errors

# TODO: Sys/Os handling (syscals: file interactions, time, misc.)

# TODO: macro support

# TODO: randomness

module Operators = {
  # TODO: Consider removing these fixity declarations and copying them from the sig
  # This requires a way to specify fixity in a let binding. (Also consider that there's 
  # currently there's no way to put fixity declarations inside nested expressions).
  val (.) (infixr 9) : () => (b -> c), (a -> b), a -> c
  let (.) f g x = f (g x)

  extern (^) (infixr 8) : Int, Int -> Int = "umber_int_pow"
  extern (*) (infixl 7) : Int, Int -> Int = "umber_int_mul"
  extern (+) (infixl 6) : Int, Int -> Int = "umber_int_add"
  extern (-) (infixl 6) : Int, Int -> Int = "umber_int_sub"

  val (::) (infixr 5) : a, List a -> List a
  let (::) = List.Cons
  
  let not = match | True -> False | False -> True

  extern (==) (infix 4) : a, a -> Bool = "umber_eq"
  extern (!=) (infix 4) : a, a -> Bool = "umber_neq"
  extern (<) (infix 4) : a, a -> Bool = "umber_lt"
  extern (<=) (infix 4) : a, a -> Bool = "umber_lte"
  extern (>) (infix 4) : a, a -> Bool = "umber_gt"
  extern (>=) (infix 4) : a, a -> Bool = "umber_gte"

  val (&&) (infixl 3) : Bool, Bool -> Bool
  let (&&) a b = if a then b else False
  
  val (||) (infixl 2) : Bool, Bool -> Bool
  let (||) a b = if a then True else b

  val (|>) (infixl 0) : a, (a -> b) -> b
  let (|>) x f = f x

  val (;) (infixl 0) : () => (), a -> a
  let (;) () x = x

  extern (++) (infixl 5) : String, String -> String = "umber_string_append"
}

import Operators with *

extern sqrt : Float -> Float = "umber_float_sqrt"
extern print : String -> () = "umber_print_endline"
extern print_int : Int -> () = "umber_print_int"
extern print_bool : Bool -> () = "umber_print_bool"